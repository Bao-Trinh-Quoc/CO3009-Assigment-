
traffic_light_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e38  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003f44  08003f44  00004f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f70  08003f70  00005048  2**0
                  CONTENTS
  4 .ARM          00000000  08003f70  08003f70  00005048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f70  08003f70  00005048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f70  08003f70  00004f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f74  08003f74  00004f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08003f78  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000048  08003fc0  00005048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08003fc0  00005324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f630  00000000  00000000  00005071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258f  00000000  00000000  000146a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00016c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc6  00000000  00000000  00017c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019481  00000000  00000000  00018946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001512e  00000000  00000000  00031dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce26  00000000  00000000  00046ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3d1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  000d3d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d8034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f2c 	.word	0x08003f2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08003f2c 	.word	0x08003f2c

0800014c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	@ (8000240 <buttonReading+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	@ (8000244 <buttonReading+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	@ (8000248 <buttonReading+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	@ (8000240 <buttonReading+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	@ (800024c <buttonReading+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	@ (8000250 <buttonReading+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f002 f8bf 	bl	8002308 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	@ (8000248 <buttonReading+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2c      	ldr	r2, [pc, #176]	@ (8000248 <buttonReading+0xfc>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	@ (8000240 <buttonReading+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d143      	bne.n	800022a <buttonReading+0xde>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a28      	ldr	r2, [pc, #160]	@ (8000248 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4926      	ldr	r1, [pc, #152]	@ (8000244 <buttonReading+0xf8>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d13b      	bne.n	800022a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a27      	ldr	r2, [pc, #156]	@ (8000254 <buttonReading+0x108>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4923      	ldr	r1, [pc, #140]	@ (8000248 <buttonReading+0xfc>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	@ (8000248 <buttonReading+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	@ (8000254 <buttonReading+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a20      	ldr	r2, [pc, #128]	@ (8000254 <buttonReading+0x108>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d128      	bne.n	800022a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	@ (8000258 <buttonReading+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / TIMER_TICK;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	@ (800025c <buttonReading+0x110>)
 80001e4:	21c8      	movs	r1, #200	@ 0xc8
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001ea:	e01e      	b.n	800022a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	@ (8000254 <buttonReading+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d119      	bne.n	800022a <buttonReading+0xde>
					buttonCounters[i] --;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	@ (800025c <buttonReading+0x110>)
 80001fa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80001fe:	b292      	uxth	r2, r2
 8000200:	3a01      	subs	r2, #1
 8000202:	b292      	uxth	r2, r2
 8000204:	b211      	sxth	r1, r2
 8000206:	4a15      	ldr	r2, [pc, #84]	@ (800025c <buttonReading+0x110>)
 8000208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a13      	ldr	r2, [pc, #76]	@ (800025c <buttonReading+0x110>)
 8000210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dc08      	bgt.n	800022a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a0f      	ldr	r2, [pc, #60]	@ (8000258 <buttonReading+0x10c>)
 800021c:	2101      	movs	r1, #1
 800021e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / TIMER_TICK;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <buttonReading+0x110>)
 8000224:	2114      	movs	r1, #20
 8000226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d990      	bls.n	8000158 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	2000006c 	.word	0x2000006c
 8000244:	20000070 	.word	0x20000070
 8000248:	20000068 	.word	0x20000068
 800024c:	20000000 	.word	0x20000000
 8000250:	20000010 	.word	0x20000010
 8000254:	20000064 	.word	0x20000064
 8000258:	20000074 	.word	0x20000074
 800025c:	20000078 	.word	0x20000078

08000260 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d901      	bls.n	8000274 <buttonPressed+0x14>
 8000270:	2300      	movs	r3, #0
 8000272:	e00b      	b.n	800028c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a08      	ldr	r2, [pc, #32]	@ (8000298 <buttonPressed+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d105      	bne.n	800028a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a05      	ldr	r2, [pc, #20]	@ (8000298 <buttonPressed+0x38>)
 8000282:	2100      	movs	r1, #0
 8000284:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <buttonPressed+0x2c>
	}
	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	20000074 	.word	0x20000074

0800029c <counterRun>:
 *      Author: DELL
 */

#include "counter.h"

void counterRun(void) {
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	if (trafficCounters[0] > TIMER_TICK) {
 80002a0:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <counterRun+0x40>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b0a      	cmp	r3, #10
 80002a6:	d905      	bls.n	80002b4 <counterRun+0x18>
		trafficCounters[0] -= TIMER_TICK;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <counterRun+0x40>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3b0a      	subs	r3, #10
 80002ae:	4a0b      	ldr	r2, [pc, #44]	@ (80002dc <counterRun+0x40>)
 80002b0:	6013      	str	r3, [r2, #0]
 80002b2:	e002      	b.n	80002ba <counterRun+0x1e>
	}
	else {
		trafficCounters[0] = 0;
 80002b4:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <counterRun+0x40>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
	}
	if (trafficCounters[1] > TIMER_TICK) {
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <counterRun+0x40>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	2b0a      	cmp	r3, #10
 80002c0:	d905      	bls.n	80002ce <counterRun+0x32>
		trafficCounters[1] -= TIMER_TICK;
 80002c2:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <counterRun+0x40>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	3b0a      	subs	r3, #10
 80002c8:	4a04      	ldr	r2, [pc, #16]	@ (80002dc <counterRun+0x40>)
 80002ca:	6053      	str	r3, [r2, #4]
	}
	else {
		trafficCounters[1] = 0;
	}
}
 80002cc:	e002      	b.n	80002d4 <counterRun+0x38>
		trafficCounters[1] = 0;
 80002ce:	4b03      	ldr	r3, [pc, #12]	@ (80002dc <counterRun+0x40>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	20000318 	.word	0x20000318

080002e0 <counterReset>:

void counterReset(void) {
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	trafficCounters[0] = 0;
 80002e4:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <counterReset+0x18>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
	trafficCounters[1] = 0;
 80002ea:	4b03      	ldr	r3, [pc, #12]	@ (80002f8 <counterReset+0x18>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	605a      	str	r2, [r3, #4]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	20000318 	.word	0x20000318

080002fc <fsmAutoStop>:
static uint8_t fsmIDs[FSM_TASK] = {};
static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmAutoStop(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	SCH_AddTask(counterReset, 0, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	2100      	movs	r1, #0
 8000304:	4802      	ldr	r0, [pc, #8]	@ (8000310 <fsmAutoStop+0x14>)
 8000306:	f001 f805 	bl	8001314 <SCH_AddTask>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	080002e1 	.word	0x080002e1

08000314 <fsmAutoProcessing>:

/*
 * For pedestrian mode if needed
 * */
void fsmAutoProcessing(void) {
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	return;
 8000318:	bf00      	nop
}
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <fsmAuto>:

void fsmAuto(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	fsmAutoIDs[0] = SCH_AddTask(fsmAutoProcessing, 10, TIMER_TICK);
 8000324:	220a      	movs	r2, #10
 8000326:	210a      	movs	r1, #10
 8000328:	4845      	ldr	r0, [pc, #276]	@ (8000440 <fsmAuto+0x120>)
 800032a:	f000 fff3 	bl	8001314 <SCH_AddTask>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	4b44      	ldr	r3, [pc, #272]	@ (8000444 <fsmAuto+0x124>)
 8000334:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(counterRun, 0, TIMER_TICK);
 8000336:	220a      	movs	r2, #10
 8000338:	2100      	movs	r1, #0
 800033a:	4843      	ldr	r0, [pc, #268]	@ (8000448 <fsmAuto+0x128>)
 800033c:	f000 ffea 	bl	8001314 <SCH_AddTask>
 8000340:	4603      	mov	r3, r0
 8000342:	461a      	mov	r2, r3
 8000344:	4b3f      	ldr	r3, [pc, #252]	@ (8000444 <fsmAuto+0x124>)
 8000346:	705a      	strb	r2, [r3, #1]
	fsmAutoIDs[2] = SCH_AddTask(lcd_counter, 0, 1000);
 8000348:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800034c:	2100      	movs	r1, #0
 800034e:	483f      	ldr	r0, [pc, #252]	@ (800044c <fsmAuto+0x12c>)
 8000350:	f000 ffe0 	bl	8001314 <SCH_AddTask>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	4b3a      	ldr	r3, [pc, #232]	@ (8000444 <fsmAuto+0x124>)
 800035a:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800035c:	4b3c      	ldr	r3, [pc, #240]	@ (8000450 <fsmAuto+0x130>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <fsmAuto+0x134>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	441a      	add	r2, r3
 8000366:	4b3c      	ldr	r3, [pc, #240]	@ (8000458 <fsmAuto+0x138>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4413      	add	r3, r2
 800036c:	461a      	mov	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	483a      	ldr	r0, [pc, #232]	@ (800045c <fsmAuto+0x13c>)
 8000372:	f000 ffcf 	bl	8001314 <SCH_AddTask>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	4b32      	ldr	r3, [pc, #200]	@ (8000444 <fsmAuto+0x124>)
 800037c:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800037e:	4b34      	ldr	r3, [pc, #208]	@ (8000450 <fsmAuto+0x130>)
 8000380:	6819      	ldr	r1, [r3, #0]
 8000382:	4b33      	ldr	r3, [pc, #204]	@ (8000450 <fsmAuto+0x130>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b33      	ldr	r3, [pc, #204]	@ (8000454 <fsmAuto+0x134>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	441a      	add	r2, r3
 800038c:	4b32      	ldr	r3, [pc, #200]	@ (8000458 <fsmAuto+0x138>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4413      	add	r3, r2
 8000392:	461a      	mov	r2, r3
 8000394:	4832      	ldr	r0, [pc, #200]	@ (8000460 <fsmAuto+0x140>)
 8000396:	f000 ffbd 	bl	8001314 <SCH_AddTask>
 800039a:	4603      	mov	r3, r0
 800039c:	461a      	mov	r2, r3
 800039e:	4b29      	ldr	r3, [pc, #164]	@ (8000444 <fsmAuto+0x124>)
 80003a0:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80003a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000450 <fsmAuto+0x130>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000458 <fsmAuto+0x138>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	18d1      	adds	r1, r2, r3
 80003ac:	4b28      	ldr	r3, [pc, #160]	@ (8000450 <fsmAuto+0x130>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4b28      	ldr	r3, [pc, #160]	@ (8000454 <fsmAuto+0x134>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	441a      	add	r2, r3
 80003b6:	4b28      	ldr	r3, [pc, #160]	@ (8000458 <fsmAuto+0x138>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4413      	add	r3, r2
 80003bc:	461a      	mov	r2, r3
 80003be:	4829      	ldr	r0, [pc, #164]	@ (8000464 <fsmAuto+0x144>)
 80003c0:	f000 ffa8 	bl	8001314 <SCH_AddTask>
 80003c4:	4603      	mov	r3, r0
 80003c6:	461a      	mov	r2, r3
 80003c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000444 <fsmAuto+0x124>)
 80003ca:	715a      	strb	r2, [r3, #5]
	fsmAutoIDs[6] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80003cc:	4b20      	ldr	r3, [pc, #128]	@ (8000450 <fsmAuto+0x130>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	4b20      	ldr	r3, [pc, #128]	@ (8000454 <fsmAuto+0x134>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	441a      	add	r2, r3
 80003d6:	4b20      	ldr	r3, [pc, #128]	@ (8000458 <fsmAuto+0x138>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4413      	add	r3, r2
 80003dc:	461a      	mov	r2, r3
 80003de:	2100      	movs	r1, #0
 80003e0:	4821      	ldr	r0, [pc, #132]	@ (8000468 <fsmAuto+0x148>)
 80003e2:	f000 ff97 	bl	8001314 <SCH_AddTask>
 80003e6:	4603      	mov	r3, r0
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b16      	ldr	r3, [pc, #88]	@ (8000444 <fsmAuto+0x124>)
 80003ec:	719a      	strb	r2, [r3, #6]
	fsmAutoIDs[7] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80003ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000458 <fsmAuto+0x138>)
 80003f0:	6819      	ldr	r1, [r3, #0]
 80003f2:	4b17      	ldr	r3, [pc, #92]	@ (8000450 <fsmAuto+0x130>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	4b17      	ldr	r3, [pc, #92]	@ (8000454 <fsmAuto+0x134>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	441a      	add	r2, r3
 80003fc:	4b16      	ldr	r3, [pc, #88]	@ (8000458 <fsmAuto+0x138>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4413      	add	r3, r2
 8000402:	461a      	mov	r2, r3
 8000404:	4819      	ldr	r0, [pc, #100]	@ (800046c <fsmAuto+0x14c>)
 8000406:	f000 ff85 	bl	8001314 <SCH_AddTask>
 800040a:	4603      	mov	r3, r0
 800040c:	461a      	mov	r2, r3
 800040e:	4b0d      	ldr	r3, [pc, #52]	@ (8000444 <fsmAuto+0x124>)
 8000410:	71da      	strb	r2, [r3, #7]
	fsmAutoIDs[8] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000412:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <fsmAuto+0x138>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <fsmAuto+0x134>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	18d1      	adds	r1, r2, r3
 800041c:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <fsmAuto+0x130>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <fsmAuto+0x134>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	441a      	add	r2, r3
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <fsmAuto+0x138>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4413      	add	r3, r2
 800042c:	461a      	mov	r2, r3
 800042e:	4810      	ldr	r0, [pc, #64]	@ (8000470 <fsmAuto+0x150>)
 8000430:	f000 ff70 	bl	8001314 <SCH_AddTask>
 8000434:	4603      	mov	r3, r0
 8000436:	461a      	mov	r2, r3
 8000438:	4b02      	ldr	r3, [pc, #8]	@ (8000444 <fsmAuto+0x124>)
 800043a:	721a      	strb	r2, [r3, #8]
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	08000315 	.word	0x08000315
 8000444:	20000088 	.word	0x20000088
 8000448:	0800029d 	.word	0x0800029d
 800044c:	08000c85 	.word	0x08000c85
 8000450:	20000034 	.word	0x20000034
 8000454:	2000003c 	.word	0x2000003c
 8000458:	20000038 	.word	0x20000038
 800045c:	08001c1d 	.word	0x08001c1d
 8000460:	08001c2d 	.word	0x08001c2d
 8000464:	08001c3d 	.word	0x08001c3d
 8000468:	08001c6d 	.word	0x08001c6d
 800046c:	08001c7d 	.word	0x08001c7d
 8000470:	08001c5d 	.word	0x08001c5d

08000474 <fsmManualStop>:

void fsmManualStop(void) {
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	SCH_AddTask(traffic0Off, 0, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2100      	movs	r1, #0
 800047c:	4804      	ldr	r0, [pc, #16]	@ (8000490 <fsmManualStop+0x1c>)
 800047e:	f000 ff49 	bl	8001314 <SCH_AddTask>
	SCH_AddTask(traffic1Off, 0, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	2100      	movs	r1, #0
 8000486:	4803      	ldr	r0, [pc, #12]	@ (8000494 <fsmManualStop+0x20>)
 8000488:	f000 ff44 	bl	8001314 <SCH_AddTask>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	08001c0d 	.word	0x08001c0d
 8000494:	08001c4d 	.word	0x08001c4d

08000498 <fsmManualProcessing>:

void fsmManualProcessing(void) {
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff fedf 	bl	8000260 <buttonPressed>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d01d      	beq.n	80004e4 <fsmManualProcessing+0x4c>
		switch (trafficStates[0]) {
 80004a8:	4b21      	ldr	r3, [pc, #132]	@ (8000530 <fsmManualProcessing+0x98>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d012      	beq.n	80004d6 <fsmManualProcessing+0x3e>
 80004b0:	2b03      	cmp	r3, #3
 80004b2:	dc16      	bgt.n	80004e2 <fsmManualProcessing+0x4a>
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d002      	beq.n	80004be <fsmManualProcessing+0x26>
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d006      	beq.n	80004ca <fsmManualProcessing+0x32>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Red, 0, 0);
			break;
		default:
			break;
 80004bc:	e011      	b.n	80004e2 <fsmManualProcessing+0x4a>
			SCH_AddTask(traffic0Green, 0, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2100      	movs	r1, #0
 80004c2:	481c      	ldr	r0, [pc, #112]	@ (8000534 <fsmManualProcessing+0x9c>)
 80004c4:	f000 ff26 	bl	8001314 <SCH_AddTask>
			break;
 80004c8:	e00c      	b.n	80004e4 <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Yellow, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	481a      	ldr	r0, [pc, #104]	@ (8000538 <fsmManualProcessing+0xa0>)
 80004d0:	f000 ff20 	bl	8001314 <SCH_AddTask>
			break;
 80004d4:	e006      	b.n	80004e4 <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Red, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	4818      	ldr	r0, [pc, #96]	@ (800053c <fsmManualProcessing+0xa4>)
 80004dc:	f000 ff1a 	bl	8001314 <SCH_AddTask>
			break;
 80004e0:	e000      	b.n	80004e4 <fsmManualProcessing+0x4c>
			break;
 80004e2:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 80004e4:	2002      	movs	r0, #2
 80004e6:	f7ff febb 	bl	8000260 <buttonPressed>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d01d      	beq.n	800052c <fsmManualProcessing+0x94>
		switch (trafficStates[1]) {
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <fsmManualProcessing+0x98>)
 80004f2:	785b      	ldrb	r3, [r3, #1]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d012      	beq.n	800051e <fsmManualProcessing+0x86>
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	dc16      	bgt.n	800052a <fsmManualProcessing+0x92>
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d002      	beq.n	8000506 <fsmManualProcessing+0x6e>
 8000500:	2b02      	cmp	r3, #2
 8000502:	d006      	beq.n	8000512 <fsmManualProcessing+0x7a>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Red, 0, 0);
			break;
		default:
			break;
 8000504:	e011      	b.n	800052a <fsmManualProcessing+0x92>
			SCH_AddTask(traffic1Green, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	480d      	ldr	r0, [pc, #52]	@ (8000540 <fsmManualProcessing+0xa8>)
 800050c:	f000 ff02 	bl	8001314 <SCH_AddTask>
			break;
 8000510:	e00c      	b.n	800052c <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Yellow, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	480b      	ldr	r0, [pc, #44]	@ (8000544 <fsmManualProcessing+0xac>)
 8000518:	f000 fefc 	bl	8001314 <SCH_AddTask>
			break;
 800051c:	e006      	b.n	800052c <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Red, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	4809      	ldr	r0, [pc, #36]	@ (8000548 <fsmManualProcessing+0xb0>)
 8000524:	f000 fef6 	bl	8001314 <SCH_AddTask>
			break;
 8000528:	e000      	b.n	800052c <fsmManualProcessing+0x94>
			break;
 800052a:	bf00      	nop
		}
	}
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000314 	.word	0x20000314
 8000534:	08001c2d 	.word	0x08001c2d
 8000538:	08001c3d 	.word	0x08001c3d
 800053c:	08001c1d 	.word	0x08001c1d
 8000540:	08001c6d 	.word	0x08001c6d
 8000544:	08001c7d 	.word	0x08001c7d
 8000548:	08001c5d 	.word	0x08001c5d

0800054c <fsmManual>:

void fsmManual(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	fsmManualIDs[0] = SCH_AddTask(fsmManualProcessing, 10, TIMER_TICK);
 8000550:	220a      	movs	r2, #10
 8000552:	210a      	movs	r1, #10
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <fsmManual+0x30>)
 8000556:	f000 fedd 	bl	8001314 <SCH_AddTask>
 800055a:	4603      	mov	r3, r0
 800055c:	461a      	mov	r2, r3
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <fsmManual+0x34>)
 8000560:	701a      	strb	r2, [r3, #0]
	// Initialize for Manual Mode
	SCH_AddTask(traffic0Red, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	4807      	ldr	r0, [pc, #28]	@ (8000584 <fsmManual+0x38>)
 8000568:	f000 fed4 	bl	8001314 <SCH_AddTask>
	SCH_AddTask(traffic1Green, 0, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2100      	movs	r1, #0
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <fsmManual+0x3c>)
 8000572:	f000 fecf 	bl	8001314 <SCH_AddTask>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	08000499 	.word	0x08000499
 8000580:	20000094 	.word	0x20000094
 8000584:	08001c1d 	.word	0x08001c1d
 8000588:	08001c6d 	.word	0x08001c6d

0800058c <fsmTunningStop>:

void fsmTunningStop(void) {
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	return;
 8000590:	bf00      	nop
}
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <fsmTunningProcessing>:

void fsmTunningProcessing(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
		if (buttonPressed(1)) {
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff fe5f 	bl	8000260 <buttonPressed>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	f000 80ba 	beq.w	800071e <fsmTunningProcessing+0x186>
			SCH_DeleteTask(fsmTunningIDs[1]);
 80005aa:	4bad      	ldr	r3, [pc, #692]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 80005ac:	785b      	ldrb	r3, [r3, #1]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 ffb6 	bl	8001520 <SCH_DeleteTask>
			SCH_DeleteTask(fsmTunningIDs[2]);
 80005b4:	4baa      	ldr	r3, [pc, #680]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 80005b6:	789b      	ldrb	r3, [r3, #2]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ffb1 	bl	8001520 <SCH_DeleteTask>
			SCH_DeleteTask(fsmTunningIDs[3]);
 80005be:	4ba8      	ldr	r3, [pc, #672]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 80005c0:	78db      	ldrb	r3, [r3, #3]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 ffac 	bl	8001520 <SCH_DeleteTask>
			SCH_DeleteTask(fsmTunningIDs[4]);
 80005c8:	4ba5      	ldr	r3, [pc, #660]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 ffa7 	bl	8001520 <SCH_DeleteTask>
			switch (fsmTunningState) {
 80005d2:	4ba4      	ldr	r3, [pc, #656]	@ (8000864 <fsmTunningProcessing+0x2cc>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d06d      	beq.n	80006b6 <fsmTunningProcessing+0x11e>
 80005da:	2b03      	cmp	r3, #3
 80005dc:	f300 809e 	bgt.w	800071c <fsmTunningProcessing+0x184>
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d002      	beq.n	80005ea <fsmTunningProcessing+0x52>
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d033      	beq.n	8000650 <fsmTunningProcessing+0xb8>
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
					fsmTunningState = TRAFFIC_RED;
					break;
				default:
					break;
 80005e8:	e098      	b.n	800071c <fsmTunningProcessing+0x184>
					SCH_AddTask(lcd_red_duration, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	489e      	ldr	r0, [pc, #632]	@ (8000868 <fsmTunningProcessing+0x2d0>)
 80005f0:	f000 fe90 	bl	8001314 <SCH_AddTask>
					fsmTunningIDs[1] = SCH_AddTask(traffic0Green, 0, 1000);
 80005f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005f8:	2100      	movs	r1, #0
 80005fa:	489c      	ldr	r0, [pc, #624]	@ (800086c <fsmTunningProcessing+0x2d4>)
 80005fc:	f000 fe8a 	bl	8001314 <SCH_AddTask>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	4b96      	ldr	r3, [pc, #600]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 8000606:	705a      	strb	r2, [r3, #1]
					fsmTunningIDs[2] = SCH_AddTask(traffic1Green, 0, 1000);
 8000608:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800060c:	2100      	movs	r1, #0
 800060e:	4898      	ldr	r0, [pc, #608]	@ (8000870 <fsmTunningProcessing+0x2d8>)
 8000610:	f000 fe80 	bl	8001314 <SCH_AddTask>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b91      	ldr	r3, [pc, #580]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 800061a:	709a      	strb	r2, [r3, #2]
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 800061c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000620:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000624:	4893      	ldr	r0, [pc, #588]	@ (8000874 <fsmTunningProcessing+0x2dc>)
 8000626:	f000 fe75 	bl	8001314 <SCH_AddTask>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b8c      	ldr	r3, [pc, #560]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 8000630:	70da      	strb	r2, [r3, #3]
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 8000632:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000636:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800063a:	488f      	ldr	r0, [pc, #572]	@ (8000878 <fsmTunningProcessing+0x2e0>)
 800063c:	f000 fe6a 	bl	8001314 <SCH_AddTask>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b86      	ldr	r3, [pc, #536]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 8000646:	711a      	strb	r2, [r3, #4]
					fsmTunningState = TRAFFIC_GREEN;
 8000648:	4b86      	ldr	r3, [pc, #536]	@ (8000864 <fsmTunningProcessing+0x2cc>)
 800064a:	2202      	movs	r2, #2
 800064c:	701a      	strb	r2, [r3, #0]
					break;
 800064e:	e066      	b.n	800071e <fsmTunningProcessing+0x186>
					SCH_AddTask(lcd_green_duration, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	4889      	ldr	r0, [pc, #548]	@ (800087c <fsmTunningProcessing+0x2e4>)
 8000656:	f000 fe5d 	bl	8001314 <SCH_AddTask>
					fsmTunningIDs[1] = SCH_AddTask(traffic0Yellow, 0, 1000);
 800065a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800065e:	2100      	movs	r1, #0
 8000660:	4887      	ldr	r0, [pc, #540]	@ (8000880 <fsmTunningProcessing+0x2e8>)
 8000662:	f000 fe57 	bl	8001314 <SCH_AddTask>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b7d      	ldr	r3, [pc, #500]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 800066c:	705a      	strb	r2, [r3, #1]
					fsmTunningIDs[2] = SCH_AddTask(traffic1Yellow, 0, 1000);
 800066e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000672:	2100      	movs	r1, #0
 8000674:	4883      	ldr	r0, [pc, #524]	@ (8000884 <fsmTunningProcessing+0x2ec>)
 8000676:	f000 fe4d 	bl	8001314 <SCH_AddTask>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	4b78      	ldr	r3, [pc, #480]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 8000680:	709a      	strb	r2, [r3, #2]
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 8000682:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000686:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800068a:	487a      	ldr	r0, [pc, #488]	@ (8000874 <fsmTunningProcessing+0x2dc>)
 800068c:	f000 fe42 	bl	8001314 <SCH_AddTask>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b72      	ldr	r3, [pc, #456]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 8000696:	70da      	strb	r2, [r3, #3]
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 8000698:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800069c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006a0:	4875      	ldr	r0, [pc, #468]	@ (8000878 <fsmTunningProcessing+0x2e0>)
 80006a2:	f000 fe37 	bl	8001314 <SCH_AddTask>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b6d      	ldr	r3, [pc, #436]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 80006ac:	711a      	strb	r2, [r3, #4]
					fsmTunningState = TRAFFIC_YELLOW;
 80006ae:	4b6d      	ldr	r3, [pc, #436]	@ (8000864 <fsmTunningProcessing+0x2cc>)
 80006b0:	2203      	movs	r2, #3
 80006b2:	701a      	strb	r2, [r3, #0]
					break;
 80006b4:	e033      	b.n	800071e <fsmTunningProcessing+0x186>
					SCH_AddTask(lcd_yellow_duration, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	4873      	ldr	r0, [pc, #460]	@ (8000888 <fsmTunningProcessing+0x2f0>)
 80006bc:	f000 fe2a 	bl	8001314 <SCH_AddTask>
					fsmTunningIDs[1] = SCH_AddTask(traffic0Red, 0, 1000);
 80006c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006c4:	2100      	movs	r1, #0
 80006c6:	4871      	ldr	r0, [pc, #452]	@ (800088c <fsmTunningProcessing+0x2f4>)
 80006c8:	f000 fe24 	bl	8001314 <SCH_AddTask>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b63      	ldr	r3, [pc, #396]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 80006d2:	705a      	strb	r2, [r3, #1]
					fsmTunningIDs[2] = SCH_AddTask(traffic1Red, 0, 1000);
 80006d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006d8:	2100      	movs	r1, #0
 80006da:	486d      	ldr	r0, [pc, #436]	@ (8000890 <fsmTunningProcessing+0x2f8>)
 80006dc:	f000 fe1a 	bl	8001314 <SCH_AddTask>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b5e      	ldr	r3, [pc, #376]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 80006e6:	709a      	strb	r2, [r3, #2]
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 80006e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006f0:	4860      	ldr	r0, [pc, #384]	@ (8000874 <fsmTunningProcessing+0x2dc>)
 80006f2:	f000 fe0f 	bl	8001314 <SCH_AddTask>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b59      	ldr	r3, [pc, #356]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 80006fc:	70da      	strb	r2, [r3, #3]
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 80006fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000702:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000706:	485c      	ldr	r0, [pc, #368]	@ (8000878 <fsmTunningProcessing+0x2e0>)
 8000708:	f000 fe04 	bl	8001314 <SCH_AddTask>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	4b53      	ldr	r3, [pc, #332]	@ (8000860 <fsmTunningProcessing+0x2c8>)
 8000712:	711a      	strb	r2, [r3, #4]
					fsmTunningState = TRAFFIC_RED;
 8000714:	4b53      	ldr	r3, [pc, #332]	@ (8000864 <fsmTunningProcessing+0x2cc>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
					break;
 800071a:	e000      	b.n	800071e <fsmTunningProcessing+0x186>
					break;
 800071c:	bf00      	nop
			}
		}

		if (buttonPressed(2)) {
 800071e:	2002      	movs	r0, #2
 8000720:	f7ff fd9e 	bl	8000260 <buttonPressed>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d050      	beq.n	80007cc <fsmTunningProcessing+0x234>
			switch (fsmTunningState) {
 800072a:	4b4e      	ldr	r3, [pc, #312]	@ (8000864 <fsmTunningProcessing+0x2cc>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d034      	beq.n	800079c <fsmTunningProcessing+0x204>
 8000732:	2b03      	cmp	r3, #3
 8000734:	dc49      	bgt.n	80007ca <fsmTunningProcessing+0x232>
 8000736:	2b01      	cmp	r3, #1
 8000738:	d002      	beq.n	8000740 <fsmTunningProcessing+0x1a8>
 800073a:	2b02      	cmp	r3, #2
 800073c:	d017      	beq.n	800076e <fsmTunningProcessing+0x1d6>
						trafficYellowDuration = TRAFFIC_DURATION_MAX;
					}
					SCH_AddTask(lcd_yellow_duration, 0, 0);
					break;
				default:
					break;
 800073e:	e044      	b.n	80007ca <fsmTunningProcessing+0x232>
					if (trafficRedDuration < TRAFFIC_DURATION_MAX - TRAFFIC_DURATION_AUTO) {
 8000740:	4b54      	ldr	r3, [pc, #336]	@ (8000894 <fsmTunningProcessing+0x2fc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f644 2237 	movw	r2, #18999	@ 0x4a37
 8000748:	4293      	cmp	r3, r2
 800074a:	d806      	bhi.n	800075a <fsmTunningProcessing+0x1c2>
						trafficRedDuration += TRAFFIC_DURATION_AUTO;
 800074c:	4b51      	ldr	r3, [pc, #324]	@ (8000894 <fsmTunningProcessing+0x2fc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000754:	4a4f      	ldr	r2, [pc, #316]	@ (8000894 <fsmTunningProcessing+0x2fc>)
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	e003      	b.n	8000762 <fsmTunningProcessing+0x1ca>
						trafficRedDuration = TRAFFIC_DURATION_MAX;
 800075a:	4b4e      	ldr	r3, [pc, #312]	@ (8000894 <fsmTunningProcessing+0x2fc>)
 800075c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000760:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_red_duration, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	4840      	ldr	r0, [pc, #256]	@ (8000868 <fsmTunningProcessing+0x2d0>)
 8000768:	f000 fdd4 	bl	8001314 <SCH_AddTask>
					break;
 800076c:	e02e      	b.n	80007cc <fsmTunningProcessing+0x234>
					if (trafficGreenDuration < TRAFFIC_DURATION_MAX - TRAFFIC_DURATION_AUTO) {
 800076e:	4b4a      	ldr	r3, [pc, #296]	@ (8000898 <fsmTunningProcessing+0x300>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f644 2237 	movw	r2, #18999	@ 0x4a37
 8000776:	4293      	cmp	r3, r2
 8000778:	d806      	bhi.n	8000788 <fsmTunningProcessing+0x1f0>
						trafficGreenDuration += TRAFFIC_DURATION_AUTO;
 800077a:	4b47      	ldr	r3, [pc, #284]	@ (8000898 <fsmTunningProcessing+0x300>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000782:	4a45      	ldr	r2, [pc, #276]	@ (8000898 <fsmTunningProcessing+0x300>)
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	e003      	b.n	8000790 <fsmTunningProcessing+0x1f8>
						trafficGreenDuration = TRAFFIC_DURATION_MAX;
 8000788:	4b43      	ldr	r3, [pc, #268]	@ (8000898 <fsmTunningProcessing+0x300>)
 800078a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800078e:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_green_duration, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	4839      	ldr	r0, [pc, #228]	@ (800087c <fsmTunningProcessing+0x2e4>)
 8000796:	f000 fdbd 	bl	8001314 <SCH_AddTask>
					break;
 800079a:	e017      	b.n	80007cc <fsmTunningProcessing+0x234>
					if (trafficYellowDuration < TRAFFIC_DURATION_MAX - TRAFFIC_DURATION_AUTO) {
 800079c:	4b3f      	ldr	r3, [pc, #252]	@ (800089c <fsmTunningProcessing+0x304>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f644 2237 	movw	r2, #18999	@ 0x4a37
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d806      	bhi.n	80007b6 <fsmTunningProcessing+0x21e>
						trafficYellowDuration += TRAFFIC_DURATION_AUTO;
 80007a8:	4b3c      	ldr	r3, [pc, #240]	@ (800089c <fsmTunningProcessing+0x304>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80007b0:	4a3a      	ldr	r2, [pc, #232]	@ (800089c <fsmTunningProcessing+0x304>)
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	e003      	b.n	80007be <fsmTunningProcessing+0x226>
						trafficYellowDuration = TRAFFIC_DURATION_MAX;
 80007b6:	4b39      	ldr	r3, [pc, #228]	@ (800089c <fsmTunningProcessing+0x304>)
 80007b8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80007bc:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_yellow_duration, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	4831      	ldr	r0, [pc, #196]	@ (8000888 <fsmTunningProcessing+0x2f0>)
 80007c4:	f000 fda6 	bl	8001314 <SCH_AddTask>
					break;
 80007c8:	e000      	b.n	80007cc <fsmTunningProcessing+0x234>
					break;
 80007ca:	bf00      	nop
			}
		}

		if (buttonPressed(3)) {
 80007cc:	2003      	movs	r0, #3
 80007ce:	f7ff fd47 	bl	8000260 <buttonPressed>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d06e      	beq.n	80008b6 <fsmTunningProcessing+0x31e>
			switch (fsmTunningState) {
 80007d8:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <fsmTunningProcessing+0x2cc>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d032      	beq.n	8000846 <fsmTunningProcessing+0x2ae>
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	dc67      	bgt.n	80008b4 <fsmTunningProcessing+0x31c>
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d002      	beq.n	80007ee <fsmTunningProcessing+0x256>
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d016      	beq.n	800081a <fsmTunningProcessing+0x282>
						trafficYellowDuration = TRAFFIC_DURATION_MIN;
					}
					SCH_AddTask(lcd_yellow_duration, 0, 0);
					break;
				default:
					break;
 80007ec:	e062      	b.n	80008b4 <fsmTunningProcessing+0x31c>
					if (trafficRedDuration > TRAFFIC_DURATION_MIN + TRAFFIC_DURATION_AUTO) {
 80007ee:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <fsmTunningProcessing+0x2fc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80007f6:	d906      	bls.n	8000806 <fsmTunningProcessing+0x26e>
						trafficRedDuration -= TRAFFIC_DURATION_AUTO;
 80007f8:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <fsmTunningProcessing+0x2fc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000800:	4a24      	ldr	r2, [pc, #144]	@ (8000894 <fsmTunningProcessing+0x2fc>)
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	e003      	b.n	800080e <fsmTunningProcessing+0x276>
						trafficRedDuration = TRAFFIC_DURATION_MIN;
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <fsmTunningProcessing+0x2fc>)
 8000808:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800080c:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_red_duration, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	4815      	ldr	r0, [pc, #84]	@ (8000868 <fsmTunningProcessing+0x2d0>)
 8000814:	f000 fd7e 	bl	8001314 <SCH_AddTask>
					break;
 8000818:	e04d      	b.n	80008b6 <fsmTunningProcessing+0x31e>
					if (trafficGreenDuration > TRAFFIC_DURATION_MIN + TRAFFIC_DURATION_AUTO) {
 800081a:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <fsmTunningProcessing+0x300>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000822:	d906      	bls.n	8000832 <fsmTunningProcessing+0x29a>
						trafficGreenDuration -= TRAFFIC_DURATION_AUTO;
 8000824:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <fsmTunningProcessing+0x300>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800082c:	4a1a      	ldr	r2, [pc, #104]	@ (8000898 <fsmTunningProcessing+0x300>)
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	e003      	b.n	800083a <fsmTunningProcessing+0x2a2>
						trafficGreenDuration = TRAFFIC_DURATION_MIN;
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <fsmTunningProcessing+0x300>)
 8000834:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000838:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_green_duration, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	480f      	ldr	r0, [pc, #60]	@ (800087c <fsmTunningProcessing+0x2e4>)
 8000840:	f000 fd68 	bl	8001314 <SCH_AddTask>
					break;
 8000844:	e037      	b.n	80008b6 <fsmTunningProcessing+0x31e>
					if (trafficYellowDuration > TRAFFIC_DURATION_MIN + TRAFFIC_DURATION_AUTO) {
 8000846:	4b15      	ldr	r3, [pc, #84]	@ (800089c <fsmTunningProcessing+0x304>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800084e:	d927      	bls.n	80008a0 <fsmTunningProcessing+0x308>
						trafficYellowDuration -= TRAFFIC_DURATION_AUTO;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <fsmTunningProcessing+0x304>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000858:	4a10      	ldr	r2, [pc, #64]	@ (800089c <fsmTunningProcessing+0x304>)
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	e024      	b.n	80008a8 <fsmTunningProcessing+0x310>
 800085e:	bf00      	nop
 8000860:	20000098 	.word	0x20000098
 8000864:	20000081 	.word	0x20000081
 8000868:	08000cbd 	.word	0x08000cbd
 800086c:	08001c2d 	.word	0x08001c2d
 8000870:	08001c6d 	.word	0x08001c6d
 8000874:	08001c0d 	.word	0x08001c0d
 8000878:	08001c4d 	.word	0x08001c4d
 800087c:	08000ce1 	.word	0x08000ce1
 8000880:	08001c3d 	.word	0x08001c3d
 8000884:	08001c7d 	.word	0x08001c7d
 8000888:	08000d05 	.word	0x08000d05
 800088c:	08001c1d 	.word	0x08001c1d
 8000890:	08001c5d 	.word	0x08001c5d
 8000894:	20000034 	.word	0x20000034
 8000898:	20000038 	.word	0x20000038
 800089c:	2000003c 	.word	0x2000003c
						trafficYellowDuration = TRAFFIC_DURATION_MIN;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <fsmTunningProcessing+0x324>)
 80008a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008a6:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_yellow_duration, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <fsmTunningProcessing+0x328>)
 80008ae:	f000 fd31 	bl	8001314 <SCH_AddTask>
					break;
 80008b2:	e000      	b.n	80008b6 <fsmTunningProcessing+0x31e>
					break;
 80008b4:	bf00      	nop
				}
		}
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000003c 	.word	0x2000003c
 80008c0:	08000d05 	.word	0x08000d05

080008c4 <fsmTunning>:

void fsmTunning(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	fsmTunningIDs[0] = SCH_AddTask(fsmTunningProcessing, 10, TIMER_TICK);
 80008c8:	220a      	movs	r2, #10
 80008ca:	210a      	movs	r1, #10
 80008cc:	481d      	ldr	r0, [pc, #116]	@ (8000944 <fsmTunning+0x80>)
 80008ce:	f000 fd21 	bl	8001314 <SCH_AddTask>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <fsmTunning+0x84>)
 80008d8:	701a      	strb	r2, [r3, #0]
	// Initialize for Tunning Mode
	fsmTunningState = TRAFFIC_RED;
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <fsmTunning+0x88>)
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
	SCH_AddTask(lcd_red_duration, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	481a      	ldr	r0, [pc, #104]	@ (8000950 <fsmTunning+0x8c>)
 80008e6:	f000 fd15 	bl	8001314 <SCH_AddTask>
	fsmTunningIDs[1] = SCH_AddTask(traffic0Red, 0, 1000);
 80008ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ee:	2100      	movs	r1, #0
 80008f0:	4818      	ldr	r0, [pc, #96]	@ (8000954 <fsmTunning+0x90>)
 80008f2:	f000 fd0f 	bl	8001314 <SCH_AddTask>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <fsmTunning+0x84>)
 80008fc:	705a      	strb	r2, [r3, #1]
	fsmTunningIDs[2] = SCH_AddTask(traffic1Red, 0, 1000);
 80008fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000902:	2100      	movs	r1, #0
 8000904:	4814      	ldr	r0, [pc, #80]	@ (8000958 <fsmTunning+0x94>)
 8000906:	f000 fd05 	bl	8001314 <SCH_AddTask>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <fsmTunning+0x84>)
 8000910:	709a      	strb	r2, [r3, #2]
	fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 8000912:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000916:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800091a:	4810      	ldr	r0, [pc, #64]	@ (800095c <fsmTunning+0x98>)
 800091c:	f000 fcfa 	bl	8001314 <SCH_AddTask>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <fsmTunning+0x84>)
 8000926:	70da      	strb	r2, [r3, #3]
	fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 8000928:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800092c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000930:	480b      	ldr	r0, [pc, #44]	@ (8000960 <fsmTunning+0x9c>)
 8000932:	f000 fcef 	bl	8001314 <SCH_AddTask>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <fsmTunning+0x84>)
 800093c:	711a      	strb	r2, [r3, #4]
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	08000599 	.word	0x08000599
 8000948:	20000098 	.word	0x20000098
 800094c:	20000081 	.word	0x20000081
 8000950:	08000cbd 	.word	0x08000cbd
 8000954:	08001c1d 	.word	0x08001c1d
 8000958:	08001c5d 	.word	0x08001c5d
 800095c:	08001c0d 	.word	0x08001c0d
 8000960:	08001c4d 	.word	0x08001c4d

08000964 <fsmInit>:

void fsmInit(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	fsmState = FSM_INIT;
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <fsmInit+0x20>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
	fsmIDs[0] = SCH_AddTask(testLED, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <fsmInit+0x24>)
 8000974:	f000 fcce 	bl	8001314 <SCH_AddTask>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <fsmInit+0x28>)
 800097e:	701a      	strb	r2, [r3, #0]
//	SCH_AddTask(testButton, 0, TIMER_TICK);
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000080 	.word	0x20000080
 8000988:	08001b01 	.word	0x08001b01
 800098c:	20000084 	.word	0x20000084

08000990 <fsmProcessing>:

void fsmProcessing(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	if (buttonPressed(0)) {
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff fc62 	bl	8000260 <buttonPressed>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 8097 	beq.w	8000ad2 <fsmProcessing+0x142>
		switch (fsmState) {
 80009a4:	4b4d      	ldr	r3, [pc, #308]	@ (8000adc <fsmProcessing+0x14c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	f200 808f 	bhi.w	8000acc <fsmProcessing+0x13c>
 80009ae:	a201      	add	r2, pc, #4	@ (adr r2, 80009b4 <fsmProcessing+0x24>)
 80009b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b4:	080009c5 	.word	0x080009c5
 80009b8:	080009f5 	.word	0x080009f5
 80009bc:	08000a2f 	.word	0x08000a2f
 80009c0:	08000a69 	.word	0x08000a69
			case FSM_INIT:
				for (uint8_t i = 0; i < FSM_TASK; i ++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	e008      	b.n	80009dc <fsmProcessing+0x4c>
					SCH_DeleteTask(fsmIDs[i]);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4a44      	ldr	r2, [pc, #272]	@ (8000ae0 <fsmProcessing+0x150>)
 80009ce:	5cd3      	ldrb	r3, [r2, r3]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fda5 	bl	8001520 <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_TASK; i ++) {
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3301      	adds	r3, #1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0f3      	beq.n	80009ca <fsmProcessing+0x3a>
				}
				SCH_AddTask(fsmAuto, 10, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	210a      	movs	r1, #10
 80009e6:	483f      	ldr	r0, [pc, #252]	@ (8000ae4 <fsmProcessing+0x154>)
 80009e8:	f000 fc94 	bl	8001314 <SCH_AddTask>
				fsmState = FSM_AUTO;
 80009ec:	4b3b      	ldr	r3, [pc, #236]	@ (8000adc <fsmProcessing+0x14c>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
				break;
 80009f2:	e06e      	b.n	8000ad2 <fsmProcessing+0x142>
			case FSM_AUTO:
				for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 80009f4:	2300      	movs	r3, #0
 80009f6:	71bb      	strb	r3, [r7, #6]
 80009f8:	e008      	b.n	8000a0c <fsmProcessing+0x7c>
					SCH_DeleteTask(fsmAutoIDs[i]);
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	4a3a      	ldr	r2, [pc, #232]	@ (8000ae8 <fsmProcessing+0x158>)
 80009fe:	5cd3      	ldrb	r3, [r2, r3]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fd8d 	bl	8001520 <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	71bb      	strb	r3, [r7, #6]
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	2b0a      	cmp	r3, #10
 8000a10:	d9f3      	bls.n	80009fa <fsmProcessing+0x6a>
				}
				SCH_AddTask(fsmAutoStop, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	4835      	ldr	r0, [pc, #212]	@ (8000aec <fsmProcessing+0x15c>)
 8000a18:	f000 fc7c 	bl	8001314 <SCH_AddTask>
				SCH_AddTask(fsmManual, 10, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	210a      	movs	r1, #10
 8000a20:	4833      	ldr	r0, [pc, #204]	@ (8000af0 <fsmProcessing+0x160>)
 8000a22:	f000 fc77 	bl	8001314 <SCH_AddTask>
				fsmState = FSM_MANUAL;
 8000a26:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <fsmProcessing+0x14c>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	701a      	strb	r2, [r3, #0]
				break;
 8000a2c:	e051      	b.n	8000ad2 <fsmProcessing+0x142>
			case FSM_MANUAL:
				for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	717b      	strb	r3, [r7, #5]
 8000a32:	e008      	b.n	8000a46 <fsmProcessing+0xb6>
					SCH_DeleteTask(fsmManualIDs[i]);
 8000a34:	797b      	ldrb	r3, [r7, #5]
 8000a36:	4a2f      	ldr	r2, [pc, #188]	@ (8000af4 <fsmProcessing+0x164>)
 8000a38:	5cd3      	ldrb	r3, [r2, r3]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fd70 	bl	8001520 <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000a40:	797b      	ldrb	r3, [r7, #5]
 8000a42:	3301      	adds	r3, #1
 8000a44:	717b      	strb	r3, [r7, #5]
 8000a46:	797b      	ldrb	r3, [r7, #5]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d9f3      	bls.n	8000a34 <fsmProcessing+0xa4>
				}
				SCH_AddTask(fsmManualStop, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4829      	ldr	r0, [pc, #164]	@ (8000af8 <fsmProcessing+0x168>)
 8000a52:	f000 fc5f 	bl	8001314 <SCH_AddTask>
				SCH_AddTask(fsmTunning, 10, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	210a      	movs	r1, #10
 8000a5a:	4828      	ldr	r0, [pc, #160]	@ (8000afc <fsmProcessing+0x16c>)
 8000a5c:	f000 fc5a 	bl	8001314 <SCH_AddTask>
				fsmState = FSM_TUNNING;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <fsmProcessing+0x14c>)
 8000a62:	2203      	movs	r2, #3
 8000a64:	701a      	strb	r2, [r3, #0]
				break;
 8000a66:	e034      	b.n	8000ad2 <fsmProcessing+0x142>
			case FSM_TUNNING:
				for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000a68:	2300      	movs	r3, #0
 8000a6a:	713b      	strb	r3, [r7, #4]
 8000a6c:	e008      	b.n	8000a80 <fsmProcessing+0xf0>
					SCH_DeleteTask(fsmTunningIDs[i]);
 8000a6e:	793b      	ldrb	r3, [r7, #4]
 8000a70:	4a23      	ldr	r2, [pc, #140]	@ (8000b00 <fsmProcessing+0x170>)
 8000a72:	5cd3      	ldrb	r3, [r2, r3]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fd53 	bl	8001520 <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000a7a:	793b      	ldrb	r3, [r7, #4]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	713b      	strb	r3, [r7, #4]
 8000a80:	793b      	ldrb	r3, [r7, #4]
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d9f3      	bls.n	8000a6e <fsmProcessing+0xde>
				}
				SCH_AddTask(fsmTunningStop, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	481e      	ldr	r0, [pc, #120]	@ (8000b04 <fsmProcessing+0x174>)
 8000a8c:	f000 fc42 	bl	8001314 <SCH_AddTask>
				SCH_AddTask(fsmAuto, 10, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	210a      	movs	r1, #10
 8000a94:	4813      	ldr	r0, [pc, #76]	@ (8000ae4 <fsmProcessing+0x154>)
 8000a96:	f000 fc3d 	bl	8001314 <SCH_AddTask>
				fsmState = FSM_AUTO;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <fsmProcessing+0x14c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]

				// If the time between red, green, light isn't correct
				if (trafficRedDuration != (trafficGreenDuration + trafficYellowDuration)) {
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <fsmProcessing+0x178>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <fsmProcessing+0x17c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <fsmProcessing+0x180>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d00e      	beq.n	8000ad0 <fsmProcessing+0x140>
					// Set it to default
					trafficRedDuration = 5000;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <fsmProcessing+0x180>)
 8000ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ab8:	601a      	str	r2, [r3, #0]
					trafficGreenDuration = 3000;
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <fsmProcessing+0x178>)
 8000abc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000ac0:	601a      	str	r2, [r3, #0]
					trafficYellowDuration = 2000;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <fsmProcessing+0x17c>)
 8000ac4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000ac8:	601a      	str	r2, [r3, #0]
				}
				break;
 8000aca:	e001      	b.n	8000ad0 <fsmProcessing+0x140>
			default:
				break;
 8000acc:	bf00      	nop
 8000ace:	e000      	b.n	8000ad2 <fsmProcessing+0x142>
				break;
 8000ad0:	bf00      	nop
		}
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000080 	.word	0x20000080
 8000ae0:	20000084 	.word	0x20000084
 8000ae4:	08000321 	.word	0x08000321
 8000ae8:	20000088 	.word	0x20000088
 8000aec:	080002fd 	.word	0x080002fd
 8000af0:	0800054d 	.word	0x0800054d
 8000af4:	20000094 	.word	0x20000094
 8000af8:	08000475 	.word	0x08000475
 8000afc:	080008c5 	.word	0x080008c5
 8000b00:	20000098 	.word	0x20000098
 8000b04:	0800058d 	.word	0x0800058d
 8000b08:	20000038 	.word	0x20000038
 8000b0c:	2000003c 	.word	0x2000003c
 8000b10:	20000034 	.word	0x20000034

08000b14 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f023 030f 	bic.w	r3, r3, #15
 8000b24:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	f043 030c 	orr.w	r3, r3, #12
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b40:	7bbb      	ldrb	r3, [r7, #14]
 8000b42:	f043 030c 	orr.w	r3, r3, #12
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b54:	f107 0208 	add.w	r2, r7, #8
 8000b58:	2364      	movs	r3, #100	@ 0x64
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	2142      	movs	r1, #66	@ 0x42
 8000b60:	4803      	ldr	r0, [pc, #12]	@ (8000b70 <lcd_send_cmd+0x5c>)
 8000b62:	f001 fd7f 	bl	8002664 <HAL_I2C_Master_Transmit>
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000a0 	.word	0x200000a0

08000b74 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f023 030f 	bic.w	r3, r3, #15
 8000b84:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	f043 030d 	orr.w	r3, r3, #13
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	f043 0309 	orr.w	r3, r3, #9
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ba0:	7bbb      	ldrb	r3, [r7, #14]
 8000ba2:	f043 030d 	orr.w	r3, r3, #13
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	f043 0309 	orr.w	r3, r3, #9
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bb4:	f107 0208 	add.w	r2, r7, #8
 8000bb8:	2364      	movs	r3, #100	@ 0x64
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	2142      	movs	r1, #66	@ 0x42
 8000bc0:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <lcd_send_data+0x5c>)
 8000bc2:	f001 fd4f 	bl	8002664 <HAL_I2C_Master_Transmit>
}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000a0 	.word	0x200000a0

08000bd4 <lcd_init>:

void lcd_init (void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000bd8:	2033      	movs	r0, #51	@ 0x33
 8000bda:	f7ff ff9b 	bl	8000b14 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000bde:	2032      	movs	r0, #50	@ 0x32
 8000be0:	f7ff ff98 	bl	8000b14 <lcd_send_cmd>
	HAL_Delay(50);
 8000be4:	2032      	movs	r0, #50	@ 0x32
 8000be6:	f001 f8d9 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000bea:	2028      	movs	r0, #40	@ 0x28
 8000bec:	f7ff ff92 	bl	8000b14 <lcd_send_cmd>
	HAL_Delay(50);
 8000bf0:	2032      	movs	r0, #50	@ 0x32
 8000bf2:	f001 f8d3 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff ff8c 	bl	8000b14 <lcd_send_cmd>
	HAL_Delay(50);
 8000bfc:	2032      	movs	r0, #50	@ 0x32
 8000bfe:	f001 f8cd 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000c02:	2006      	movs	r0, #6
 8000c04:	f7ff ff86 	bl	8000b14 <lcd_send_cmd>
	HAL_Delay(50);
 8000c08:	2032      	movs	r0, #50	@ 0x32
 8000c0a:	f001 f8c7 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000c0e:	200c      	movs	r0, #12
 8000c10:	f7ff ff80 	bl	8000b14 <lcd_send_cmd>
	HAL_Delay(50);
 8000c14:	2032      	movs	r0, #50	@ 0x32
 8000c16:	f001 f8c1 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f7ff ff7a 	bl	8000b14 <lcd_send_cmd>
	HAL_Delay(50);
 8000c20:	2032      	movs	r0, #50	@ 0x32
 8000c22:	f001 f8bb 	bl	8001d9c <HAL_Delay>
	lcd_send_cmd (0x80);
 8000c26:	2080      	movs	r0, #128	@ 0x80
 8000c28:	f7ff ff74 	bl	8000b14 <lcd_send_cmd>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <lcd_clear_display>:
{
	while (*str) lcd_send_data (*str++);
}

void lcd_clear_display (void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff ff6d 	bl	8000b14 <lcd_send_cmd>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b084      	sub	sp, #16
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d108      	bne.n	8000c60 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4413      	add	r3, r2
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	337f      	adds	r3, #127	@ 0x7f
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e008      	b.n	8000c72 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	3340      	adds	r3, #64	@ 0x40
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff4d 	bl	8000b14 <lcd_send_cmd>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <lcd_counter>:

void lcd_counter()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	lcd_clear_display();
 8000c88:	f7ff ffd2 	bl	8000c30 <lcd_clear_display>
	// Display traffic0
	lcd_goto_XY(0, 0);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff ffd5 	bl	8000c3e <lcd_goto_XY>
	lcd_send_data(trafficCounters[0]);
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <lcd_counter+0x34>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff6a 	bl	8000b74 <lcd_send_data>
	// Display traffic1
	lcd_goto_XY(1, 0);
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff ffcb 	bl	8000c3e <lcd_goto_XY>
	lcd_send_data(trafficCounters[1]);
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <lcd_counter+0x34>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff60 	bl	8000b74 <lcd_send_data>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000318 	.word	0x20000318

08000cbc <lcd_red_duration>:

void lcd_red_duration()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	lcd_clear_display();
 8000cc0:	f7ff ffb6 	bl	8000c30 <lcd_clear_display>
	lcd_goto_XY(0, 0);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff ffb9 	bl	8000c3e <lcd_goto_XY>
	lcd_send_data(trafficRedDuration);
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <lcd_red_duration+0x20>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff4e 	bl	8000b74 <lcd_send_data>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000034 	.word	0x20000034

08000ce0 <lcd_green_duration>:

void lcd_green_duration()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	lcd_clear_display();
 8000ce4:	f7ff ffa4 	bl	8000c30 <lcd_clear_display>
	lcd_goto_XY(0, 0);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ffa7 	bl	8000c3e <lcd_goto_XY>
	lcd_send_data(trafficGreenDuration);
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <lcd_green_duration+0x20>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff3c 	bl	8000b74 <lcd_send_data>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000038 	.word	0x20000038

08000d04 <lcd_yellow_duration>:

void lcd_yellow_duration()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	lcd_clear_display();
 8000d08:	f7ff ff92 	bl	8000c30 <lcd_clear_display>
	lcd_goto_XY(0, 0);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff ff95 	bl	8000c3e <lcd_goto_XY>
	lcd_send_data(trafficYellowDuration);
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <lcd_yellow_duration+0x20>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff2a 	bl	8000b74 <lcd_send_data>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000003c 	.word	0x2000003c

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2c:	f000 ffd4 	bl	8001cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d30:	f000 f832 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d34:	f000 f916 	bl	8000f64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d38:	f000 f8ea 	bl	8000f10 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d3c:	f000 f89c 	bl	8000e78 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d40:	f000 f86c 	bl	8000e1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d44:	480f      	ldr	r0, [pc, #60]	@ (8000d84 <main+0x5c>)
 8000d46:	f002 fc45 	bl	80035d4 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000d4a:	f000 fa59 	bl	8001200 <SCH_Init>
  lcd_init();
 8000d4e:	f7ff ff41 	bl	8000bd4 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(testMCU, 0, 500);
 8000d52:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d56:	2100      	movs	r1, #0
 8000d58:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <main+0x60>)
 8000d5a:	f000 fadb 	bl	8001314 <SCH_AddTask>
  SCH_AddTask(buttonReading, 0, TIMER_TICK);
 8000d5e:	220a      	movs	r2, #10
 8000d60:	2100      	movs	r1, #0
 8000d62:	480a      	ldr	r0, [pc, #40]	@ (8000d8c <main+0x64>)
 8000d64:	f000 fad6 	bl	8001314 <SCH_AddTask>
  SCH_AddTask(fsmInit, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4808      	ldr	r0, [pc, #32]	@ (8000d90 <main+0x68>)
 8000d6e:	f000 fad1 	bl	8001314 <SCH_AddTask>
  SCH_AddTask(fsmProcessing, 10, TIMER_TICK);
 8000d72:	220a      	movs	r2, #10
 8000d74:	210a      	movs	r1, #10
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <main+0x6c>)
 8000d78:	f000 facc 	bl	8001314 <SCH_AddTask>
  while (1)
  {
	  SCH_Dispatch();
 8000d7c:	f000 fab0 	bl	80012e0 <SCH_Dispatch>
 8000d80:	e7fc      	b.n	8000d7c <main+0x54>
 8000d82:	bf00      	nop
 8000d84:	200000f4 	.word	0x200000f4
 8000d88:	08001aed 	.word	0x08001aed
 8000d8c:	0800014d 	.word	0x0800014d
 8000d90:	08000965 	.word	0x08000965
 8000d94:	08000991 	.word	0x08000991

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b090      	sub	sp, #64	@ 0x40
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	2228      	movs	r2, #40	@ 0x28
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 f894 	bl	8003ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dce:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd4:	f107 0318 	add.w	r3, r7, #24
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 ff9b 	bl	8002d14 <HAL_RCC_OscConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000de4:	f000 f95d 	bl	80010a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de8:	230f      	movs	r3, #15
 8000dea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dec:	2302      	movs	r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2102      	movs	r1, #2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 fa08 	bl	8003218 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e0e:	f000 f948 	bl	80010a2 <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3740      	adds	r7, #64	@ 0x40
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <MX_I2C1_Init+0x50>)
 8000e22:	4a13      	ldr	r2, [pc, #76]	@ (8000e70 <MX_I2C1_Init+0x54>)
 8000e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <MX_I2C1_Init+0x50>)
 8000e28:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <MX_I2C1_Init+0x58>)
 8000e2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <MX_I2C1_Init+0x50>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <MX_I2C1_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <MX_I2C1_Init+0x50>)
 8000e3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <MX_I2C1_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <MX_I2C1_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <MX_I2C1_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <MX_I2C1_Init+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	@ (8000e6c <MX_I2C1_Init+0x50>)
 8000e5a:	f001 fabf 	bl	80023dc <HAL_I2C_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e64:	f000 f91d 	bl	80010a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000a0 	.word	0x200000a0
 8000e70:	40005400 	.word	0x40005400
 8000e74:	000186a0 	.word	0x000186a0

08000e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <MX_TIM2_Init+0x94>)
 8000e96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <MX_TIM2_Init+0x94>)
 8000e9e:	2209      	movs	r2, #9
 8000ea0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <MX_TIM2_Init+0x94>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <MX_TIM2_Init+0x94>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <MX_TIM2_Init+0x94>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <MX_TIM2_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ebc:	4813      	ldr	r0, [pc, #76]	@ (8000f0c <MX_TIM2_Init+0x94>)
 8000ebe:	f002 fb39 	bl	8003534 <HAL_TIM_Base_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ec8:	f000 f8eb 	bl	80010a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480c      	ldr	r0, [pc, #48]	@ (8000f0c <MX_TIM2_Init+0x94>)
 8000eda:	f002 fcbd 	bl	8003858 <HAL_TIM_ConfigClockSource>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ee4:	f000 f8dd 	bl	80010a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_TIM2_Init+0x94>)
 8000ef6:	f002 fe9f 	bl	8003c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f00:	f000 f8cf 	bl	80010a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000f4 	.word	0x200000f4

08000f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <MX_USART2_UART_Init+0x50>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <MX_USART2_UART_Init+0x4c>)
 8000f48:	f002 fee6 	bl	8003d18 <HAL_UART_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f52:	f000 f8a6 	bl	80010a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000013c 	.word	0x2000013c
 8000f60:	40004400 	.word	0x40004400

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	4b3e      	ldr	r3, [pc, #248]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a3d      	ldr	r2, [pc, #244]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f90:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a37      	ldr	r2, [pc, #220]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000f96:	f043 0320 	orr.w	r3, r3, #32
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b35      	ldr	r3, [pc, #212]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0320 	and.w	r3, r3, #32
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b32      	ldr	r3, [pc, #200]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a31      	ldr	r2, [pc, #196]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <MX_GPIO_Init+0x110>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2120      	movs	r1, #32
 8000fdc:	4826      	ldr	r0, [pc, #152]	@ (8001078 <MX_GPIO_Init+0x114>)
 8000fde:	f001 f9aa 	bl	8002336 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CONTROL_TRAFFIC0_0_Pin|CONTROL_TRAFFIC0_1_Pin|CONTROL_TRAFFIC1_0_Pin|CONTROL_TRAFFIC1_1_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000fe8:	4824      	ldr	r0, [pc, #144]	@ (800107c <MX_GPIO_Init+0x118>)
 8000fea:	f001 f9a4 	bl	8002336 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <MX_GPIO_Init+0x11c>)
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	481e      	ldr	r0, [pc, #120]	@ (800107c <MX_GPIO_Init+0x118>)
 8001004:	f000 fffc 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001008:	2320      	movs	r3, #32
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2302      	movs	r3, #2
 8001016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	4816      	ldr	r0, [pc, #88]	@ (8001078 <MX_GPIO_Init+0x114>)
 8001020:	f000 ffee 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONTROL_TRAFFIC0_0_Pin CONTROL_TRAFFIC0_1_Pin CONTROL_TRAFFIC1_0_Pin CONTROL_TRAFFIC1_1_Pin */
  GPIO_InitStruct.Pin = CONTROL_TRAFFIC0_0_Pin|CONTROL_TRAFFIC0_1_Pin|CONTROL_TRAFFIC1_0_Pin|CONTROL_TRAFFIC1_1_Pin;
 8001024:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2302      	movs	r3, #2
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4619      	mov	r1, r3
 800103c:	480f      	ldr	r0, [pc, #60]	@ (800107c <MX_GPIO_Init+0x118>)
 800103e:	f000 ffdf 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001042:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	4808      	ldr	r0, [pc, #32]	@ (8001078 <MX_GPIO_Init+0x114>)
 8001058:	f000 ffd2 	bl	8002000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	2028      	movs	r0, #40	@ 0x28
 8001062:	f000 ff96 	bl	8001f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001066:	2028      	movs	r0, #40	@ 0x28
 8001068:	f000 ffaf 	bl	8001fca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800
 800107c:	40011000 	.word	0x40011000
 8001080:	10110000 	.word	0x10110000

08001084 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001094:	d101      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8001096:	f000 f8fd 	bl	8001294 <SCH_Update>
	}
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a6:	b672      	cpsid	i
}
 80010a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010aa:	bf00      	nop
 80010ac:	e7fd      	b.n	80010aa <Error_Handler+0x8>
	...

080010b0 <turnOffLed>:
static uint16_t controlTraffic0Pins[TRAFFIC_NUMBER] = {CONTROL_TRAFFIC0_0_Pin, CONTROL_TRAFFIC1_0_Pin};

static GPIO_TypeDef* controlTraffic1Ports[TRAFFIC_NUMBER] = {CONTROL_TRAFFIC0_1_GPIO_Port, CONTROL_TRAFFIC1_1_GPIO_Port};
static uint16_t controlTraffic1Pins[TRAFFIC_NUMBER] = {CONTROL_TRAFFIC0_1_Pin, CONTROL_TRAFFIC1_1_Pin};

void turnOffLed(uint8_t index) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_RESET);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <turnOffLed+0x44>)
 80010be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <turnOffLed+0x48>)
 80010c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	f001 f932 	bl	8002336 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_RESET);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4a09      	ldr	r2, [pc, #36]	@ (80010fc <turnOffLed+0x4c>)
 80010d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	4a08      	ldr	r2, [pc, #32]	@ (8001100 <turnOffLed+0x50>)
 80010de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	f001 f926 	bl	8002336 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000018 	.word	0x20000018
 80010f8:	20000020 	.word	0x20000020
 80010fc:	20000024 	.word	0x20000024
 8001100:	2000002c 	.word	0x2000002c

08001104 <turnOnRed>:
void turnOnRed(uint8_t index) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_SET);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <turnOnRed+0x44>)
 8001112:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4a0c      	ldr	r2, [pc, #48]	@ (800114c <turnOnRed+0x48>)
 800111a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	f001 f908 	bl	8002336 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_SET);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <turnOnRed+0x4c>)
 800112a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <turnOnRed+0x50>)
 8001132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	f001 f8fc 	bl	8002336 <HAL_GPIO_WritePin>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000018 	.word	0x20000018
 800114c:	20000020 	.word	0x20000020
 8001150:	20000024 	.word	0x20000024
 8001154:	2000002c 	.word	0x2000002c

08001158 <turnOnGreen>:
void turnOnGreen(uint8_t index) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_SET);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <turnOnGreen+0x44>)
 8001166:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4a0c      	ldr	r2, [pc, #48]	@ (80011a0 <turnOnGreen+0x48>)
 800116e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001172:	2201      	movs	r2, #1
 8001174:	4619      	mov	r1, r3
 8001176:	f001 f8de 	bl	8002336 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_RESET);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4a09      	ldr	r2, [pc, #36]	@ (80011a4 <turnOnGreen+0x4c>)
 800117e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <turnOnGreen+0x50>)
 8001186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	f001 f8d2 	bl	8002336 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000018 	.word	0x20000018
 80011a0:	20000020 	.word	0x20000020
 80011a4:	20000024 	.word	0x20000024
 80011a8:	2000002c 	.word	0x2000002c

080011ac <turnOnYellow>:
void turnOnYellow(uint8_t index) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_RESET);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <turnOnYellow+0x44>)
 80011ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4a0c      	ldr	r2, [pc, #48]	@ (80011f4 <turnOnYellow+0x48>)
 80011c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	f001 f8b4 	bl	8002336 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_SET);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <turnOnYellow+0x4c>)
 80011d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <turnOnYellow+0x50>)
 80011da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011de:	2201      	movs	r2, #1
 80011e0:	4619      	mov	r1, r3
 80011e2:	f001 f8a8 	bl	8002336 <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000018 	.word	0x20000018
 80011f4:	20000020 	.word	0x20000020
 80011f8:	20000024 	.word	0x20000024
 80011fc:	2000002c 	.word	0x2000002c

08001200 <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	e037      	b.n	800127c <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	4920      	ldr	r1, [pc, #128]	@ (8001290 <SCH_Init+0x90>)
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i;
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f1c3 0314 	rsb	r3, r3, #20
 8001226:	b2d8      	uxtb	r0, r3
 8001228:	4919      	ldr	r1, [pc, #100]	@ (8001290 <SCH_Init+0x90>)
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	3304      	adds	r3, #4
 8001236:	4602      	mov	r2, r0
 8001238:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	4914      	ldr	r1, [pc, #80]	@ (8001290 <SCH_Init+0x90>)
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3308      	adds	r3, #8
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	490f      	ldr	r1, [pc, #60]	@ (8001290 <SCH_Init+0x90>)
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	330c      	adds	r3, #12
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 8001262:	79fa      	ldrb	r2, [r7, #7]
 8001264:	490a      	ldr	r1, [pc, #40]	@ (8001290 <SCH_Init+0x90>)
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	440b      	add	r3, r1
 8001270:	3310      	adds	r3, #16
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	3301      	adds	r3, #1
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b13      	cmp	r3, #19
 8001280:	d9c4      	bls.n	800120c <SCH_Init+0xc>
    }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000184 	.word	0x20000184

08001294 <SCH_Update>:

void SCH_Update(void) {
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <SCH_Update+0x48>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d018      	beq.n	80012d2 <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 80012a0:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <SCH_Update+0x48>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00c      	beq.n	80012c2 <SCH_Update+0x2e>
		if (tasks[0].delay > TIMER_TICK) {
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <SCH_Update+0x48>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	d905      	bls.n	80012bc <SCH_Update+0x28>
			tasks[0].delay -= TIMER_TICK;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <SCH_Update+0x48>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	3b0a      	subs	r3, #10
 80012b6:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <SCH_Update+0x48>)
 80012b8:	6093      	str	r3, [r2, #8]
 80012ba:	e002      	b.n	80012c2 <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <SCH_Update+0x48>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <SCH_Update+0x48>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d104      	bne.n	80012d4 <SCH_Update+0x40>
		tasks[0].flag = 1;
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SCH_Update+0x48>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	741a      	strb	r2, [r3, #16]
 80012d0:	e000      	b.n	80012d4 <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 80012d2:	bf00      	nop
	}
}
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000184 	.word	0x20000184

080012e0 <SCH_Dispatch>:

void SCH_Dispatch(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <SCH_Dispatch+0x30>)
 80012e6:	7c1b      	ldrb	r3, [r3, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00f      	beq.n	800130c <SCH_Dispatch+0x2c>
    (*tasks[0].functionPointer)();
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <SCH_Dispatch+0x30>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4798      	blx	r3
    if (tasks[0].period > 0) {
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <SCH_Dispatch+0x30>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <SCH_Dispatch+0x20>
        SCH_RefreshTask();
 80012fa:	f000 f9af 	bl	800165c <SCH_RefreshTask>
 80012fe:	e006      	b.n	800130e <SCH_Dispatch+0x2e>
    }
    else {
        SCH_DeleteTask(tasks[0].id);
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <SCH_Dispatch+0x30>)
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f90b 	bl	8001520 <SCH_DeleteTask>
 800130a:	e000      	b.n	800130e <SCH_Dispatch+0x2e>
    if (tasks[0].flag == 0) return;
 800130c:	bf00      	nop
    }
}
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000184 	.word	0x20000184

08001314 <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 8001314:	b4b0      	push	{r4, r5, r7}
 8001316:	b089      	sub	sp, #36	@ 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return 0;
 8001320:	4b7e      	ldr	r3, [pc, #504]	@ (800151c <SCH_AddTask+0x208>)
 8001322:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SCH_AddTask+0x1a>
 800132a:	2300      	movs	r3, #0
 800132c:	e0f1      	b.n	8001512 <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 800132e:	4b7b      	ldr	r3, [pc, #492]	@ (800151c <SCH_AddTask+0x208>)
 8001330:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8001334:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800133a:	2300      	movs	r3, #0
 800133c:	76fb      	strb	r3, [r7, #27]
 800133e:	e0e3      	b.n	8001508 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 8001340:	7efa      	ldrb	r2, [r7, #27]
 8001342:	4976      	ldr	r1, [pc, #472]	@ (800151c <SCH_AddTask+0x208>)
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	3308      	adds	r3, #8
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	4413      	add	r3, r2
 8001356:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	429a      	cmp	r2, r3
 800135e:	d80a      	bhi.n	8001376 <SCH_AddTask+0x62>
 8001360:	7efa      	ldrb	r2, [r7, #27]
 8001362:	496e      	ldr	r1, [pc, #440]	@ (800151c <SCH_AddTask+0x208>)
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 80c6 	bne.w	8001502 <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8001376:	2313      	movs	r3, #19
 8001378:	76bb      	strb	r3, [r7, #26]
 800137a:	e017      	b.n	80013ac <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 800137c:	7ebb      	ldrb	r3, [r7, #26]
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	7eb9      	ldrb	r1, [r7, #26]
 8001382:	4866      	ldr	r0, [pc, #408]	@ (800151c <SCH_AddTask+0x208>)
 8001384:	460b      	mov	r3, r1
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4418      	add	r0, r3
 800138e:	4963      	ldr	r1, [pc, #396]	@ (800151c <SCH_AddTask+0x208>)
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	4604      	mov	r4, r0
 800139c:	461d      	mov	r5, r3
 800139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a2:	682b      	ldr	r3, [r5, #0]
 80013a4:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 80013a6:	7ebb      	ldrb	r3, [r7, #26]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	76bb      	strb	r3, [r7, #26]
 80013ac:	7eba      	ldrb	r2, [r7, #26]
 80013ae:	7efb      	ldrb	r3, [r7, #27]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8e3      	bhi.n	800137c <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 80013b4:	7efa      	ldrb	r2, [r7, #27]
 80013b6:	4959      	ldr	r1, [pc, #356]	@ (800151c <SCH_AddTask+0x208>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 80013c6:	7efa      	ldrb	r2, [r7, #27]
 80013c8:	4954      	ldr	r1, [pc, #336]	@ (800151c <SCH_AddTask+0x208>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	3304      	adds	r3, #4
 80013d6:	7e7a      	ldrb	r2, [r7, #25]
 80013d8:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 80013da:	7efa      	ldrb	r2, [r7, #27]
 80013dc:	494f      	ldr	r1, [pc, #316]	@ (800151c <SCH_AddTask+0x208>)
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	330c      	adds	r3, #12
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 80013ee:	7efa      	ldrb	r2, [r7, #27]
 80013f0:	494a      	ldr	r1, [pc, #296]	@ (800151c <SCH_AddTask+0x208>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3310      	adds	r3, #16
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	429a      	cmp	r2, r3
 8001408:	d950      	bls.n	80014ac <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 8001412:	7efb      	ldrb	r3, [r7, #27]
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	4941      	ldr	r1, [pc, #260]	@ (800151c <SCH_AddTask+0x208>)
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	3308      	adds	r3, #8
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	7efa      	ldrb	r2, [r7, #27]
 800142a:	1ac9      	subs	r1, r1, r3
 800142c:	483b      	ldr	r0, [pc, #236]	@ (800151c <SCH_AddTask+0x208>)
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4403      	add	r3, r0
 8001438:	3308      	adds	r3, #8
 800143a:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 800143c:	7efa      	ldrb	r2, [r7, #27]
 800143e:	4937      	ldr	r1, [pc, #220]	@ (800151c <SCH_AddTask+0x208>)
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	3308      	adds	r3, #8
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 8001452:	7efa      	ldrb	r2, [r7, #27]
 8001454:	4931      	ldr	r1, [pc, #196]	@ (800151c <SCH_AddTask+0x208>)
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3310      	adds	r3, #16
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8001466:	7efb      	ldrb	r3, [r7, #27]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	6979      	ldr	r1, [r7, #20]
 800146c:	482b      	ldr	r0, [pc, #172]	@ (800151c <SCH_AddTask+0x208>)
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4403      	add	r3, r0
 8001478:	3308      	adds	r3, #8
 800147a:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 800147c:	7efb      	ldrb	r3, [r7, #27]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	4926      	ldr	r1, [pc, #152]	@ (800151c <SCH_AddTask+0x208>)
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	3308      	adds	r3, #8
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d12c      	bne.n	80014ee <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 8001494:	7efb      	ldrb	r3, [r7, #27]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	4920      	ldr	r1, [pc, #128]	@ (800151c <SCH_AddTask+0x208>)
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	3310      	adds	r3, #16
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e020      	b.n	80014ee <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 80014ac:	7efa      	ldrb	r2, [r7, #27]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	1ac9      	subs	r1, r1, r3
 80014b4:	4819      	ldr	r0, [pc, #100]	@ (800151c <SCH_AddTask+0x208>)
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4403      	add	r3, r0
 80014c0:	3308      	adds	r3, #8
 80014c2:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 80014c4:	7efa      	ldrb	r2, [r7, #27]
 80014c6:	4915      	ldr	r1, [pc, #84]	@ (800151c <SCH_AddTask+0x208>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3308      	adds	r3, #8
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 80014da:	7efa      	ldrb	r2, [r7, #27]
 80014dc:	490f      	ldr	r1, [pc, #60]	@ (800151c <SCH_AddTask+0x208>)
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	3310      	adds	r3, #16
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 80014ee:	7efa      	ldrb	r2, [r7, #27]
 80014f0:	490a      	ldr	r1, [pc, #40]	@ (800151c <SCH_AddTask+0x208>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	3304      	adds	r3, #4
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	e007      	b.n	8001512 <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001502:	7efb      	ldrb	r3, [r7, #27]
 8001504:	3301      	adds	r3, #1
 8001506:	76fb      	strb	r3, [r7, #27]
 8001508:	7efb      	ldrb	r3, [r7, #27]
 800150a:	2b13      	cmp	r3, #19
 800150c:	f67f af18 	bls.w	8001340 <SCH_AddTask+0x2c>
        }
    }
    return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	@ 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	bcb0      	pop	{r4, r5, r7}
 800151a:	4770      	bx	lr
 800151c:	20000184 	.word	0x20000184

08001520 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 8001520:	b4b0      	push	{r4, r5, r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e088      	b.n	8001642 <SCH_DeleteTask+0x122>
    	if (tasks[i].functionPointer == 0) return 0;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	4949      	ldr	r1, [pc, #292]	@ (8001658 <SCH_DeleteTask+0x138>)
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <SCH_DeleteTask+0x28>
 8001544:	2300      	movs	r3, #0
 8001546:	e081      	b.n	800164c <SCH_DeleteTask+0x12c>
        if (tasks[i].id == id) {
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	4943      	ldr	r1, [pc, #268]	@ (8001658 <SCH_DeleteTask+0x138>)
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3304      	adds	r3, #4
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	429a      	cmp	r2, r3
 800155e:	d16d      	bne.n	800163c <SCH_DeleteTask+0x11c>
            uint8_t currentID = tasks[i].id;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	493d      	ldr	r1, [pc, #244]	@ (8001658 <SCH_DeleteTask+0x138>)
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3304      	adds	r3, #4
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	4937      	ldr	r1, [pc, #220]	@ (8001658 <SCH_DeleteTask+0x138>)
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01d      	beq.n	80015c6 <SCH_DeleteTask+0xa6>
                tasks[i + 1].delay += tasks[i].delay;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	4932      	ldr	r1, [pc, #200]	@ (8001658 <SCH_DeleteTask+0x138>)
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3308      	adds	r3, #8
 800159c:	6819      	ldr	r1, [r3, #0]
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	482d      	ldr	r0, [pc, #180]	@ (8001658 <SCH_DeleteTask+0x138>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4403      	add	r3, r0
 80015ac:	3308      	adds	r3, #8
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	3201      	adds	r2, #1
 80015b4:	4419      	add	r1, r3
 80015b6:	4828      	ldr	r0, [pc, #160]	@ (8001658 <SCH_DeleteTask+0x138>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	3308      	adds	r3, #8
 80015c4:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	73bb      	strb	r3, [r7, #14]
 80015ca:	e017      	b.n	80015fc <SCH_DeleteTask+0xdc>
                tasks[j] = tasks[j + 1];
 80015cc:	7bbb      	ldrb	r3, [r7, #14]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	7bb9      	ldrb	r1, [r7, #14]
 80015d2:	4821      	ldr	r0, [pc, #132]	@ (8001658 <SCH_DeleteTask+0x138>)
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4418      	add	r0, r3
 80015de:	491e      	ldr	r1, [pc, #120]	@ (8001658 <SCH_DeleteTask+0x138>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	4604      	mov	r4, r0
 80015ec:	461d      	mov	r5, r3
 80015ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80015f6:	7bbb      	ldrb	r3, [r7, #14]
 80015f8:	3301      	adds	r3, #1
 80015fa:	73bb      	strb	r3, [r7, #14]
 80015fc:	7bbb      	ldrb	r3, [r7, #14]
 80015fe:	2b12      	cmp	r3, #18
 8001600:	d9e4      	bls.n	80015cc <SCH_DeleteTask+0xac>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <SCH_DeleteTask+0x138>)
 8001604:	2200      	movs	r2, #0
 8001606:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 800160a:	4a13      	ldr	r2, [pc, #76]	@ (8001658 <SCH_DeleteTask+0x138>)
 800160c:	7b7b      	ldrb	r3, [r7, #13]
 800160e:	f882 3180 	strb.w	r3, [r2, #384]	@ 0x180
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <SCH_DeleteTask+0x138>)
 8001614:	2200      	movs	r2, #0
 8001616:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            tasks[SCH_TASKNUMBER - 1].period = 0;
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <SCH_DeleteTask+0x138>)
 800161c:	2200      	movs	r2, #0
 800161e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <SCH_DeleteTask+0x138>)
 8001624:	2200      	movs	r2, #0
 8001626:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <SCH_DeleteTask+0x138>)
 800162c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf0c      	ite	eq
 8001634:	2301      	moveq	r3, #1
 8001636:	2300      	movne	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	e007      	b.n	800164c <SCH_DeleteTask+0x12c>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	3301      	adds	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b13      	cmp	r3, #19
 8001646:	f67f af73 	bls.w	8001530 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bcb0      	pop	{r4, r5, r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000184 	.word	0x20000184

0800165c <SCH_RefreshTask>:

unsigned char SCH_RefreshTask(void) {
 800165c:	b4b0      	push	{r4, r5, r7}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return 0;
 8001662:	4b96      	ldr	r3, [pc, #600]	@ (80018bc <SCH_RefreshTask+0x260>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <SCH_RefreshTask+0x12>
 800166a:	2300      	movs	r3, #0
 800166c:	e120      	b.n	80018b0 <SCH_RefreshTask+0x254>
    SCH_Task currentTask = tasks[0];
 800166e:	4b93      	ldr	r3, [pc, #588]	@ (80018bc <SCH_RefreshTask+0x260>)
 8001670:	463c      	mov	r4, r7
 8001672:	461d      	mov	r5, r3
 8001674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001678:	682b      	ldr	r3, [r5, #0]
 800167a:	6023      	str	r3, [r4, #0]
    uint32_t currentDelay = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001680:	2300      	movs	r3, #0
 8001682:	76fb      	strb	r3, [r7, #27]
 8001684:	e10f      	b.n	80018a6 <SCH_RefreshTask+0x24a>
        if (i + 1 == SCH_TASKNUMBER || tasks[i + 1].functionPointer == NULL) {
 8001686:	7efb      	ldrb	r3, [r7, #27]
 8001688:	2b13      	cmp	r3, #19
 800168a:	d00a      	beq.n	80016a2 <SCH_RefreshTask+0x46>
 800168c:	7efb      	ldrb	r3, [r7, #27]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	498a      	ldr	r1, [pc, #552]	@ (80018bc <SCH_RefreshTask+0x260>)
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d14a      	bne.n	8001738 <SCH_RefreshTask+0xdc>
            tasks[i].functionPointer = currentTask.functionPointer;
 80016a2:	7efa      	ldrb	r2, [r7, #27]
 80016a4:	6839      	ldr	r1, [r7, #0]
 80016a6:	4885      	ldr	r0, [pc, #532]	@ (80018bc <SCH_RefreshTask+0x260>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4403      	add	r3, r0
 80016b2:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 80016b4:	7efa      	ldrb	r2, [r7, #27]
 80016b6:	7938      	ldrb	r0, [r7, #4]
 80016b8:	4980      	ldr	r1, [pc, #512]	@ (80018bc <SCH_RefreshTask+0x260>)
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	3304      	adds	r3, #4
 80016c6:	4602      	mov	r2, r0
 80016c8:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 80016ca:	7efa      	ldrb	r2, [r7, #27]
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	487b      	ldr	r0, [pc, #492]	@ (80018bc <SCH_RefreshTask+0x260>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4403      	add	r3, r0
 80016da:	330c      	adds	r3, #12
 80016dc:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 80016de:	7efa      	ldrb	r2, [r7, #27]
 80016e0:	4976      	ldr	r1, [pc, #472]	@ (80018bc <SCH_RefreshTask+0x260>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3310      	adds	r3, #16
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 80016f2:	68f9      	ldr	r1, [r7, #12]
 80016f4:	7efa      	ldrb	r2, [r7, #27]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	1ac9      	subs	r1, r1, r3
 80016fa:	4870      	ldr	r0, [pc, #448]	@ (80018bc <SCH_RefreshTask+0x260>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4403      	add	r3, r0
 8001706:	3308      	adds	r3, #8
 8001708:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 800170a:	7efa      	ldrb	r2, [r7, #27]
 800170c:	496b      	ldr	r1, [pc, #428]	@ (80018bc <SCH_RefreshTask+0x260>)
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3308      	adds	r3, #8
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d109      	bne.n	8001734 <SCH_RefreshTask+0xd8>
                tasks[i].flag = 1;
 8001720:	7efa      	ldrb	r2, [r7, #27]
 8001722:	4966      	ldr	r1, [pc, #408]	@ (80018bc <SCH_RefreshTask+0x260>)
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3310      	adds	r3, #16
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001734:	2301      	movs	r3, #1
 8001736:	e0bb      	b.n	80018b0 <SCH_RefreshTask+0x254>
        }
        currentDelay += tasks[i + 1].delay;
 8001738:	7efb      	ldrb	r3, [r7, #27]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	495f      	ldr	r1, [pc, #380]	@ (80018bc <SCH_RefreshTask+0x260>)
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	3308      	adds	r3, #8
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	4413      	add	r3, r2
 8001750:	61fb      	str	r3, [r7, #28]
        if (currentDelay > currentTask.period) {
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	429a      	cmp	r2, r3
 8001758:	f240 808d 	bls.w	8001876 <SCH_RefreshTask+0x21a>
            tasks[i].functionPointer = currentTask.functionPointer;
 800175c:	7efa      	ldrb	r2, [r7, #27]
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	4856      	ldr	r0, [pc, #344]	@ (80018bc <SCH_RefreshTask+0x260>)
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4403      	add	r3, r0
 800176c:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 800176e:	7efa      	ldrb	r2, [r7, #27]
 8001770:	7938      	ldrb	r0, [r7, #4]
 8001772:	4952      	ldr	r1, [pc, #328]	@ (80018bc <SCH_RefreshTask+0x260>)
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3304      	adds	r3, #4
 8001780:	4602      	mov	r2, r0
 8001782:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 8001784:	7efa      	ldrb	r2, [r7, #27]
 8001786:	68f9      	ldr	r1, [r7, #12]
 8001788:	484c      	ldr	r0, [pc, #304]	@ (80018bc <SCH_RefreshTask+0x260>)
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4403      	add	r3, r0
 8001794:	330c      	adds	r3, #12
 8001796:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8001798:	7efa      	ldrb	r2, [r7, #27]
 800179a:	4948      	ldr	r1, [pc, #288]	@ (80018bc <SCH_RefreshTask+0x260>)
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	3310      	adds	r3, #16
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 80017b4:	7efb      	ldrb	r3, [r7, #27]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	4940      	ldr	r1, [pc, #256]	@ (80018bc <SCH_RefreshTask+0x260>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	3308      	adds	r3, #8
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	7efa      	ldrb	r2, [r7, #27]
 80017cc:	1ac9      	subs	r1, r1, r3
 80017ce:	483b      	ldr	r0, [pc, #236]	@ (80018bc <SCH_RefreshTask+0x260>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4403      	add	r3, r0
 80017da:	3308      	adds	r3, #8
 80017dc:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 80017de:	7efa      	ldrb	r2, [r7, #27]
 80017e0:	4936      	ldr	r1, [pc, #216]	@ (80018bc <SCH_RefreshTask+0x260>)
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	3308      	adds	r3, #8
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <SCH_RefreshTask+0x1ac>
                tasks[i].flag = 1;
 80017f4:	7efa      	ldrb	r2, [r7, #27]
 80017f6:	4931      	ldr	r1, [pc, #196]	@ (80018bc <SCH_RefreshTask+0x260>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	3310      	adds	r3, #16
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 8001808:	7efb      	ldrb	r3, [r7, #27]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	492b      	ldr	r1, [pc, #172]	@ (80018bc <SCH_RefreshTask+0x260>)
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	3308      	adds	r3, #8
 800181a:	6819      	ldr	r1, [r3, #0]
 800181c:	7efa      	ldrb	r2, [r7, #27]
 800181e:	4827      	ldr	r0, [pc, #156]	@ (80018bc <SCH_RefreshTask+0x260>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4403      	add	r3, r0
 800182a:	3308      	adds	r3, #8
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	7efa      	ldrb	r2, [r7, #27]
 8001830:	3201      	adds	r2, #1
 8001832:	1ac9      	subs	r1, r1, r3
 8001834:	4821      	ldr	r0, [pc, #132]	@ (80018bc <SCH_RefreshTask+0x260>)
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4403      	add	r3, r0
 8001840:	3308      	adds	r3, #8
 8001842:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 8001844:	7efb      	ldrb	r3, [r7, #27]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	491c      	ldr	r1, [pc, #112]	@ (80018bc <SCH_RefreshTask+0x260>)
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	3308      	adds	r3, #8
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10a      	bne.n	8001872 <SCH_RefreshTask+0x216>
                tasks[i + 1].flag = 1;
 800185c:	7efb      	ldrb	r3, [r7, #27]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	4916      	ldr	r1, [pc, #88]	@ (80018bc <SCH_RefreshTask+0x260>)
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3310      	adds	r3, #16
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001872:	2301      	movs	r3, #1
 8001874:	e01c      	b.n	80018b0 <SCH_RefreshTask+0x254>
        }
        else {
            tasks[i] = tasks[i + 1];
 8001876:	7efb      	ldrb	r3, [r7, #27]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	7ef9      	ldrb	r1, [r7, #27]
 800187c:	480f      	ldr	r0, [pc, #60]	@ (80018bc <SCH_RefreshTask+0x260>)
 800187e:	460b      	mov	r3, r1
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4418      	add	r0, r3
 8001888:	490c      	ldr	r1, [pc, #48]	@ (80018bc <SCH_RefreshTask+0x260>)
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	4604      	mov	r4, r0
 8001896:	461d      	mov	r5, r3
 8001898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189c:	682b      	ldr	r3, [r5, #0]
 800189e:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80018a0:	7efb      	ldrb	r3, [r7, #27]
 80018a2:	3301      	adds	r3, #1
 80018a4:	76fb      	strb	r3, [r7, #27]
 80018a6:	7efb      	ldrb	r3, [r7, #27]
 80018a8:	2b13      	cmp	r3, #19
 80018aa:	f67f aeec 	bls.w	8001686 <SCH_RefreshTask+0x2a>
        }
    }
    return 0;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3724      	adds	r7, #36	@ 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bcb0      	pop	{r4, r5, r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000184 	.word	0x20000184

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <HAL_MspInit+0x5c>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a14      	ldr	r2, [pc, #80]	@ (800191c <HAL_MspInit+0x5c>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_MspInit+0x5c>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <HAL_MspInit+0x5c>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a0e      	ldr	r2, [pc, #56]	@ (800191c <HAL_MspInit+0x5c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e8:	61d3      	str	r3, [r2, #28]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <HAL_MspInit+0x5c>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_MspInit+0x60>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <HAL_MspInit+0x60>)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000

08001924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a15      	ldr	r2, [pc, #84]	@ (8001994 <HAL_I2C_MspInit+0x70>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d123      	bne.n	800198c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a13      	ldr	r2, [pc, #76]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800195c:	23c0      	movs	r3, #192	@ 0xc0
 800195e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001960:	2312      	movs	r3, #18
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	4619      	mov	r1, r3
 800196e:	480b      	ldr	r0, [pc, #44]	@ (800199c <HAL_I2C_MspInit+0x78>)
 8001970:	f000 fb46 	bl	8002000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	4a07      	ldr	r2, [pc, #28]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 800197a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800197e:	61d3      	str	r3, [r2, #28]
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_I2C_MspInit+0x74>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40005400 	.word	0x40005400
 8001998:	40021000 	.word	0x40021000
 800199c:	40010c00 	.word	0x40010c00

080019a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b0:	d113      	bne.n	80019da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b2:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <HAL_TIM_Base_MspInit+0x44>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a0b      	ldr	r2, [pc, #44]	@ (80019e4 <HAL_TIM_Base_MspInit+0x44>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	61d3      	str	r3, [r2, #28]
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_TIM_Base_MspInit+0x44>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	201c      	movs	r0, #28
 80019d0:	f000 fadf 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019d4:	201c      	movs	r0, #28
 80019d6:	f000 faf8 	bl	8001fca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a15      	ldr	r2, [pc, #84]	@ (8001a58 <HAL_UART_MspInit+0x70>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d123      	bne.n	8001a50 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a08:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <HAL_UART_MspInit+0x74>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	4a13      	ldr	r2, [pc, #76]	@ (8001a5c <HAL_UART_MspInit+0x74>)
 8001a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a12:	61d3      	str	r3, [r2, #28]
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_UART_MspInit+0x74>)
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_UART_MspInit+0x74>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <HAL_UART_MspInit+0x74>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_UART_MspInit+0x74>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a38:	230c      	movs	r3, #12
 8001a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <HAL_UART_MspInit+0x78>)
 8001a4c:	f000 fad8 	bl	8002000 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40004400 	.word	0x40004400
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010800 	.word	0x40010800

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <NMI_Handler+0x4>

08001a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab4:	f000 f956 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <TIM2_IRQHandler+0x10>)
 8001ac2:	f001 fdd9 	bl	8003678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200000f4 	.word	0x200000f4

08001ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ad4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ad8:	f000 fc5e 	bl	8002398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <testMCU>:
 *  Created on: Nov 22, 2024
 *      Author: DELL
 */
#include "test_module.h"

void testMCU(void) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001af0:	2120      	movs	r1, #32
 8001af2:	4802      	ldr	r0, [pc, #8]	@ (8001afc <testMCU+0x10>)
 8001af4:	f000 fc37 	bl	8002366 <HAL_GPIO_TogglePin>
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40010800 	.word	0x40010800

08001b00 <testLED>:
	// Add code to test here if needed
	if (buttonPressed(0) || buttonPressed(1) || buttonPressed(2) || buttonPressed(3)) {
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	}
}
void testLED(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	// Add code to test here if needed
	turnOnGreen(0);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff fb27 	bl	8001158 <turnOnGreen>
	turnOnGreen(1);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f7ff fb24 	bl	8001158 <turnOnGreen>
	turnOnRed(0);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff faf7 	bl	8001104 <turnOnRed>
	turnOnRed(1);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff faf4 	bl	8001104 <turnOnRed>
	turnOnYellow(0);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff fb45 	bl	80011ac <turnOnYellow>
	turnOnYellow(1);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff fb42 	bl	80011ac <turnOnYellow>

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <trafficToggle>:
uint32_t trafficGreenDuration = 3000;
uint32_t trafficYellowDuration = 2000;
enum TRAFFIC_STATE trafficStates[TRAFFIC_NUMBER] = {};
uint32_t trafficCounters[TRAFFIC_NUMBER];

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	460a      	mov	r2, r1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d84c      	bhi.n	8001bdc <trafficToggle+0xb0>
 8001b42:	a201      	add	r2, pc, #4	@ (adr r2, 8001b48 <trafficToggle+0x1c>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001b59 	.word	0x08001b59
 8001b4c:	08001b6b 	.word	0x08001b6b
 8001b50:	08001b91 	.word	0x08001b91
 8001b54:	08001bb7 	.word	0x08001bb7
	case TRAFFIC_OFF:
		turnOffLed(index);
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff faa8 	bl	80010b0 <turnOffLed>
		trafficStates[index] = TRAFFIC_OFF;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a24      	ldr	r2, [pc, #144]	@ (8001bf4 <trafficToggle+0xc8>)
 8001b64:	2100      	movs	r1, #0
 8001b66:	54d1      	strb	r1, [r2, r3]
		break;
 8001b68:	e03f      	b.n	8001bea <trafficToggle+0xbe>
	case TRAFFIC_RED:
		turnOnRed(index);
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fac9 	bl	8001104 <turnOnRed>
		trafficStates[index] = TRAFFIC_RED;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf4 <trafficToggle+0xc8>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <trafficToggle+0xcc>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d12e      	bne.n	8001be0 <trafficToggle+0xb4>
			trafficCounters[index] = trafficRedDuration;
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <trafficToggle+0xd0>)
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	491d      	ldr	r1, [pc, #116]	@ (8001c00 <trafficToggle+0xd4>)
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001b8e:	e027      	b.n	8001be0 <trafficToggle+0xb4>
	case TRAFFIC_GREEN:
		turnOnGreen(index);
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fae0 	bl	8001158 <turnOnGreen>
		trafficStates[index] = TRAFFIC_GREEN;
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4a16      	ldr	r2, [pc, #88]	@ (8001bf4 <trafficToggle+0xc8>)
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001ba0:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <trafficToggle+0xcc>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d11d      	bne.n	8001be4 <trafficToggle+0xb8>
			trafficCounters[index] = trafficGreenDuration;
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4a16      	ldr	r2, [pc, #88]	@ (8001c04 <trafficToggle+0xd8>)
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	4914      	ldr	r1, [pc, #80]	@ (8001c00 <trafficToggle+0xd4>)
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001bb4:	e016      	b.n	8001be4 <trafficToggle+0xb8>
	case TRAFFIC_YELLOW:
		turnOnYellow(index);
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff faf7 	bl	80011ac <turnOnYellow>
		trafficStates[index] = TRAFFIC_YELLOW;
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf4 <trafficToggle+0xc8>)
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <trafficToggle+0xcc>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10c      	bne.n	8001be8 <trafficToggle+0xbc>
			trafficCounters[index] = trafficYellowDuration;
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <trafficToggle+0xdc>)
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	490a      	ldr	r1, [pc, #40]	@ (8001c00 <trafficToggle+0xd4>)
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001bda:	e005      	b.n	8001be8 <trafficToggle+0xbc>
	default:
		break;
 8001bdc:	bf00      	nop
 8001bde:	e004      	b.n	8001bea <trafficToggle+0xbe>
		break;
 8001be0:	bf00      	nop
 8001be2:	e002      	b.n	8001bea <trafficToggle+0xbe>
		break;
 8001be4:	bf00      	nop
 8001be6:	e000      	b.n	8001bea <trafficToggle+0xbe>
		break;
 8001be8:	bf00      	nop
	}
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000314 	.word	0x20000314
 8001bf8:	20000080 	.word	0x20000080
 8001bfc:	20000034 	.word	0x20000034
 8001c00:	20000318 	.word	0x20000318
 8001c04:	20000038 	.word	0x20000038
 8001c08:	2000003c 	.word	0x2000003c

08001c0c <traffic0Off>:

void traffic0Off(void) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_OFF);
 8001c10:	2100      	movs	r1, #0
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff ff8a 	bl	8001b2c <trafficToggle>
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <traffic0Red>:
void traffic0Red(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 8001c20:	2101      	movs	r1, #1
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff ff82 	bl	8001b2c <trafficToggle>
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <traffic0Green>:
void traffic0Green(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 8001c30:	2102      	movs	r1, #2
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff ff7a 	bl	8001b2c <trafficToggle>
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <traffic0Yellow>:
void traffic0Yellow(void) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 8001c40:	2103      	movs	r1, #3
 8001c42:	2000      	movs	r0, #0
 8001c44:	f7ff ff72 	bl	8001b2c <trafficToggle>
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <traffic1Off>:

void traffic1Off(void) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_OFF);
 8001c50:	2100      	movs	r1, #0
 8001c52:	2001      	movs	r0, #1
 8001c54:	f7ff ff6a 	bl	8001b2c <trafficToggle>
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <traffic1Red>:
void traffic1Red(void) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 8001c60:	2101      	movs	r1, #1
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff ff62 	bl	8001b2c <trafficToggle>
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <traffic1Green>:
void traffic1Green(void) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 8001c70:	2102      	movs	r1, #2
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff ff5a 	bl	8001b2c <trafficToggle>
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <traffic1Yellow>:
void traffic1Yellow(void) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 8001c80:	2103      	movs	r1, #3
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7ff ff52 	bl	8001b2c <trafficToggle>
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c8c:	f7ff ff28 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c90:	480b      	ldr	r0, [pc, #44]	@ (8001cc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c92:	490c      	ldr	r1, [pc, #48]	@ (8001cc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c94:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ca8:	4c09      	ldr	r4, [pc, #36]	@ (8001cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f002 f915 	bl	8003ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cba:	f7ff f835 	bl	8000d28 <main>
  bx lr
 8001cbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001cc8:	08003f78 	.word	0x08003f78
  ldr r2, =_sbss
 8001ccc:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001cd0:	20000324 	.word	0x20000324

08001cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_2_IRQHandler>
	...

08001cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_Init+0x28>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_Init+0x28>)
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 f947 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f000 f808 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7ff fde4 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f95f 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f000 f927 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000030 	.word	0x20000030
 8001d5c:	20000044 	.word	0x20000044
 8001d60:	20000040 	.word	0x20000040

08001d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_IncTick+0x1c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a03      	ldr	r2, [pc, #12]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000044 	.word	0x20000044
 8001d84:	20000320 	.word	0x20000320

08001d88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b02      	ldr	r3, [pc, #8]	@ (8001d98 <HAL_GetTick+0x10>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000320 	.word	0x20000320

08001d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffe0 	bl	8001d88 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000044 	.word	0x20000044

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4906      	ldr	r1, [pc, #24]	@ (8001e7c <__NVIC_EnableIRQ+0x34>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	@ (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	@ (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	@ 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	@ 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff90 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff2d 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff42 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff90 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5f 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff35 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffa2 	bl	8001f38 <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b08b      	sub	sp, #44	@ 0x2c
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	e169      	b.n	80022e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002014:	2201      	movs	r2, #1
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 8158 	bne.w	80022e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a9a      	ldr	r2, [pc, #616]	@ (80022a0 <HAL_GPIO_Init+0x2a0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d05e      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 800203c:	4a98      	ldr	r2, [pc, #608]	@ (80022a0 <HAL_GPIO_Init+0x2a0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d875      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 8002042:	4a98      	ldr	r2, [pc, #608]	@ (80022a4 <HAL_GPIO_Init+0x2a4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d058      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 8002048:	4a96      	ldr	r2, [pc, #600]	@ (80022a4 <HAL_GPIO_Init+0x2a4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d86f      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 800204e:	4a96      	ldr	r2, [pc, #600]	@ (80022a8 <HAL_GPIO_Init+0x2a8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d052      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 8002054:	4a94      	ldr	r2, [pc, #592]	@ (80022a8 <HAL_GPIO_Init+0x2a8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d869      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 800205a:	4a94      	ldr	r2, [pc, #592]	@ (80022ac <HAL_GPIO_Init+0x2ac>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d04c      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 8002060:	4a92      	ldr	r2, [pc, #584]	@ (80022ac <HAL_GPIO_Init+0x2ac>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d863      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 8002066:	4a92      	ldr	r2, [pc, #584]	@ (80022b0 <HAL_GPIO_Init+0x2b0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d046      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 800206c:	4a90      	ldr	r2, [pc, #576]	@ (80022b0 <HAL_GPIO_Init+0x2b0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d85d      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 8002072:	2b12      	cmp	r3, #18
 8002074:	d82a      	bhi.n	80020cc <HAL_GPIO_Init+0xcc>
 8002076:	2b12      	cmp	r3, #18
 8002078:	d859      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 800207a:	a201      	add	r2, pc, #4	@ (adr r2, 8002080 <HAL_GPIO_Init+0x80>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	080020fb 	.word	0x080020fb
 8002084:	080020d5 	.word	0x080020d5
 8002088:	080020e7 	.word	0x080020e7
 800208c:	08002129 	.word	0x08002129
 8002090:	0800212f 	.word	0x0800212f
 8002094:	0800212f 	.word	0x0800212f
 8002098:	0800212f 	.word	0x0800212f
 800209c:	0800212f 	.word	0x0800212f
 80020a0:	0800212f 	.word	0x0800212f
 80020a4:	0800212f 	.word	0x0800212f
 80020a8:	0800212f 	.word	0x0800212f
 80020ac:	0800212f 	.word	0x0800212f
 80020b0:	0800212f 	.word	0x0800212f
 80020b4:	0800212f 	.word	0x0800212f
 80020b8:	0800212f 	.word	0x0800212f
 80020bc:	0800212f 	.word	0x0800212f
 80020c0:	0800212f 	.word	0x0800212f
 80020c4:	080020dd 	.word	0x080020dd
 80020c8:	080020f1 	.word	0x080020f1
 80020cc:	4a79      	ldr	r2, [pc, #484]	@ (80022b4 <HAL_GPIO_Init+0x2b4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020d2:	e02c      	b.n	800212e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	623b      	str	r3, [r7, #32]
          break;
 80020da:	e029      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	3304      	adds	r3, #4
 80020e2:	623b      	str	r3, [r7, #32]
          break;
 80020e4:	e024      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	3308      	adds	r3, #8
 80020ec:	623b      	str	r3, [r7, #32]
          break;
 80020ee:	e01f      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	330c      	adds	r3, #12
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e01a      	b.n	8002130 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002102:	2304      	movs	r3, #4
 8002104:	623b      	str	r3, [r7, #32]
          break;
 8002106:	e013      	b.n	8002130 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002110:	2308      	movs	r3, #8
 8002112:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	611a      	str	r2, [r3, #16]
          break;
 800211a:	e009      	b.n	8002130 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800211c:	2308      	movs	r3, #8
 800211e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	615a      	str	r2, [r3, #20]
          break;
 8002126:	e003      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
          break;
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x130>
          break;
 800212e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2bff      	cmp	r3, #255	@ 0xff
 8002134:	d801      	bhi.n	800213a <HAL_GPIO_Init+0x13a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	e001      	b.n	800213e <HAL_GPIO_Init+0x13e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3304      	adds	r3, #4
 800213e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2bff      	cmp	r3, #255	@ 0xff
 8002144:	d802      	bhi.n	800214c <HAL_GPIO_Init+0x14c>
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	e002      	b.n	8002152 <HAL_GPIO_Init+0x152>
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	3b08      	subs	r3, #8
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	210f      	movs	r1, #15
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	401a      	ands	r2, r3
 8002164:	6a39      	ldr	r1, [r7, #32]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	431a      	orrs	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80b1 	beq.w	80022e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002180:	4b4d      	ldr	r3, [pc, #308]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a4c      	ldr	r2, [pc, #304]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b4a      	ldr	r3, [pc, #296]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002198:	4a48      	ldr	r2, [pc, #288]	@ (80022bc <HAL_GPIO_Init+0x2bc>)
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a40      	ldr	r2, [pc, #256]	@ (80022c0 <HAL_GPIO_Init+0x2c0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d013      	beq.n	80021ec <HAL_GPIO_Init+0x1ec>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3f      	ldr	r2, [pc, #252]	@ (80022c4 <HAL_GPIO_Init+0x2c4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00d      	beq.n	80021e8 <HAL_GPIO_Init+0x1e8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3e      	ldr	r2, [pc, #248]	@ (80022c8 <HAL_GPIO_Init+0x2c8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <HAL_GPIO_Init+0x1e4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3d      	ldr	r2, [pc, #244]	@ (80022cc <HAL_GPIO_Init+0x2cc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_GPIO_Init+0x1e0>
 80021dc:	2303      	movs	r3, #3
 80021de:	e006      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e004      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021ec:	2300      	movs	r3, #0
 80021ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021fe:	492f      	ldr	r1, [pc, #188]	@ (80022bc <HAL_GPIO_Init+0x2bc>)
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002218:	4b2d      	ldr	r3, [pc, #180]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	492c      	ldr	r1, [pc, #176]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002226:	4b2a      	ldr	r3, [pc, #168]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	43db      	mvns	r3, r3
 800222e:	4928      	ldr	r1, [pc, #160]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002230:	4013      	ands	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002240:	4b23      	ldr	r3, [pc, #140]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	4922      	ldr	r1, [pc, #136]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	43db      	mvns	r3, r3
 8002256:	491e      	ldr	r1, [pc, #120]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002258:	4013      	ands	r3, r2
 800225a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4918      	ldr	r1, [pc, #96]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002276:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	43db      	mvns	r3, r3
 800227e:	4914      	ldr	r1, [pc, #80]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002280:	4013      	ands	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d021      	beq.n	80022d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	490e      	ldr	r1, [pc, #56]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
 800229c:	e021      	b.n	80022e2 <HAL_GPIO_Init+0x2e2>
 800229e:	bf00      	nop
 80022a0:	10320000 	.word	0x10320000
 80022a4:	10310000 	.word	0x10310000
 80022a8:	10220000 	.word	0x10220000
 80022ac:	10210000 	.word	0x10210000
 80022b0:	10120000 	.word	0x10120000
 80022b4:	10110000 	.word	0x10110000
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40010800 	.word	0x40010800
 80022c4:	40010c00 	.word	0x40010c00
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40011400 	.word	0x40011400
 80022d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <HAL_GPIO_Init+0x304>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	43db      	mvns	r3, r3
 80022dc:	4909      	ldr	r1, [pc, #36]	@ (8002304 <HAL_GPIO_Init+0x304>)
 80022de:	4013      	ands	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	3301      	adds	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f47f ae8e 	bne.w	8002014 <HAL_GPIO_Init+0x14>
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	372c      	adds	r7, #44	@ 0x2c
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40010400 	.word	0x40010400

08002308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e001      	b.n	800232a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	807b      	strh	r3, [r7, #2]
 8002342:	4613      	mov	r3, r2
 8002344:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002346:	787b      	ldrb	r3, [r7, #1]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234c:	887a      	ldrh	r2, [r7, #2]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002352:	e003      	b.n	800235c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	041a      	lsls	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	611a      	str	r2, [r3, #16]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002378:	887a      	ldrh	r2, [r7, #2]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	041a      	lsls	r2, r3, #16
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	43d9      	mvns	r1, r3
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	400b      	ands	r3, r1
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	611a      	str	r2, [r3, #16]
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023a2:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ae:	4a05      	ldr	r2, [pc, #20]	@ (80023c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f806 	bl	80023c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40010400 	.word	0x40010400

080023c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e12b      	b.n	8002646 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fa8e 	bl	8001924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2224      	movs	r2, #36	@ 0x24
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800242e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800243e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002440:	f001 f832 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8002444:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4a81      	ldr	r2, [pc, #516]	@ (8002650 <HAL_I2C_Init+0x274>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d807      	bhi.n	8002460 <HAL_I2C_Init+0x84>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a80      	ldr	r2, [pc, #512]	@ (8002654 <HAL_I2C_Init+0x278>)
 8002454:	4293      	cmp	r3, r2
 8002456:	bf94      	ite	ls
 8002458:	2301      	movls	r3, #1
 800245a:	2300      	movhi	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e006      	b.n	800246e <HAL_I2C_Init+0x92>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a7d      	ldr	r2, [pc, #500]	@ (8002658 <HAL_I2C_Init+0x27c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	bf94      	ite	ls
 8002468:	2301      	movls	r3, #1
 800246a:	2300      	movhi	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0e7      	b.n	8002646 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a78      	ldr	r2, [pc, #480]	@ (800265c <HAL_I2C_Init+0x280>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	0c9b      	lsrs	r3, r3, #18
 8002480:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002650 <HAL_I2C_Init+0x274>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d802      	bhi.n	80024b0 <HAL_I2C_Init+0xd4>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3301      	adds	r3, #1
 80024ae:	e009      	b.n	80024c4 <HAL_I2C_Init+0xe8>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	4a69      	ldr	r2, [pc, #420]	@ (8002660 <HAL_I2C_Init+0x284>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	3301      	adds	r3, #1
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	495c      	ldr	r1, [pc, #368]	@ (8002650 <HAL_I2C_Init+0x274>)
 80024e0:	428b      	cmp	r3, r1
 80024e2:	d819      	bhi.n	8002518 <HAL_I2C_Init+0x13c>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e59      	subs	r1, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f2:	1c59      	adds	r1, r3, #1
 80024f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024f8:	400b      	ands	r3, r1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_I2C_Init+0x138>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1e59      	subs	r1, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fbb1 f3f3 	udiv	r3, r1, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002512:	e051      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002514:	2304      	movs	r3, #4
 8002516:	e04f      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d111      	bne.n	8002544 <HAL_I2C_Init+0x168>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1e58      	subs	r0, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	440b      	add	r3, r1
 800252e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e012      	b.n	800256a <HAL_I2C_Init+0x18e>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e58      	subs	r0, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	0099      	lsls	r1, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	fbb0 f3f3 	udiv	r3, r0, r3
 800255a:	3301      	adds	r3, #1
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Init+0x196>
 800256e:	2301      	movs	r3, #1
 8002570:	e022      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10e      	bne.n	8002598 <HAL_I2C_Init+0x1bc>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1e58      	subs	r0, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	440b      	add	r3, r1
 8002588:	fbb0 f3f3 	udiv	r3, r0, r3
 800258c:	3301      	adds	r3, #1
 800258e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002596:	e00f      	b.n	80025b8 <HAL_I2C_Init+0x1dc>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e58      	subs	r0, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	0099      	lsls	r1, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	6809      	ldr	r1, [r1, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6911      	ldr	r1, [r2, #16]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68d2      	ldr	r2, [r2, #12]
 80025f2:	4311      	orrs	r1, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	000186a0 	.word	0x000186a0
 8002654:	001e847f 	.word	0x001e847f
 8002658:	003d08ff 	.word	0x003d08ff
 800265c:	431bde83 	.word	0x431bde83
 8002660:	10624dd3 	.word	0x10624dd3

08002664 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	461a      	mov	r2, r3
 8002670:	460b      	mov	r3, r1
 8002672:	817b      	strh	r3, [r7, #10]
 8002674:	4613      	mov	r3, r2
 8002676:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002678:	f7ff fb86 	bl	8001d88 <HAL_GetTick>
 800267c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b20      	cmp	r3, #32
 8002688:	f040 80e0 	bne.w	800284c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2319      	movs	r3, #25
 8002692:	2201      	movs	r2, #1
 8002694:	4970      	ldr	r1, [pc, #448]	@ (8002858 <HAL_I2C_Master_Transmit+0x1f4>)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f964 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026a2:	2302      	movs	r3, #2
 80026a4:	e0d3      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_I2C_Master_Transmit+0x50>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e0cc      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d007      	beq.n	80026da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2221      	movs	r2, #33	@ 0x21
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2210      	movs	r2, #16
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	893a      	ldrh	r2, [r7, #8]
 800270a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a50      	ldr	r2, [pc, #320]	@ (800285c <HAL_I2C_Master_Transmit+0x1f8>)
 800271a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f89c 	bl	8002860 <I2C_MasterRequestWrite>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e08d      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002748:	e066      	b.n	8002818 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	6a39      	ldr	r1, [r7, #32]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fa22 	bl	8002b98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00d      	beq.n	8002776 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	2b04      	cmp	r3, #4
 8002760:	d107      	bne.n	8002772 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e06b      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d11b      	bne.n	80027ec <HAL_I2C_Master_Transmit+0x188>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d017      	beq.n	80027ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	6a39      	ldr	r1, [r7, #32]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fa19 	bl	8002c28 <I2C_WaitOnBTFFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00d      	beq.n	8002818 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	2b04      	cmp	r3, #4
 8002802:	d107      	bne.n	8002814 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002812:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e01a      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	d194      	bne.n	800274a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800282e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	e000      	b.n	800284e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800284c:	2302      	movs	r3, #2
  }
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	00100002 	.word	0x00100002
 800285c:	ffff0000 	.word	0xffff0000

08002860 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	460b      	mov	r3, r1
 800286e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b08      	cmp	r3, #8
 800287a:	d006      	beq.n	800288a <I2C_MasterRequestWrite+0x2a>
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d003      	beq.n	800288a <I2C_MasterRequestWrite+0x2a>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002888:	d108      	bne.n	800289c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e00b      	b.n	80028b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	2b12      	cmp	r3, #18
 80028a2:	d107      	bne.n	80028b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f84f 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028da:	d103      	bne.n	80028e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e035      	b.n	8002954 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028f0:	d108      	bne.n	8002904 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002900:	611a      	str	r2, [r3, #16]
 8002902:	e01b      	b.n	800293c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002904:	897b      	ldrh	r3, [r7, #10]
 8002906:	11db      	asrs	r3, r3, #7
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f003 0306 	and.w	r3, r3, #6
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f063 030f 	orn	r3, r3, #15
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	490e      	ldr	r1, [pc, #56]	@ (800295c <I2C_MasterRequestWrite+0xfc>)
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f898 	bl	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e010      	b.n	8002954 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4907      	ldr	r1, [pc, #28]	@ (8002960 <I2C_MasterRequestWrite+0x100>)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f888 	bl	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	00010008 	.word	0x00010008
 8002960:	00010002 	.word	0x00010002

08002964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002974:	e048      	b.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d044      	beq.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7ff fa03 	bl	8001d88 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d139      	bne.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	0c1b      	lsrs	r3, r3, #16
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10d      	bne.n	80029ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	43da      	mvns	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4013      	ands	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	e00c      	b.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	43da      	mvns	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d116      	bne.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e023      	b.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	0c1b      	lsrs	r3, r3, #16
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10d      	bne.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	e00c      	b.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	43da      	mvns	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d093      	beq.n	8002976 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a66:	e071      	b.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a76:	d123      	bne.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	f043 0204 	orr.w	r2, r3, #4
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e067      	b.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac6:	d041      	beq.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac8:	f7ff f95e 	bl	8001d88 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d302      	bcc.n	8002ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d136      	bne.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d10c      	bne.n	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4013      	ands	r3, r2
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf14      	ite	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	2300      	moveq	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	e00b      	b.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf14      	ite	ne
 8002b14:	2301      	movne	r3, #1
 8002b16:	2300      	moveq	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d016      	beq.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	f043 0220 	orr.w	r2, r3, #32
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e021      	b.n	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10c      	bne.n	8002b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e00b      	b.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf14      	ite	ne
 8002b82:	2301      	movne	r3, #1
 8002b84:	2300      	moveq	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f af6d 	bne.w	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba4:	e034      	b.n	8002c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f886 	bl	8002cb8 <I2C_IsAcknowledgeFailed>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e034      	b.n	8002c20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d028      	beq.n	8002c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7ff f8e3 	bl	8001d88 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11d      	bne.n	8002c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	2b80      	cmp	r3, #128	@ 0x80
 8002be0:	d016      	beq.n	8002c10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e007      	b.n	8002c20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1a:	2b80      	cmp	r3, #128	@ 0x80
 8002c1c:	d1c3      	bne.n	8002ba6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c34:	e034      	b.n	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f83e 	bl	8002cb8 <I2C_IsAcknowledgeFailed>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e034      	b.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d028      	beq.n	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7ff f89b 	bl	8001d88 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d11d      	bne.n	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d016      	beq.n	8002ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	f043 0220 	orr.w	r2, r3, #32
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e007      	b.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d1c3      	bne.n	8002c36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cce:	d11b      	bne.n	8002d08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e272      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8087 	beq.w	8002e42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d34:	4b92      	ldr	r3, [pc, #584]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d00c      	beq.n	8002d5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d40:	4b8f      	ldr	r3, [pc, #572]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d112      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5e>
 8002d4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d58:	d10b      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5a:	4b89      	ldr	r3, [pc, #548]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d06c      	beq.n	8002e40 <HAL_RCC_OscConfig+0x12c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d168      	bne.n	8002e40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e24c      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x76>
 8002d7c:	4b80      	ldr	r3, [pc, #512]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a7f      	ldr	r2, [pc, #508]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	e02e      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x98>
 8002d92:	4b7b      	ldr	r3, [pc, #492]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7a      	ldr	r2, [pc, #488]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b78      	ldr	r3, [pc, #480]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a77      	ldr	r2, [pc, #476]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e01d      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xbc>
 8002db6:	4b72      	ldr	r3, [pc, #456]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a71      	ldr	r2, [pc, #452]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6e      	ldr	r2, [pc, #440]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002dd0:	4b6b      	ldr	r3, [pc, #428]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a6a      	ldr	r2, [pc, #424]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b68      	ldr	r3, [pc, #416]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a67      	ldr	r2, [pc, #412]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d013      	beq.n	8002e18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe ffca 	bl	8001d88 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fe ffc6 	bl	8001d88 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	@ 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e200      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0xe4>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fe ffb6 	bl	8001d88 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e20:	f7fe ffb2 	bl	8001d88 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	@ 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1ec      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	4b53      	ldr	r3, [pc, #332]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x10c>
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d063      	beq.n	8002f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e5a:	4b49      	ldr	r3, [pc, #292]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d11c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x18c>
 8002e66:	4b46      	ldr	r3, [pc, #280]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	4b43      	ldr	r3, [pc, #268]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x176>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e1c0      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4939      	ldr	r1, [pc, #228]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	e03a      	b.n	8002f16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea8:	4b36      	ldr	r3, [pc, #216]	@ (8002f84 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe ff6b 	bl	8001d88 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7fe ff67 	bl	8001d88 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1a1      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4927      	ldr	r1, [pc, #156]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e015      	b.n	8002f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b26      	ldr	r3, [pc, #152]	@ (8002f84 <HAL_RCC_OscConfig+0x270>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe ff4a 	bl	8001d88 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7fe ff46 	bl	8001d88 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e180      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d03a      	beq.n	8002f98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d019      	beq.n	8002f5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7fe ff2a 	bl	8001d88 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe ff26 	bl	8001d88 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e160      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f56:	2001      	movs	r0, #1
 8002f58:	f000 face 	bl	80034f8 <RCC_Delay>
 8002f5c:	e01c      	b.n	8002f98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <HAL_RCC_OscConfig+0x274>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f64:	f7fe ff10 	bl	8001d88 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6a:	e00f      	b.n	8002f8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fe ff0c 	bl	8001d88 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d908      	bls.n	8002f8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e146      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	42420000 	.word	0x42420000
 8002f88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	4b92      	ldr	r3, [pc, #584]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e9      	bne.n	8002f6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a6 	beq.w	80030f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002faa:	4b8b      	ldr	r3, [pc, #556]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10d      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	4b88      	ldr	r3, [pc, #544]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a87      	ldr	r2, [pc, #540]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]
 8002fc2:	4b85      	ldr	r3, [pc, #532]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b82      	ldr	r3, [pc, #520]	@ (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d118      	bne.n	8003010 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	4b7f      	ldr	r3, [pc, #508]	@ (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fea:	f7fe fecd 	bl	8001d88 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7fe fec9 	bl	8001d88 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b64      	cmp	r3, #100	@ 0x64
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e103      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	4b75      	ldr	r3, [pc, #468]	@ (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x312>
 8003018:	4b6f      	ldr	r3, [pc, #444]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4a6e      	ldr	r2, [pc, #440]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6213      	str	r3, [r2, #32]
 8003024:	e02d      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x334>
 800302e:	4b6a      	ldr	r3, [pc, #424]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a69      	ldr	r2, [pc, #420]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	6213      	str	r3, [r2, #32]
 800303a:	4b67      	ldr	r3, [pc, #412]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a66      	ldr	r2, [pc, #408]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	f023 0304 	bic.w	r3, r3, #4
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	e01c      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d10c      	bne.n	800306a <HAL_RCC_OscConfig+0x356>
 8003050:	4b61      	ldr	r3, [pc, #388]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4a60      	ldr	r2, [pc, #384]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	4b5e      	ldr	r3, [pc, #376]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a5d      	ldr	r2, [pc, #372]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	e00b      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 800306a:	4b5b      	ldr	r3, [pc, #364]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a5a      	ldr	r2, [pc, #360]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	4b58      	ldr	r3, [pc, #352]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a57      	ldr	r2, [pc, #348]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d015      	beq.n	80030b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308a:	f7fe fe7d 	bl	8001d88 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe fe79 	bl	8001d88 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0b1      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	4b4b      	ldr	r3, [pc, #300]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ee      	beq.n	8003092 <HAL_RCC_OscConfig+0x37e>
 80030b4:	e014      	b.n	80030e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b6:	f7fe fe67 	bl	8001d88 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe fe63 	bl	8001d88 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e09b      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	4b40      	ldr	r3, [pc, #256]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ee      	bne.n	80030be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d105      	bne.n	80030f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e6:	4b3c      	ldr	r3, [pc, #240]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4a3b      	ldr	r2, [pc, #236]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8087 	beq.w	800320a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030fc:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d061      	beq.n	80031cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d146      	bne.n	800319e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	4b33      	ldr	r3, [pc, #204]	@ (80031e0 <HAL_RCC_OscConfig+0x4cc>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe fe37 	bl	8001d88 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe fe33 	bl	8001d88 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e06d      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003130:	4b29      	ldr	r3, [pc, #164]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003144:	d108      	bne.n	8003158 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003146:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	4921      	ldr	r1, [pc, #132]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003158:	4b1f      	ldr	r3, [pc, #124]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a19      	ldr	r1, [r3, #32]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	430b      	orrs	r3, r1
 800316a:	491b      	ldr	r1, [pc, #108]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b1b      	ldr	r3, [pc, #108]	@ (80031e0 <HAL_RCC_OscConfig+0x4cc>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fe fe07 	bl	8001d88 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7fe fe03 	bl	8001d88 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e03d      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003190:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x46a>
 800319c:	e035      	b.n	800320a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <HAL_RCC_OscConfig+0x4cc>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe fdf0 	bl	8001d88 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe fdec 	bl	8001d88 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e026      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x498>
 80031ca:	e01e      	b.n	800320a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e019      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <HAL_RCC_OscConfig+0x500>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000

08003218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0d0      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b6a      	ldr	r3, [pc, #424]	@ (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d910      	bls.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b67      	ldr	r3, [pc, #412]	@ (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	4965      	ldr	r1, [pc, #404]	@ (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b63      	ldr	r3, [pc, #396]	@ (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0b8      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003274:	4b59      	ldr	r3, [pc, #356]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a58      	ldr	r2, [pc, #352]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800327e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800328c:	4b53      	ldr	r3, [pc, #332]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4a52      	ldr	r2, [pc, #328]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003296:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003298:	4b50      	ldr	r3, [pc, #320]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	494d      	ldr	r1, [pc, #308]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d040      	beq.n	8003338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b47      	ldr	r3, [pc, #284]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d115      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b41      	ldr	r3, [pc, #260]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e073      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	4b3d      	ldr	r3, [pc, #244]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e06b      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b39      	ldr	r3, [pc, #228]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4936      	ldr	r1, [pc, #216]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003308:	f7fe fd3e 	bl	8001d88 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fe fd3a 	bl	8001d88 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e053      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b2d      	ldr	r3, [pc, #180]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003338:	4b27      	ldr	r3, [pc, #156]	@ (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d210      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b24      	ldr	r3, [pc, #144]	@ (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 0207 	bic.w	r2, r3, #7
 800334e:	4922      	ldr	r1, [pc, #136]	@ (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	@ (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e032      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003374:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4916      	ldr	r1, [pc, #88]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003392:	4b12      	ldr	r3, [pc, #72]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	490e      	ldr	r1, [pc, #56]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033a6:	f000 f821 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80033aa:	4602      	mov	r2, r0
 80033ac:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	490a      	ldr	r1, [pc, #40]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	5ccb      	ldrb	r3, [r1, r3]
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	4a09      	ldr	r2, [pc, #36]	@ (80033e4 <HAL_RCC_ClockConfig+0x1cc>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033c2:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <HAL_RCC_ClockConfig+0x1d0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe fc9c 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08003f44 	.word	0x08003f44
 80033e4:	20000030 	.word	0x20000030
 80033e8:	20000040 	.word	0x20000040

080033ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003406:	4b1e      	ldr	r3, [pc, #120]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x94>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b04      	cmp	r3, #4
 8003414:	d002      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x30>
 8003416:	2b08      	cmp	r3, #8
 8003418:	d003      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x36>
 800341a:	e027      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800341c:	4b19      	ldr	r3, [pc, #100]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x98>)
 800341e:	613b      	str	r3, [r7, #16]
      break;
 8003420:	e027      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	0c9b      	lsrs	r3, r3, #18
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	4a17      	ldr	r2, [pc, #92]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x9c>)
 800342c:	5cd3      	ldrb	r3, [r2, r3]
 800342e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d010      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800343a:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x94>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	0c5b      	lsrs	r3, r3, #17
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	4a11      	ldr	r2, [pc, #68]	@ (800348c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a0d      	ldr	r2, [pc, #52]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x98>)
 800344e:	fb03 f202 	mul.w	r2, r3, r2
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e004      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0c      	ldr	r2, [pc, #48]	@ (8003490 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	613b      	str	r3, [r7, #16]
      break;
 800346a:	e002      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x98>)
 800346e:	613b      	str	r3, [r7, #16]
      break;
 8003470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003472:	693b      	ldr	r3, [r7, #16]
}
 8003474:	4618      	mov	r0, r3
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	007a1200 	.word	0x007a1200
 8003488:	08003f5c 	.word	0x08003f5c
 800348c:	08003f6c 	.word	0x08003f6c
 8003490:	003d0900 	.word	0x003d0900

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b02      	ldr	r3, [pc, #8]	@ (80034a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	20000030 	.word	0x20000030

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ac:	f7ff fff2 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	@ (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08003f54 	.word	0x08003f54

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034d4:	f7ff ffde 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	0adb      	lsrs	r3, r3, #11
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	@ (80034f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08003f54 	.word	0x08003f54

080034f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003500:	4b0a      	ldr	r3, [pc, #40]	@ (800352c <RCC_Delay+0x34>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0a      	ldr	r2, [pc, #40]	@ (8003530 <RCC_Delay+0x38>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0a5b      	lsrs	r3, r3, #9
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003514:	bf00      	nop
  }
  while (Delay --);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	60fa      	str	r2, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f9      	bne.n	8003514 <RCC_Delay+0x1c>
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	20000030 	.word	0x20000030
 8003530:	10624dd3 	.word	0x10624dd3

08003534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e041      	b.n	80035ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fa20 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 fa5c 	bl	8003a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d001      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e03a      	b.n	8003662 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a18      	ldr	r2, [pc, #96]	@ (800366c <HAL_TIM_Base_Start_IT+0x98>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00e      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x58>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003616:	d009      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x58>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a14      	ldr	r2, [pc, #80]	@ (8003670 <HAL_TIM_Base_Start_IT+0x9c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d004      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x58>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a13      	ldr	r2, [pc, #76]	@ (8003674 <HAL_TIM_Base_Start_IT+0xa0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d111      	bne.n	8003650 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b06      	cmp	r3, #6
 800363c:	d010      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364e:	e007      	b.n	8003660 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800

08003678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d020      	beq.n	80036dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01b      	beq.n	80036dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0202 	mvn.w	r2, #2
 80036ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f998 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 80036c8:	e005      	b.n	80036d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f98b 	bl	80039e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f99a 	bl	8003a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d020      	beq.n	8003728 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01b      	beq.n	8003728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0204 	mvn.w	r2, #4
 80036f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f972 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 8003714:	e005      	b.n	8003722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f965 	bl	80039e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f974 	bl	8003a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d020      	beq.n	8003774 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01b      	beq.n	8003774 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0208 	mvn.w	r2, #8
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2204      	movs	r2, #4
 800374a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f94c 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f93f 	bl	80039e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f94e 	bl	8003a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b00      	cmp	r3, #0
 800377c:	d020      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01b      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0210 	mvn.w	r2, #16
 8003790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2208      	movs	r2, #8
 8003796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f926 	bl	80039f8 <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f919 	bl	80039e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f928 	bl	8003a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00c      	beq.n	80037e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0201 	mvn.w	r2, #1
 80037dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fc50 	bl	8001084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fa7f 	bl	8003d06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8f8 	bl	8003a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0220 	mvn.w	r2, #32
 8003848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa52 	bl	8003cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_TIM_ConfigClockSource+0x1c>
 8003870:	2302      	movs	r3, #2
 8003872:	e0b4      	b.n	80039de <HAL_TIM_ConfigClockSource+0x186>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800389a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ac:	d03e      	beq.n	800392c <HAL_TIM_ConfigClockSource+0xd4>
 80038ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038b2:	f200 8087 	bhi.w	80039c4 <HAL_TIM_ConfigClockSource+0x16c>
 80038b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ba:	f000 8086 	beq.w	80039ca <HAL_TIM_ConfigClockSource+0x172>
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c2:	d87f      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b70      	cmp	r3, #112	@ 0x70
 80038c6:	d01a      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0xa6>
 80038c8:	2b70      	cmp	r3, #112	@ 0x70
 80038ca:	d87b      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b60      	cmp	r3, #96	@ 0x60
 80038ce:	d050      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x11a>
 80038d0:	2b60      	cmp	r3, #96	@ 0x60
 80038d2:	d877      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b50      	cmp	r3, #80	@ 0x50
 80038d6:	d03c      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0xfa>
 80038d8:	2b50      	cmp	r3, #80	@ 0x50
 80038da:	d873      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b40      	cmp	r3, #64	@ 0x40
 80038de:	d058      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x13a>
 80038e0:	2b40      	cmp	r3, #64	@ 0x40
 80038e2:	d86f      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b30      	cmp	r3, #48	@ 0x30
 80038e6:	d064      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x15a>
 80038e8:	2b30      	cmp	r3, #48	@ 0x30
 80038ea:	d86b      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x16c>
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d060      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x15a>
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d867      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x16c>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d05c      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x15a>
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d05a      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x15a>
 80038fc:	e062      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800390e:	f000 f974 	bl	8003bfa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	609a      	str	r2, [r3, #8]
      break;
 800392a:	e04f      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800393c:	f000 f95d 	bl	8003bfa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800394e:	609a      	str	r2, [r3, #8]
      break;
 8003950:	e03c      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	461a      	mov	r2, r3
 8003960:	f000 f8d4 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2150      	movs	r1, #80	@ 0x50
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f92b 	bl	8003bc6 <TIM_ITRx_SetConfig>
      break;
 8003970:	e02c      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800397e:	461a      	mov	r2, r3
 8003980:	f000 f8f2 	bl	8003b68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2160      	movs	r1, #96	@ 0x60
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f91b 	bl	8003bc6 <TIM_ITRx_SetConfig>
      break;
 8003990:	e01c      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399e:	461a      	mov	r2, r3
 80039a0:	f000 f8b4 	bl	8003b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2140      	movs	r1, #64	@ 0x40
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f90b 	bl	8003bc6 <TIM_ITRx_SetConfig>
      break;
 80039b0:	e00c      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4619      	mov	r1, r3
 80039bc:	4610      	mov	r0, r2
 80039be:	f000 f902 	bl	8003bc6 <TIM_ITRx_SetConfig>
      break;
 80039c2:	e003      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
      break;
 80039c8:	e000      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
	...

08003a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2f      	ldr	r2, [pc, #188]	@ (8003b00 <TIM_Base_SetConfig+0xd0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_Base_SetConfig+0x30>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a4e:	d007      	beq.n	8003a60 <TIM_Base_SetConfig+0x30>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a2c      	ldr	r2, [pc, #176]	@ (8003b04 <TIM_Base_SetConfig+0xd4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0x30>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b08 <TIM_Base_SetConfig+0xd8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d108      	bne.n	8003a72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a22      	ldr	r2, [pc, #136]	@ (8003b00 <TIM_Base_SetConfig+0xd0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d007      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1f      	ldr	r2, [pc, #124]	@ (8003b04 <TIM_Base_SetConfig+0xd4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b08 <TIM_Base_SetConfig+0xd8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a0d      	ldr	r2, [pc, #52]	@ (8003b00 <TIM_Base_SetConfig+0xd0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d103      	bne.n	8003ad8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f023 0201 	bic.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	611a      	str	r2, [r3, #16]
  }
}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800

08003b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f023 030a 	bic.w	r3, r3, #10
 8003b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f023 0210 	bic.w	r2, r3, #16
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	031b      	lsls	r3, r3, #12
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	621a      	str	r2, [r3, #32]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b085      	sub	sp, #20
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f043 0307 	orr.w	r3, r3, #7
 8003be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	609a      	str	r2, [r3, #8]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b087      	sub	sp, #28
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	021a      	lsls	r2, r3, #8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	609a      	str	r2, [r3, #8]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e046      	b.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a12      	ldr	r2, [pc, #72]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a10      	ldr	r2, [pc, #64]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10c      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40000800 	.word	0x40000800

08003cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e042      	b.n	8003db0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fd fe52 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2224      	movs	r2, #36	@ 0x24
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f82b 	bl	8003db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003df2:	f023 030c 	bic.w	r3, r3, #12
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ecc <UART_SetConfig+0x114>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d103      	bne.n	8003e28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7ff fb56 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	e002      	b.n	8003e2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e28:	f7ff fb3e 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8003e2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	009a      	lsls	r2, r3, #2
 8003e38:	441a      	add	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e44:	4a22      	ldr	r2, [pc, #136]	@ (8003ed0 <UART_SetConfig+0x118>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	0119      	lsls	r1, r3, #4
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009a      	lsls	r2, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <UART_SetConfig+0x118>)
 8003e66:	fba3 0302 	umull	r0, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2064      	movs	r0, #100	@ 0x64
 8003e6e:	fb00 f303 	mul.w	r3, r0, r3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	3332      	adds	r3, #50	@ 0x32
 8003e78:	4a15      	ldr	r2, [pc, #84]	@ (8003ed0 <UART_SetConfig+0x118>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e84:	4419      	add	r1, r3
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009a      	lsls	r2, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed0 <UART_SetConfig+0x118>)
 8003e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	2064      	movs	r0, #100	@ 0x64
 8003ea6:	fb00 f303 	mul.w	r3, r0, r3
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	3332      	adds	r3, #50	@ 0x32
 8003eb0:	4a07      	ldr	r2, [pc, #28]	@ (8003ed0 <UART_SetConfig+0x118>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	f003 020f 	and.w	r2, r3, #15
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	51eb851f 	.word	0x51eb851f

08003ed4 <memset>:
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4402      	add	r2, r0
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d100      	bne.n	8003ede <memset+0xa>
 8003edc:	4770      	bx	lr
 8003ede:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee2:	e7f9      	b.n	8003ed8 <memset+0x4>

08003ee4 <__libc_init_array>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	4d0c      	ldr	r5, [pc, #48]	@ (8003f1c <__libc_init_array+0x38>)
 8003eea:	4c0d      	ldr	r4, [pc, #52]	@ (8003f20 <__libc_init_array+0x3c>)
 8003eec:	1b64      	subs	r4, r4, r5
 8003eee:	10a4      	asrs	r4, r4, #2
 8003ef0:	42a6      	cmp	r6, r4
 8003ef2:	d109      	bne.n	8003f08 <__libc_init_array+0x24>
 8003ef4:	f000 f81a 	bl	8003f2c <_init>
 8003ef8:	2600      	movs	r6, #0
 8003efa:	4d0a      	ldr	r5, [pc, #40]	@ (8003f24 <__libc_init_array+0x40>)
 8003efc:	4c0a      	ldr	r4, [pc, #40]	@ (8003f28 <__libc_init_array+0x44>)
 8003efe:	1b64      	subs	r4, r4, r5
 8003f00:	10a4      	asrs	r4, r4, #2
 8003f02:	42a6      	cmp	r6, r4
 8003f04:	d105      	bne.n	8003f12 <__libc_init_array+0x2e>
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0c:	4798      	blx	r3
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7ee      	b.n	8003ef0 <__libc_init_array+0xc>
 8003f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f16:	4798      	blx	r3
 8003f18:	3601      	adds	r6, #1
 8003f1a:	e7f2      	b.n	8003f02 <__libc_init_array+0x1e>
 8003f1c:	08003f70 	.word	0x08003f70
 8003f20:	08003f70 	.word	0x08003f70
 8003f24:	08003f70 	.word	0x08003f70
 8003f28:	08003f74 	.word	0x08003f74

08003f2c <_init>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr

08003f38 <_fini>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr
