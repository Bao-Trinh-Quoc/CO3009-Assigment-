
traffic_light_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004950  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004a5c  08004a5c  00005a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b28  08004b28  00006098  2**0
                  CONTENTS
  4 .ARM          00000008  08004b28  08004b28  00005b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b30  08004b30  00006098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00005b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b34  08004b34  00005b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08004b38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000098  08004bd0  00006098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08004bd0  000064c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f889  00000000  00000000  000060c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002686  00000000  00000000  0001594a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00017fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf2  00000000  00000000  00019060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019822  00000000  00000000  00019d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015717  00000000  00000000  00033574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3ef  00000000  00000000  00048c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000d607a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048e4  00000000  00000000  000d6100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000da9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a44 	.word	0x08004a44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004a44 	.word	0x08004a44

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000162:	2300      	movs	r3, #0
 8000164:	71fb      	strb	r3, [r7, #7]
 8000166:	e06b      	b.n	8000240 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000168:	79fa      	ldrb	r2, [r7, #7]
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	4938      	ldr	r1, [pc, #224]	@ (8000250 <buttonReading+0xf4>)
 800016e:	5c89      	ldrb	r1, [r1, r2]
 8000170:	4a38      	ldr	r2, [pc, #224]	@ (8000254 <buttonReading+0xf8>)
 8000172:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000174:	79fa      	ldrb	r2, [r7, #7]
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	4937      	ldr	r1, [pc, #220]	@ (8000258 <buttonReading+0xfc>)
 800017a:	5c89      	ldrb	r1, [r1, r2]
 800017c:	4a34      	ldr	r2, [pc, #208]	@ (8000250 <buttonReading+0xf4>)
 800017e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	4a36      	ldr	r2, [pc, #216]	@ (800025c <buttonReading+0x100>)
 8000184:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	4935      	ldr	r1, [pc, #212]	@ (8000260 <buttonReading+0x104>)
 800018c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000190:	79fc      	ldrb	r4, [r7, #7]
 8000192:	4619      	mov	r1, r3
 8000194:	4610      	mov	r0, r2
 8000196:	f002 f9bf 	bl	8002518 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	461a      	mov	r2, r3
 800019e:	4b2e      	ldr	r3, [pc, #184]	@ (8000258 <buttonReading+0xfc>)
 80001a0:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000258 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4929      	ldr	r1, [pc, #164]	@ (8000250 <buttonReading+0xf4>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d143      	bne.n	800023a <buttonReading+0xde>
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a28      	ldr	r2, [pc, #160]	@ (8000258 <buttonReading+0xfc>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4926      	ldr	r1, [pc, #152]	@ (8000254 <buttonReading+0xf8>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d13b      	bne.n	800023a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	4a27      	ldr	r2, [pc, #156]	@ (8000264 <buttonReading+0x108>)
 80001c6:	5cd2      	ldrb	r2, [r2, r3]
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	4923      	ldr	r1, [pc, #140]	@ (8000258 <buttonReading+0xfc>)
 80001cc:	5ccb      	ldrb	r3, [r1, r3]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d014      	beq.n	80001fc <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001d2:	79fa      	ldrb	r2, [r7, #7]
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	4920      	ldr	r1, [pc, #128]	@ (8000258 <buttonReading+0xfc>)
 80001d8:	5c89      	ldrb	r1, [r1, r2]
 80001da:	4a22      	ldr	r2, [pc, #136]	@ (8000264 <buttonReading+0x108>)
 80001dc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	4a20      	ldr	r2, [pc, #128]	@ (8000264 <buttonReading+0x108>)
 80001e2:	5cd3      	ldrb	r3, [r2, r3]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d128      	bne.n	800023a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000268 <buttonReading+0x10c>)
 80001ec:	2101      	movs	r1, #1
 80001ee:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / TIMER_TICK;
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	4a1e      	ldr	r2, [pc, #120]	@ (800026c <buttonReading+0x110>)
 80001f4:	21c8      	movs	r1, #200	@ 0xc8
 80001f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001fa:	e01e      	b.n	800023a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	4a19      	ldr	r2, [pc, #100]	@ (8000264 <buttonReading+0x108>)
 8000200:	5cd3      	ldrb	r3, [r2, r3]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d119      	bne.n	800023a <buttonReading+0xde>
					buttonCounters[i] --;
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	4a18      	ldr	r2, [pc, #96]	@ (800026c <buttonReading+0x110>)
 800020a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800020e:	b292      	uxth	r2, r2
 8000210:	3a01      	subs	r2, #1
 8000212:	b292      	uxth	r2, r2
 8000214:	b211      	sxth	r1, r2
 8000216:	4a15      	ldr	r2, [pc, #84]	@ (800026c <buttonReading+0x110>)
 8000218:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	4a13      	ldr	r2, [pc, #76]	@ (800026c <buttonReading+0x110>)
 8000220:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000224:	2b00      	cmp	r3, #0
 8000226:	dc08      	bgt.n	800023a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4a0f      	ldr	r2, [pc, #60]	@ (8000268 <buttonReading+0x10c>)
 800022c:	2101      	movs	r1, #1
 800022e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / TIMER_TICK;
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	4a0e      	ldr	r2, [pc, #56]	@ (800026c <buttonReading+0x110>)
 8000234:	2114      	movs	r1, #20
 8000236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	3301      	adds	r3, #1
 800023e:	71fb      	strb	r3, [r7, #7]
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b03      	cmp	r3, #3
 8000244:	d990      	bls.n	8000168 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}
 8000250:	200000bc 	.word	0x200000bc
 8000254:	200000c0 	.word	0x200000c0
 8000258:	200000b8 	.word	0x200000b8
 800025c:	20000000 	.word	0x20000000
 8000260:	20000010 	.word	0x20000010
 8000264:	200000b4 	.word	0x200000b4
 8000268:	200000c4 	.word	0x200000c4
 800026c:	200000c8 	.word	0x200000c8

08000270 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b03      	cmp	r3, #3
 800027e:	d901      	bls.n	8000284 <buttonPressed+0x14>
 8000280:	2300      	movs	r3, #0
 8000282:	e00b      	b.n	800029c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	4a08      	ldr	r2, [pc, #32]	@ (80002a8 <buttonPressed+0x38>)
 8000288:	5cd3      	ldrb	r3, [r2, r3]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d105      	bne.n	800029a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	4a05      	ldr	r2, [pc, #20]	@ (80002a8 <buttonPressed+0x38>)
 8000292:	2100      	movs	r1, #0
 8000294:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000296:	2301      	movs	r3, #1
 8000298:	e000      	b.n	800029c <buttonPressed+0x2c>
	}
	return 0;
 800029a:	2300      	movs	r3, #0
}
 800029c:	4618      	mov	r0, r3
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	200000c4 	.word	0x200000c4

080002ac <counterRun>:
 *      Author: DELL
 */

#include "counter.h"

void counterRun(void) {
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	if (trafficCounters[0] > TIMER_TICK) {
 80002b0:	4b0e      	ldr	r3, [pc, #56]	@ (80002ec <counterRun+0x40>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b0a      	cmp	r3, #10
 80002b6:	d905      	bls.n	80002c4 <counterRun+0x18>
		trafficCounters[0] -= TIMER_TICK;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <counterRun+0x40>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3b0a      	subs	r3, #10
 80002be:	4a0b      	ldr	r2, [pc, #44]	@ (80002ec <counterRun+0x40>)
 80002c0:	6013      	str	r3, [r2, #0]
 80002c2:	e002      	b.n	80002ca <counterRun+0x1e>
	}
	else {
		trafficCounters[0] = 0;
 80002c4:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <counterRun+0x40>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
	}
	if (trafficCounters[1] > TIMER_TICK) {
 80002ca:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <counterRun+0x40>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	2b0a      	cmp	r3, #10
 80002d0:	d905      	bls.n	80002de <counterRun+0x32>
		trafficCounters[1] -= TIMER_TICK;
 80002d2:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <counterRun+0x40>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	3b0a      	subs	r3, #10
 80002d8:	4a04      	ldr	r2, [pc, #16]	@ (80002ec <counterRun+0x40>)
 80002da:	6053      	str	r3, [r2, #4]
	}
	else {
		trafficCounters[1] = 0;
	}
}
 80002dc:	e002      	b.n	80002e4 <counterRun+0x38>
		trafficCounters[1] = 0;
 80002de:	4b03      	ldr	r3, [pc, #12]	@ (80002ec <counterRun+0x40>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	605a      	str	r2, [r3, #4]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	2000036c 	.word	0x2000036c

080002f0 <counterReset>:

void counterReset(void) {
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	trafficCounters[0] = 0;
 80002f4:	4b04      	ldr	r3, [pc, #16]	@ (8000308 <counterReset+0x18>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
	trafficCounters[1] = 0;
 80002fa:	4b03      	ldr	r3, [pc, #12]	@ (8000308 <counterReset+0x18>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	2000036c 	.word	0x2000036c

0800030c <fsmAutoStop>:
static uint8_t fsmIDs[FSM_TASK] = {};
static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmAutoStop(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	SCH_AddTask(counterReset, 0, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	2100      	movs	r1, #0
 8000314:	4802      	ldr	r0, [pc, #8]	@ (8000320 <fsmAutoStop+0x14>)
 8000316:	f001 f8d3 	bl	80014c0 <SCH_AddTask>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	080002f1 	.word	0x080002f1

08000324 <fsmAutoProcessing>:

/*
 * For pedestrian mode if needed
 * */
void fsmAutoProcessing(void) {
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	return;
 8000328:	bf00      	nop
}
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <fsmAuto>:

void fsmAuto(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	fsmAutoIDs[0] = SCH_AddTask(fsmAutoProcessing, 10, TIMER_TICK);
 8000334:	220a      	movs	r2, #10
 8000336:	210a      	movs	r1, #10
 8000338:	4845      	ldr	r0, [pc, #276]	@ (8000450 <fsmAuto+0x120>)
 800033a:	f001 f8c1 	bl	80014c0 <SCH_AddTask>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	4b44      	ldr	r3, [pc, #272]	@ (8000454 <fsmAuto+0x124>)
 8000344:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(counterRun, 0, TIMER_TICK);
 8000346:	220a      	movs	r2, #10
 8000348:	2100      	movs	r1, #0
 800034a:	4843      	ldr	r0, [pc, #268]	@ (8000458 <fsmAuto+0x128>)
 800034c:	f001 f8b8 	bl	80014c0 <SCH_AddTask>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <fsmAuto+0x124>)
 8000356:	705a      	strb	r2, [r3, #1]
//	fsmAutoIDs[2] = SCH_AddTask(lcd_auto_display, 0, 1000);
	fsmAutoIDs[2] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000358:	4b40      	ldr	r3, [pc, #256]	@ (800045c <fsmAuto+0x12c>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	4b40      	ldr	r3, [pc, #256]	@ (8000460 <fsmAuto+0x130>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	441a      	add	r2, r3
 8000362:	4b40      	ldr	r3, [pc, #256]	@ (8000464 <fsmAuto+0x134>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4413      	add	r3, r2
 8000368:	461a      	mov	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	483e      	ldr	r0, [pc, #248]	@ (8000468 <fsmAuto+0x138>)
 800036e:	f001 f8a7 	bl	80014c0 <SCH_AddTask>
 8000372:	4603      	mov	r3, r0
 8000374:	461a      	mov	r2, r3
 8000376:	4b37      	ldr	r3, [pc, #220]	@ (8000454 <fsmAuto+0x124>)
 8000378:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800037a:	4b38      	ldr	r3, [pc, #224]	@ (800045c <fsmAuto+0x12c>)
 800037c:	6819      	ldr	r1, [r3, #0]
 800037e:	4b37      	ldr	r3, [pc, #220]	@ (800045c <fsmAuto+0x12c>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b37      	ldr	r3, [pc, #220]	@ (8000460 <fsmAuto+0x130>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	441a      	add	r2, r3
 8000388:	4b36      	ldr	r3, [pc, #216]	@ (8000464 <fsmAuto+0x134>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4413      	add	r3, r2
 800038e:	461a      	mov	r2, r3
 8000390:	4836      	ldr	r0, [pc, #216]	@ (800046c <fsmAuto+0x13c>)
 8000392:	f001 f895 	bl	80014c0 <SCH_AddTask>
 8000396:	4603      	mov	r3, r0
 8000398:	461a      	mov	r2, r3
 800039a:	4b2e      	ldr	r3, [pc, #184]	@ (8000454 <fsmAuto+0x124>)
 800039c:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800039e:	4b2f      	ldr	r3, [pc, #188]	@ (800045c <fsmAuto+0x12c>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b30      	ldr	r3, [pc, #192]	@ (8000464 <fsmAuto+0x134>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	18d1      	adds	r1, r2, r3
 80003a8:	4b2c      	ldr	r3, [pc, #176]	@ (800045c <fsmAuto+0x12c>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000460 <fsmAuto+0x130>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	441a      	add	r2, r3
 80003b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000464 <fsmAuto+0x134>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4413      	add	r3, r2
 80003b8:	461a      	mov	r2, r3
 80003ba:	482d      	ldr	r0, [pc, #180]	@ (8000470 <fsmAuto+0x140>)
 80003bc:	f001 f880 	bl	80014c0 <SCH_AddTask>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	4b23      	ldr	r3, [pc, #140]	@ (8000454 <fsmAuto+0x124>)
 80003c6:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80003c8:	4b24      	ldr	r3, [pc, #144]	@ (800045c <fsmAuto+0x12c>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b24      	ldr	r3, [pc, #144]	@ (8000460 <fsmAuto+0x130>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	441a      	add	r2, r3
 80003d2:	4b24      	ldr	r3, [pc, #144]	@ (8000464 <fsmAuto+0x134>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4413      	add	r3, r2
 80003d8:	461a      	mov	r2, r3
 80003da:	2100      	movs	r1, #0
 80003dc:	4825      	ldr	r0, [pc, #148]	@ (8000474 <fsmAuto+0x144>)
 80003de:	f001 f86f 	bl	80014c0 <SCH_AddTask>
 80003e2:	4603      	mov	r3, r0
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <fsmAuto+0x124>)
 80003e8:	715a      	strb	r2, [r3, #5]
	fsmAutoIDs[6] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80003ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000464 <fsmAuto+0x134>)
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	4b1b      	ldr	r3, [pc, #108]	@ (800045c <fsmAuto+0x12c>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <fsmAuto+0x130>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	441a      	add	r2, r3
 80003f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <fsmAuto+0x134>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4413      	add	r3, r2
 80003fe:	461a      	mov	r2, r3
 8000400:	481d      	ldr	r0, [pc, #116]	@ (8000478 <fsmAuto+0x148>)
 8000402:	f001 f85d 	bl	80014c0 <SCH_AddTask>
 8000406:	4603      	mov	r3, r0
 8000408:	461a      	mov	r2, r3
 800040a:	4b12      	ldr	r3, [pc, #72]	@ (8000454 <fsmAuto+0x124>)
 800040c:	719a      	strb	r2, [r3, #6]
	fsmAutoIDs[7] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <fsmAuto+0x134>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <fsmAuto+0x130>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	18d1      	adds	r1, r2, r3
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <fsmAuto+0x12c>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <fsmAuto+0x130>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	441a      	add	r2, r3
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <fsmAuto+0x134>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4413      	add	r3, r2
 8000428:	461a      	mov	r2, r3
 800042a:	4814      	ldr	r0, [pc, #80]	@ (800047c <fsmAuto+0x14c>)
 800042c:	f001 f848 	bl	80014c0 <SCH_AddTask>
 8000430:	4603      	mov	r3, r0
 8000432:	461a      	mov	r2, r3
 8000434:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <fsmAuto+0x124>)
 8000436:	71da      	strb	r2, [r3, #7]
	fsmAutoIDs[8] = SCH_AddTask(lcd_auto_display, 0, 1000);
 8000438:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800043c:	2100      	movs	r1, #0
 800043e:	4810      	ldr	r0, [pc, #64]	@ (8000480 <fsmAuto+0x150>)
 8000440:	f001 f83e 	bl	80014c0 <SCH_AddTask>
 8000444:	4603      	mov	r3, r0
 8000446:	461a      	mov	r2, r3
 8000448:	4b02      	ldr	r3, [pc, #8]	@ (8000454 <fsmAuto+0x124>)
 800044a:	721a      	strb	r2, [r3, #8]
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	08000325 	.word	0x08000325
 8000454:	200000d8 	.word	0x200000d8
 8000458:	080002ad 	.word	0x080002ad
 800045c:	20000034 	.word	0x20000034
 8000460:	2000003c 	.word	0x2000003c
 8000464:	20000038 	.word	0x20000038
 8000468:	08001e2d 	.word	0x08001e2d
 800046c:	08001e3d 	.word	0x08001e3d
 8000470:	08001e4d 	.word	0x08001e4d
 8000474:	08001e7d 	.word	0x08001e7d
 8000478:	08001e8d 	.word	0x08001e8d
 800047c:	08001e6d 	.word	0x08001e6d
 8000480:	08000d29 	.word	0x08000d29

08000484 <fsmManualStop>:

void fsmManualStop(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	SCH_AddTask(traffic0Off, 0, 0);
 8000488:	2200      	movs	r2, #0
 800048a:	2100      	movs	r1, #0
 800048c:	4804      	ldr	r0, [pc, #16]	@ (80004a0 <fsmManualStop+0x1c>)
 800048e:	f001 f817 	bl	80014c0 <SCH_AddTask>
	SCH_AddTask(traffic1Off, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	4803      	ldr	r0, [pc, #12]	@ (80004a4 <fsmManualStop+0x20>)
 8000498:	f001 f812 	bl	80014c0 <SCH_AddTask>
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	08001e1d 	.word	0x08001e1d
 80004a4:	08001e5d 	.word	0x08001e5d

080004a8 <fsmManualProcessing>:

void fsmManualProcessing(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff fedf 	bl	8000270 <buttonPressed>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d01d      	beq.n	80004f4 <fsmManualProcessing+0x4c>
		switch (trafficStates[0]) {
 80004b8:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <fsmManualProcessing+0x98>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b03      	cmp	r3, #3
 80004be:	d012      	beq.n	80004e6 <fsmManualProcessing+0x3e>
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	dc16      	bgt.n	80004f2 <fsmManualProcessing+0x4a>
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d002      	beq.n	80004ce <fsmManualProcessing+0x26>
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d006      	beq.n	80004da <fsmManualProcessing+0x32>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Red, 0, 0);
			break;
		default:
			break;
 80004cc:	e011      	b.n	80004f2 <fsmManualProcessing+0x4a>
			SCH_AddTask(traffic0Green, 0, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2100      	movs	r1, #0
 80004d2:	481c      	ldr	r0, [pc, #112]	@ (8000544 <fsmManualProcessing+0x9c>)
 80004d4:	f000 fff4 	bl	80014c0 <SCH_AddTask>
			break;
 80004d8:	e00c      	b.n	80004f4 <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Yellow, 0, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2100      	movs	r1, #0
 80004de:	481a      	ldr	r0, [pc, #104]	@ (8000548 <fsmManualProcessing+0xa0>)
 80004e0:	f000 ffee 	bl	80014c0 <SCH_AddTask>
			break;
 80004e4:	e006      	b.n	80004f4 <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Red, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	4818      	ldr	r0, [pc, #96]	@ (800054c <fsmManualProcessing+0xa4>)
 80004ec:	f000 ffe8 	bl	80014c0 <SCH_AddTask>
			break;
 80004f0:	e000      	b.n	80004f4 <fsmManualProcessing+0x4c>
			break;
 80004f2:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 80004f4:	2002      	movs	r0, #2
 80004f6:	f7ff febb 	bl	8000270 <buttonPressed>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d01d      	beq.n	800053c <fsmManualProcessing+0x94>
		switch (trafficStates[1]) {
 8000500:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <fsmManualProcessing+0x98>)
 8000502:	785b      	ldrb	r3, [r3, #1]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d012      	beq.n	800052e <fsmManualProcessing+0x86>
 8000508:	2b03      	cmp	r3, #3
 800050a:	dc16      	bgt.n	800053a <fsmManualProcessing+0x92>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d002      	beq.n	8000516 <fsmManualProcessing+0x6e>
 8000510:	2b02      	cmp	r3, #2
 8000512:	d006      	beq.n	8000522 <fsmManualProcessing+0x7a>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Red, 0, 0);
			break;
		default:
			break;
 8000514:	e011      	b.n	800053a <fsmManualProcessing+0x92>
			SCH_AddTask(traffic1Green, 0, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	480d      	ldr	r0, [pc, #52]	@ (8000550 <fsmManualProcessing+0xa8>)
 800051c:	f000 ffd0 	bl	80014c0 <SCH_AddTask>
			break;
 8000520:	e00c      	b.n	800053c <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Yellow, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	480b      	ldr	r0, [pc, #44]	@ (8000554 <fsmManualProcessing+0xac>)
 8000528:	f000 ffca 	bl	80014c0 <SCH_AddTask>
			break;
 800052c:	e006      	b.n	800053c <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Red, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	4809      	ldr	r0, [pc, #36]	@ (8000558 <fsmManualProcessing+0xb0>)
 8000534:	f000 ffc4 	bl	80014c0 <SCH_AddTask>
			break;
 8000538:	e000      	b.n	800053c <fsmManualProcessing+0x94>
			break;
 800053a:	bf00      	nop
		}
	}
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000368 	.word	0x20000368
 8000544:	08001e3d 	.word	0x08001e3d
 8000548:	08001e4d 	.word	0x08001e4d
 800054c:	08001e2d 	.word	0x08001e2d
 8000550:	08001e7d 	.word	0x08001e7d
 8000554:	08001e8d 	.word	0x08001e8d
 8000558:	08001e6d 	.word	0x08001e6d

0800055c <fsmManual>:

void fsmManual(void) {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	fsmManualIDs[0] = SCH_AddTask(fsmManualProcessing, 10, TIMER_TICK);
 8000560:	220a      	movs	r2, #10
 8000562:	210a      	movs	r1, #10
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <fsmManual+0x38>)
 8000566:	f000 ffab 	bl	80014c0 <SCH_AddTask>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <fsmManual+0x3c>)
 8000570:	701a      	strb	r2, [r3, #0]
	// Initialize for Manual Mode
	SCH_AddTask(traffic0Red, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	4809      	ldr	r0, [pc, #36]	@ (800059c <fsmManual+0x40>)
 8000578:	f000 ffa2 	bl	80014c0 <SCH_AddTask>
	SCH_AddTask(traffic1Green, 0, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <fsmManual+0x44>)
 8000582:	f000 ff9d 	bl	80014c0 <SCH_AddTask>
	SCH_AddTask(lcd_manual_display, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <fsmManual+0x48>)
 800058c:	f000 ff98 	bl	80014c0 <SCH_AddTask>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	080004a9 	.word	0x080004a9
 8000598:	200000e4 	.word	0x200000e4
 800059c:	08001e2d 	.word	0x08001e2d
 80005a0:	08001e7d 	.word	0x08001e7d
 80005a4:	08000d95 	.word	0x08000d95

080005a8 <fsmTunningStop>:

void fsmTunningStop(void) {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	return;
 80005ac:	bf00      	nop
}
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <fsmTunningProcessing>:

void fsmTunningProcessing(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
		if (buttonPressed(1)) {
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff fe59 	bl	8000270 <buttonPressed>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f000 80ba 	beq.w	800073a <fsmTunningProcessing+0x186>
			SCH_DeleteTask(fsmTunningIDs[1]);
 80005c6:	4bad      	ldr	r3, [pc, #692]	@ (800087c <fsmTunningProcessing+0x2c8>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f87e 	bl	80016cc <SCH_DeleteTask>
			SCH_DeleteTask(fsmTunningIDs[2]);
 80005d0:	4baa      	ldr	r3, [pc, #680]	@ (800087c <fsmTunningProcessing+0x2c8>)
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 f879 	bl	80016cc <SCH_DeleteTask>
			SCH_DeleteTask(fsmTunningIDs[3]);
 80005da:	4ba8      	ldr	r3, [pc, #672]	@ (800087c <fsmTunningProcessing+0x2c8>)
 80005dc:	78db      	ldrb	r3, [r3, #3]
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f874 	bl	80016cc <SCH_DeleteTask>
			SCH_DeleteTask(fsmTunningIDs[4]);
 80005e4:	4ba5      	ldr	r3, [pc, #660]	@ (800087c <fsmTunningProcessing+0x2c8>)
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 f86f 	bl	80016cc <SCH_DeleteTask>
			switch (fsmTunningState) {
 80005ee:	4ba4      	ldr	r3, [pc, #656]	@ (8000880 <fsmTunningProcessing+0x2cc>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	d06d      	beq.n	80006d2 <fsmTunningProcessing+0x11e>
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	f300 809e 	bgt.w	8000738 <fsmTunningProcessing+0x184>
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d002      	beq.n	8000606 <fsmTunningProcessing+0x52>
 8000600:	2b02      	cmp	r3, #2
 8000602:	d033      	beq.n	800066c <fsmTunningProcessing+0xb8>
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
					fsmTunningState = TRAFFIC_RED;
					break;
				default:
					break;
 8000604:	e098      	b.n	8000738 <fsmTunningProcessing+0x184>
					SCH_AddTask(lcd_tunning_green, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	489e      	ldr	r0, [pc, #632]	@ (8000884 <fsmTunningProcessing+0x2d0>)
 800060c:	f000 ff58 	bl	80014c0 <SCH_AddTask>
					fsmTunningIDs[1] = SCH_AddTask(traffic0Green, 0, 1000);
 8000610:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000614:	2100      	movs	r1, #0
 8000616:	489c      	ldr	r0, [pc, #624]	@ (8000888 <fsmTunningProcessing+0x2d4>)
 8000618:	f000 ff52 	bl	80014c0 <SCH_AddTask>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b96      	ldr	r3, [pc, #600]	@ (800087c <fsmTunningProcessing+0x2c8>)
 8000622:	705a      	strb	r2, [r3, #1]
					fsmTunningIDs[2] = SCH_AddTask(traffic1Green, 0, 1000);
 8000624:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000628:	2100      	movs	r1, #0
 800062a:	4898      	ldr	r0, [pc, #608]	@ (800088c <fsmTunningProcessing+0x2d8>)
 800062c:	f000 ff48 	bl	80014c0 <SCH_AddTask>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	4b91      	ldr	r3, [pc, #580]	@ (800087c <fsmTunningProcessing+0x2c8>)
 8000636:	709a      	strb	r2, [r3, #2]
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 8000638:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800063c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000640:	4893      	ldr	r0, [pc, #588]	@ (8000890 <fsmTunningProcessing+0x2dc>)
 8000642:	f000 ff3d 	bl	80014c0 <SCH_AddTask>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	4b8c      	ldr	r3, [pc, #560]	@ (800087c <fsmTunningProcessing+0x2c8>)
 800064c:	70da      	strb	r2, [r3, #3]
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 800064e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000652:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000656:	488f      	ldr	r0, [pc, #572]	@ (8000894 <fsmTunningProcessing+0x2e0>)
 8000658:	f000 ff32 	bl	80014c0 <SCH_AddTask>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b86      	ldr	r3, [pc, #536]	@ (800087c <fsmTunningProcessing+0x2c8>)
 8000662:	711a      	strb	r2, [r3, #4]
					fsmTunningState = TRAFFIC_GREEN;
 8000664:	4b86      	ldr	r3, [pc, #536]	@ (8000880 <fsmTunningProcessing+0x2cc>)
 8000666:	2202      	movs	r2, #2
 8000668:	701a      	strb	r2, [r3, #0]
					break;
 800066a:	e066      	b.n	800073a <fsmTunningProcessing+0x186>
					SCH_AddTask(lcd_tunning_yellow, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	4889      	ldr	r0, [pc, #548]	@ (8000898 <fsmTunningProcessing+0x2e4>)
 8000672:	f000 ff25 	bl	80014c0 <SCH_AddTask>
					fsmTunningIDs[1] = SCH_AddTask(traffic0Yellow, 0, 1000);
 8000676:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800067a:	2100      	movs	r1, #0
 800067c:	4887      	ldr	r0, [pc, #540]	@ (800089c <fsmTunningProcessing+0x2e8>)
 800067e:	f000 ff1f 	bl	80014c0 <SCH_AddTask>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b7d      	ldr	r3, [pc, #500]	@ (800087c <fsmTunningProcessing+0x2c8>)
 8000688:	705a      	strb	r2, [r3, #1]
					fsmTunningIDs[2] = SCH_AddTask(traffic1Yellow, 0, 1000);
 800068a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800068e:	2100      	movs	r1, #0
 8000690:	4883      	ldr	r0, [pc, #524]	@ (80008a0 <fsmTunningProcessing+0x2ec>)
 8000692:	f000 ff15 	bl	80014c0 <SCH_AddTask>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	4b78      	ldr	r3, [pc, #480]	@ (800087c <fsmTunningProcessing+0x2c8>)
 800069c:	709a      	strb	r2, [r3, #2]
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 800069e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006a2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006a6:	487a      	ldr	r0, [pc, #488]	@ (8000890 <fsmTunningProcessing+0x2dc>)
 80006a8:	f000 ff0a 	bl	80014c0 <SCH_AddTask>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b72      	ldr	r3, [pc, #456]	@ (800087c <fsmTunningProcessing+0x2c8>)
 80006b2:	70da      	strb	r2, [r3, #3]
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 80006b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006b8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006bc:	4875      	ldr	r0, [pc, #468]	@ (8000894 <fsmTunningProcessing+0x2e0>)
 80006be:	f000 feff 	bl	80014c0 <SCH_AddTask>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b6d      	ldr	r3, [pc, #436]	@ (800087c <fsmTunningProcessing+0x2c8>)
 80006c8:	711a      	strb	r2, [r3, #4]
					fsmTunningState = TRAFFIC_YELLOW;
 80006ca:	4b6d      	ldr	r3, [pc, #436]	@ (8000880 <fsmTunningProcessing+0x2cc>)
 80006cc:	2203      	movs	r2, #3
 80006ce:	701a      	strb	r2, [r3, #0]
					break;
 80006d0:	e033      	b.n	800073a <fsmTunningProcessing+0x186>
					SCH_AddTask(lcd_tunning_red, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	4873      	ldr	r0, [pc, #460]	@ (80008a4 <fsmTunningProcessing+0x2f0>)
 80006d8:	f000 fef2 	bl	80014c0 <SCH_AddTask>
					fsmTunningIDs[1] = SCH_AddTask(traffic0Red, 0, 1000);
 80006dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006e0:	2100      	movs	r1, #0
 80006e2:	4871      	ldr	r0, [pc, #452]	@ (80008a8 <fsmTunningProcessing+0x2f4>)
 80006e4:	f000 feec 	bl	80014c0 <SCH_AddTask>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b63      	ldr	r3, [pc, #396]	@ (800087c <fsmTunningProcessing+0x2c8>)
 80006ee:	705a      	strb	r2, [r3, #1]
					fsmTunningIDs[2] = SCH_AddTask(traffic1Red, 0, 1000);
 80006f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006f4:	2100      	movs	r1, #0
 80006f6:	486d      	ldr	r0, [pc, #436]	@ (80008ac <fsmTunningProcessing+0x2f8>)
 80006f8:	f000 fee2 	bl	80014c0 <SCH_AddTask>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b5e      	ldr	r3, [pc, #376]	@ (800087c <fsmTunningProcessing+0x2c8>)
 8000702:	709a      	strb	r2, [r3, #2]
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 8000704:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000708:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800070c:	4860      	ldr	r0, [pc, #384]	@ (8000890 <fsmTunningProcessing+0x2dc>)
 800070e:	f000 fed7 	bl	80014c0 <SCH_AddTask>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b59      	ldr	r3, [pc, #356]	@ (800087c <fsmTunningProcessing+0x2c8>)
 8000718:	70da      	strb	r2, [r3, #3]
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 800071a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800071e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000722:	485c      	ldr	r0, [pc, #368]	@ (8000894 <fsmTunningProcessing+0x2e0>)
 8000724:	f000 fecc 	bl	80014c0 <SCH_AddTask>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	4b53      	ldr	r3, [pc, #332]	@ (800087c <fsmTunningProcessing+0x2c8>)
 800072e:	711a      	strb	r2, [r3, #4]
					fsmTunningState = TRAFFIC_RED;
 8000730:	4b53      	ldr	r3, [pc, #332]	@ (8000880 <fsmTunningProcessing+0x2cc>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
					break;
 8000736:	e000      	b.n	800073a <fsmTunningProcessing+0x186>
					break;
 8000738:	bf00      	nop
			}
		}

		if (buttonPressed(2)) {
 800073a:	2002      	movs	r0, #2
 800073c:	f7ff fd98 	bl	8000270 <buttonPressed>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d050      	beq.n	80007e8 <fsmTunningProcessing+0x234>
			switch (fsmTunningState) {
 8000746:	4b4e      	ldr	r3, [pc, #312]	@ (8000880 <fsmTunningProcessing+0x2cc>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b03      	cmp	r3, #3
 800074c:	d034      	beq.n	80007b8 <fsmTunningProcessing+0x204>
 800074e:	2b03      	cmp	r3, #3
 8000750:	dc49      	bgt.n	80007e6 <fsmTunningProcessing+0x232>
 8000752:	2b01      	cmp	r3, #1
 8000754:	d002      	beq.n	800075c <fsmTunningProcessing+0x1a8>
 8000756:	2b02      	cmp	r3, #2
 8000758:	d017      	beq.n	800078a <fsmTunningProcessing+0x1d6>
						trafficYellowDuration = TRAFFIC_DURATION_MAX;
					}
					SCH_AddTask(lcd_tunning_yellow, 0, 0);
					break;
				default:
					break;
 800075a:	e044      	b.n	80007e6 <fsmTunningProcessing+0x232>
					if (trafficRedDuration < TRAFFIC_DURATION_MAX - TRAFFIC_DURATION_AUTO) {
 800075c:	4b54      	ldr	r3, [pc, #336]	@ (80008b0 <fsmTunningProcessing+0x2fc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f644 2237 	movw	r2, #18999	@ 0x4a37
 8000764:	4293      	cmp	r3, r2
 8000766:	d806      	bhi.n	8000776 <fsmTunningProcessing+0x1c2>
						trafficRedDuration += TRAFFIC_DURATION_AUTO;
 8000768:	4b51      	ldr	r3, [pc, #324]	@ (80008b0 <fsmTunningProcessing+0x2fc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000770:	4a4f      	ldr	r2, [pc, #316]	@ (80008b0 <fsmTunningProcessing+0x2fc>)
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	e003      	b.n	800077e <fsmTunningProcessing+0x1ca>
						trafficRedDuration = TRAFFIC_DURATION_MAX;
 8000776:	4b4e      	ldr	r3, [pc, #312]	@ (80008b0 <fsmTunningProcessing+0x2fc>)
 8000778:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800077c:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_red, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	4848      	ldr	r0, [pc, #288]	@ (80008a4 <fsmTunningProcessing+0x2f0>)
 8000784:	f000 fe9c 	bl	80014c0 <SCH_AddTask>
					break;
 8000788:	e02e      	b.n	80007e8 <fsmTunningProcessing+0x234>
					if (trafficGreenDuration < TRAFFIC_DURATION_MAX - TRAFFIC_DURATION_AUTO) {
 800078a:	4b4a      	ldr	r3, [pc, #296]	@ (80008b4 <fsmTunningProcessing+0x300>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f644 2237 	movw	r2, #18999	@ 0x4a37
 8000792:	4293      	cmp	r3, r2
 8000794:	d806      	bhi.n	80007a4 <fsmTunningProcessing+0x1f0>
						trafficGreenDuration += TRAFFIC_DURATION_AUTO;
 8000796:	4b47      	ldr	r3, [pc, #284]	@ (80008b4 <fsmTunningProcessing+0x300>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800079e:	4a45      	ldr	r2, [pc, #276]	@ (80008b4 <fsmTunningProcessing+0x300>)
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e003      	b.n	80007ac <fsmTunningProcessing+0x1f8>
						trafficGreenDuration = TRAFFIC_DURATION_MAX;
 80007a4:	4b43      	ldr	r3, [pc, #268]	@ (80008b4 <fsmTunningProcessing+0x300>)
 80007a6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80007aa:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_green, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	4834      	ldr	r0, [pc, #208]	@ (8000884 <fsmTunningProcessing+0x2d0>)
 80007b2:	f000 fe85 	bl	80014c0 <SCH_AddTask>
					break;
 80007b6:	e017      	b.n	80007e8 <fsmTunningProcessing+0x234>
					if (trafficYellowDuration < TRAFFIC_DURATION_MAX - TRAFFIC_DURATION_AUTO) {
 80007b8:	4b3f      	ldr	r3, [pc, #252]	@ (80008b8 <fsmTunningProcessing+0x304>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f644 2237 	movw	r2, #18999	@ 0x4a37
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d806      	bhi.n	80007d2 <fsmTunningProcessing+0x21e>
						trafficYellowDuration += TRAFFIC_DURATION_AUTO;
 80007c4:	4b3c      	ldr	r3, [pc, #240]	@ (80008b8 <fsmTunningProcessing+0x304>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80007cc:	4a3a      	ldr	r2, [pc, #232]	@ (80008b8 <fsmTunningProcessing+0x304>)
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	e003      	b.n	80007da <fsmTunningProcessing+0x226>
						trafficYellowDuration = TRAFFIC_DURATION_MAX;
 80007d2:	4b39      	ldr	r3, [pc, #228]	@ (80008b8 <fsmTunningProcessing+0x304>)
 80007d4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80007d8:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_yellow, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	482e      	ldr	r0, [pc, #184]	@ (8000898 <fsmTunningProcessing+0x2e4>)
 80007e0:	f000 fe6e 	bl	80014c0 <SCH_AddTask>
					break;
 80007e4:	e000      	b.n	80007e8 <fsmTunningProcessing+0x234>
					break;
 80007e6:	bf00      	nop
			}
		}

		if (buttonPressed(3)) {
 80007e8:	2003      	movs	r0, #3
 80007ea:	f7ff fd41 	bl	8000270 <buttonPressed>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d06e      	beq.n	80008d2 <fsmTunningProcessing+0x31e>
			switch (fsmTunningState) {
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <fsmTunningProcessing+0x2cc>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d032      	beq.n	8000862 <fsmTunningProcessing+0x2ae>
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	dc67      	bgt.n	80008d0 <fsmTunningProcessing+0x31c>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d002      	beq.n	800080a <fsmTunningProcessing+0x256>
 8000804:	2b02      	cmp	r3, #2
 8000806:	d016      	beq.n	8000836 <fsmTunningProcessing+0x282>
						trafficYellowDuration = TRAFFIC_DURATION_MIN;
					}
					SCH_AddTask(lcd_tunning_yellow, 0, 0);
					break;
				default:
					break;
 8000808:	e062      	b.n	80008d0 <fsmTunningProcessing+0x31c>
					if (trafficRedDuration > TRAFFIC_DURATION_MIN + TRAFFIC_DURATION_AUTO) {
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <fsmTunningProcessing+0x2fc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000812:	d906      	bls.n	8000822 <fsmTunningProcessing+0x26e>
						trafficRedDuration -= TRAFFIC_DURATION_AUTO;
 8000814:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <fsmTunningProcessing+0x2fc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800081c:	4a24      	ldr	r2, [pc, #144]	@ (80008b0 <fsmTunningProcessing+0x2fc>)
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	e003      	b.n	800082a <fsmTunningProcessing+0x276>
						trafficRedDuration = TRAFFIC_DURATION_MIN;
 8000822:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <fsmTunningProcessing+0x2fc>)
 8000824:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000828:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_red, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	481d      	ldr	r0, [pc, #116]	@ (80008a4 <fsmTunningProcessing+0x2f0>)
 8000830:	f000 fe46 	bl	80014c0 <SCH_AddTask>
					break;
 8000834:	e04d      	b.n	80008d2 <fsmTunningProcessing+0x31e>
					if (trafficGreenDuration > TRAFFIC_DURATION_MIN + TRAFFIC_DURATION_AUTO) {
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <fsmTunningProcessing+0x300>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800083e:	d906      	bls.n	800084e <fsmTunningProcessing+0x29a>
						trafficGreenDuration -= TRAFFIC_DURATION_AUTO;
 8000840:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <fsmTunningProcessing+0x300>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000848:	4a1a      	ldr	r2, [pc, #104]	@ (80008b4 <fsmTunningProcessing+0x300>)
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	e003      	b.n	8000856 <fsmTunningProcessing+0x2a2>
						trafficGreenDuration = TRAFFIC_DURATION_MIN;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <fsmTunningProcessing+0x300>)
 8000850:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000854:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_green, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	480a      	ldr	r0, [pc, #40]	@ (8000884 <fsmTunningProcessing+0x2d0>)
 800085c:	f000 fe30 	bl	80014c0 <SCH_AddTask>
					break;
 8000860:	e037      	b.n	80008d2 <fsmTunningProcessing+0x31e>
					if (trafficYellowDuration > TRAFFIC_DURATION_MIN + TRAFFIC_DURATION_AUTO) {
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <fsmTunningProcessing+0x304>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800086a:	d927      	bls.n	80008bc <fsmTunningProcessing+0x308>
						trafficYellowDuration -= TRAFFIC_DURATION_AUTO;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <fsmTunningProcessing+0x304>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000874:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <fsmTunningProcessing+0x304>)
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	e024      	b.n	80008c4 <fsmTunningProcessing+0x310>
 800087a:	bf00      	nop
 800087c:	200000e8 	.word	0x200000e8
 8000880:	200000d1 	.word	0x200000d1
 8000884:	08000e09 	.word	0x08000e09
 8000888:	08001e3d 	.word	0x08001e3d
 800088c:	08001e7d 	.word	0x08001e7d
 8000890:	08001e1d 	.word	0x08001e1d
 8000894:	08001e5d 	.word	0x08001e5d
 8000898:	08000e5d 	.word	0x08000e5d
 800089c:	08001e4d 	.word	0x08001e4d
 80008a0:	08001e8d 	.word	0x08001e8d
 80008a4:	08000db5 	.word	0x08000db5
 80008a8:	08001e2d 	.word	0x08001e2d
 80008ac:	08001e6d 	.word	0x08001e6d
 80008b0:	20000034 	.word	0x20000034
 80008b4:	20000038 	.word	0x20000038
 80008b8:	2000003c 	.word	0x2000003c
						trafficYellowDuration = TRAFFIC_DURATION_MIN;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <fsmTunningProcessing+0x324>)
 80008be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008c2:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_yellow, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <fsmTunningProcessing+0x328>)
 80008ca:	f000 fdf9 	bl	80014c0 <SCH_AddTask>
					break;
 80008ce:	e000      	b.n	80008d2 <fsmTunningProcessing+0x31e>
					break;
 80008d0:	bf00      	nop
				}
		}
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000003c 	.word	0x2000003c
 80008dc:	08000e5d 	.word	0x08000e5d

080008e0 <fsmTunning>:

void fsmTunning(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	fsmTunningIDs[0] = SCH_AddTask(fsmTunningProcessing, 10, TIMER_TICK);
 80008e4:	220a      	movs	r2, #10
 80008e6:	210a      	movs	r1, #10
 80008e8:	481d      	ldr	r0, [pc, #116]	@ (8000960 <fsmTunning+0x80>)
 80008ea:	f000 fde9 	bl	80014c0 <SCH_AddTask>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <fsmTunning+0x84>)
 80008f4:	701a      	strb	r2, [r3, #0]
	// Initialize for Tunning Mode
	fsmTunningState = TRAFFIC_RED;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <fsmTunning+0x88>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
	SCH_AddTask(lcd_tunning_red, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	481a      	ldr	r0, [pc, #104]	@ (800096c <fsmTunning+0x8c>)
 8000902:	f000 fddd 	bl	80014c0 <SCH_AddTask>
	fsmTunningIDs[1] = SCH_AddTask(traffic0Red, 0, 1000);
 8000906:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800090a:	2100      	movs	r1, #0
 800090c:	4818      	ldr	r0, [pc, #96]	@ (8000970 <fsmTunning+0x90>)
 800090e:	f000 fdd7 	bl	80014c0 <SCH_AddTask>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <fsmTunning+0x84>)
 8000918:	705a      	strb	r2, [r3, #1]
	fsmTunningIDs[2] = SCH_AddTask(traffic1Red, 0, 1000);
 800091a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800091e:	2100      	movs	r1, #0
 8000920:	4814      	ldr	r0, [pc, #80]	@ (8000974 <fsmTunning+0x94>)
 8000922:	f000 fdcd 	bl	80014c0 <SCH_AddTask>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <fsmTunning+0x84>)
 800092c:	709a      	strb	r2, [r3, #2]
	fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 800092e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000932:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000936:	4810      	ldr	r0, [pc, #64]	@ (8000978 <fsmTunning+0x98>)
 8000938:	f000 fdc2 	bl	80014c0 <SCH_AddTask>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <fsmTunning+0x84>)
 8000942:	70da      	strb	r2, [r3, #3]
	fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 8000944:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000948:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800094c:	480b      	ldr	r0, [pc, #44]	@ (800097c <fsmTunning+0x9c>)
 800094e:	f000 fdb7 	bl	80014c0 <SCH_AddTask>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <fsmTunning+0x84>)
 8000958:	711a      	strb	r2, [r3, #4]
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	080005b5 	.word	0x080005b5
 8000964:	200000e8 	.word	0x200000e8
 8000968:	200000d1 	.word	0x200000d1
 800096c:	08000db5 	.word	0x08000db5
 8000970:	08001e2d 	.word	0x08001e2d
 8000974:	08001e6d 	.word	0x08001e6d
 8000978:	08001e1d 	.word	0x08001e1d
 800097c:	08001e5d 	.word	0x08001e5d

08000980 <fsmInit>:

void fsmInit(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	fsmState = FSM_INIT;
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <fsmInit+0x18>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
	SCH_AddTask(lcd_init_display, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	4803      	ldr	r0, [pc, #12]	@ (800099c <fsmInit+0x1c>)
 8000990:	f000 fd96 	bl	80014c0 <SCH_AddTask>
//	fsmIDs[0] = SCH_AddTask(testLED, 0, 0);
//	SCH_AddTask(testButton, 0, TIMER_TICK);
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200000d0 	.word	0x200000d0
 800099c:	08000cf9 	.word	0x08000cf9

080009a0 <fsmProcessing>:

void fsmProcessing(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
	if (buttonPressed(0)) {
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fc62 	bl	8000270 <buttonPressed>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 8097 	beq.w	8000ae2 <fsmProcessing+0x142>
		switch (fsmState) {
 80009b4:	4b4d      	ldr	r3, [pc, #308]	@ (8000aec <fsmProcessing+0x14c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	f200 808f 	bhi.w	8000adc <fsmProcessing+0x13c>
 80009be:	a201      	add	r2, pc, #4	@ (adr r2, 80009c4 <fsmProcessing+0x24>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	08000a05 	.word	0x08000a05
 80009cc:	08000a3f 	.word	0x08000a3f
 80009d0:	08000a79 	.word	0x08000a79
			case FSM_INIT:
				for (uint8_t i = 0; i < FSM_TASK; i ++) {
 80009d4:	2300      	movs	r3, #0
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	e008      	b.n	80009ec <fsmProcessing+0x4c>
					SCH_DeleteTask(fsmIDs[i]);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4a44      	ldr	r2, [pc, #272]	@ (8000af0 <fsmProcessing+0x150>)
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fe73 	bl	80016cc <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_TASK; i ++) {
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	3301      	adds	r3, #1
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0f3      	beq.n	80009da <fsmProcessing+0x3a>
				}
				SCH_AddTask(fsmAuto, 10, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	210a      	movs	r1, #10
 80009f6:	483f      	ldr	r0, [pc, #252]	@ (8000af4 <fsmProcessing+0x154>)
 80009f8:	f000 fd62 	bl	80014c0 <SCH_AddTask>
				fsmState = FSM_AUTO;
 80009fc:	4b3b      	ldr	r3, [pc, #236]	@ (8000aec <fsmProcessing+0x14c>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
				break;
 8000a02:	e06e      	b.n	8000ae2 <fsmProcessing+0x142>
			case FSM_AUTO:
				for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000a04:	2300      	movs	r3, #0
 8000a06:	71bb      	strb	r3, [r7, #6]
 8000a08:	e008      	b.n	8000a1c <fsmProcessing+0x7c>
					SCH_DeleteTask(fsmAutoIDs[i]);
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8000af8 <fsmProcessing+0x158>)
 8000a0e:	5cd3      	ldrb	r3, [r2, r3]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fe5b 	bl	80016cc <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	71bb      	strb	r3, [r7, #6]
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	2b0a      	cmp	r3, #10
 8000a20:	d9f3      	bls.n	8000a0a <fsmProcessing+0x6a>
				}
				SCH_AddTask(fsmAutoStop, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	4835      	ldr	r0, [pc, #212]	@ (8000afc <fsmProcessing+0x15c>)
 8000a28:	f000 fd4a 	bl	80014c0 <SCH_AddTask>
				SCH_AddTask(fsmManual, 10, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	210a      	movs	r1, #10
 8000a30:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <fsmProcessing+0x160>)
 8000a32:	f000 fd45 	bl	80014c0 <SCH_AddTask>
				fsmState = FSM_MANUAL;
 8000a36:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <fsmProcessing+0x14c>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	701a      	strb	r2, [r3, #0]
				break;
 8000a3c:	e051      	b.n	8000ae2 <fsmProcessing+0x142>
			case FSM_MANUAL:
				for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	717b      	strb	r3, [r7, #5]
 8000a42:	e008      	b.n	8000a56 <fsmProcessing+0xb6>
					SCH_DeleteTask(fsmManualIDs[i]);
 8000a44:	797b      	ldrb	r3, [r7, #5]
 8000a46:	4a2f      	ldr	r2, [pc, #188]	@ (8000b04 <fsmProcessing+0x164>)
 8000a48:	5cd3      	ldrb	r3, [r2, r3]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fe3e 	bl	80016cc <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000a50:	797b      	ldrb	r3, [r7, #5]
 8000a52:	3301      	adds	r3, #1
 8000a54:	717b      	strb	r3, [r7, #5]
 8000a56:	797b      	ldrb	r3, [r7, #5]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d9f3      	bls.n	8000a44 <fsmProcessing+0xa4>
				}
				SCH_AddTask(fsmManualStop, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4829      	ldr	r0, [pc, #164]	@ (8000b08 <fsmProcessing+0x168>)
 8000a62:	f000 fd2d 	bl	80014c0 <SCH_AddTask>
				SCH_AddTask(fsmTunning, 10, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	210a      	movs	r1, #10
 8000a6a:	4828      	ldr	r0, [pc, #160]	@ (8000b0c <fsmProcessing+0x16c>)
 8000a6c:	f000 fd28 	bl	80014c0 <SCH_AddTask>
				fsmState = FSM_TUNNING;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <fsmProcessing+0x14c>)
 8000a72:	2203      	movs	r2, #3
 8000a74:	701a      	strb	r2, [r3, #0]
				break;
 8000a76:	e034      	b.n	8000ae2 <fsmProcessing+0x142>
			case FSM_TUNNING:
				for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	713b      	strb	r3, [r7, #4]
 8000a7c:	e008      	b.n	8000a90 <fsmProcessing+0xf0>
					SCH_DeleteTask(fsmTunningIDs[i]);
 8000a7e:	793b      	ldrb	r3, [r7, #4]
 8000a80:	4a23      	ldr	r2, [pc, #140]	@ (8000b10 <fsmProcessing+0x170>)
 8000a82:	5cd3      	ldrb	r3, [r2, r3]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fe21 	bl	80016cc <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000a8a:	793b      	ldrb	r3, [r7, #4]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	713b      	strb	r3, [r7, #4]
 8000a90:	793b      	ldrb	r3, [r7, #4]
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	d9f3      	bls.n	8000a7e <fsmProcessing+0xde>
				}
				SCH_AddTask(fsmTunningStop, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	481e      	ldr	r0, [pc, #120]	@ (8000b14 <fsmProcessing+0x174>)
 8000a9c:	f000 fd10 	bl	80014c0 <SCH_AddTask>
				SCH_AddTask(fsmAuto, 10, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	210a      	movs	r1, #10
 8000aa4:	4813      	ldr	r0, [pc, #76]	@ (8000af4 <fsmProcessing+0x154>)
 8000aa6:	f000 fd0b 	bl	80014c0 <SCH_AddTask>
				fsmState = FSM_AUTO;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <fsmProcessing+0x14c>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]

				// If the time between red, green, light isn't correct
				if (trafficRedDuration != (trafficGreenDuration + trafficYellowDuration)) {
 8000ab0:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <fsmProcessing+0x178>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <fsmProcessing+0x17c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	441a      	add	r2, r3
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <fsmProcessing+0x180>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d00e      	beq.n	8000ae0 <fsmProcessing+0x140>
					// Set it to default
					trafficRedDuration = 5000;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <fsmProcessing+0x180>)
 8000ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ac8:	601a      	str	r2, [r3, #0]
					trafficGreenDuration = 3000;
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <fsmProcessing+0x178>)
 8000acc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000ad0:	601a      	str	r2, [r3, #0]
					trafficYellowDuration = 2000;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <fsmProcessing+0x17c>)
 8000ad4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000ad8:	601a      	str	r2, [r3, #0]
				}
				break;
 8000ada:	e001      	b.n	8000ae0 <fsmProcessing+0x140>
			default:
				break;
 8000adc:	bf00      	nop
 8000ade:	e000      	b.n	8000ae2 <fsmProcessing+0x142>
				break;
 8000ae0:	bf00      	nop
		}
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000d0 	.word	0x200000d0
 8000af0:	200000d4 	.word	0x200000d4
 8000af4:	08000331 	.word	0x08000331
 8000af8:	200000d8 	.word	0x200000d8
 8000afc:	0800030d 	.word	0x0800030d
 8000b00:	0800055d 	.word	0x0800055d
 8000b04:	200000e4 	.word	0x200000e4
 8000b08:	08000485 	.word	0x08000485
 8000b0c:	080008e1 	.word	0x080008e1
 8000b10:	200000e8 	.word	0x200000e8
 8000b14:	080005a9 	.word	0x080005a9
 8000b18:	20000038 	.word	0x20000038
 8000b1c:	2000003c 	.word	0x2000003c
 8000b20:	20000034 	.word	0x20000034

08000b24 <LCD_I2C_Write_CMD>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define addr_pcf8574 0x21<<1

void LCD_I2C_Write_CMD(uint8_t cmd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];

    data_u = (cmd & 0xF0);
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f023 030f 	bic.w	r3, r3, #15
 8000b34:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_u | 0x0C;  // EN=1, RS=0
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	f043 030c 	orr.w	r3, r3, #12
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // EN=0, RS=0
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;  // EN=1, RS=0
 8000b50:	7bbb      	ldrb	r3, [r7, #14]
 8000b52:	f043 030c 	orr.w	r3, r3, #12
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // EN=0, RS=0
 8000b5a:	7bbb      	ldrb	r3, [r7, #14]
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, addr_pcf8574, data_t, 4, HAL_MAX_DELAY);
 8000b64:	f107 0208 	add.w	r2, r7, #8
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2304      	movs	r3, #4
 8000b70:	2142      	movs	r1, #66	@ 0x42
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <LCD_I2C_Write_CMD+0x5c>)
 8000b74:	f001 fe7e 	bl	8002874 <HAL_I2C_Master_Transmit>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000f0 	.word	0x200000f0

08000b84 <LCD_I2C_Write_DATA>:

void LCD_I2C_Write_DATA(uint8_t data)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];

    data_u = (data & 0xF0);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f023 030f 	bic.w	r3, r3, #15
 8000b94:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xF0);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_u | 0x0D;  // EN=1, RS=1
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	f043 030d 	orr.w	r3, r3, #13
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // EN=0, RS=1
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	f043 0309 	orr.w	r3, r3, #9
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  // EN=1, RS=1
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	f043 030d 	orr.w	r3, r3, #13
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // EN=0, RS=1
 8000bba:	7bbb      	ldrb	r3, [r7, #14]
 8000bbc:	f043 0309 	orr.w	r3, r3, #9
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, addr_pcf8574, data_t, 4, HAL_MAX_DELAY);
 8000bc4:	f107 0208 	add.w	r2, r7, #8
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2304      	movs	r3, #4
 8000bd0:	2142      	movs	r1, #66	@ 0x42
 8000bd2:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <LCD_I2C_Write_DATA+0x5c>)
 8000bd4:	f001 fe4e 	bl	8002874 <HAL_I2C_Master_Transmit>
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000f0 	.word	0x200000f0

08000be4 <LCD_I2C_Init>:
void LCD_I2C_Init()
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	LCD_I2C_Write_CMD(0x33);
 8000be8:	2033      	movs	r0, #51	@ 0x33
 8000bea:	f7ff ff9b 	bl	8000b24 <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x32);
 8000bee:	2032      	movs	r0, #50	@ 0x32
 8000bf0:	f7ff ff98 	bl	8000b24 <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000bf4:	2032      	movs	r0, #50	@ 0x32
 8000bf6:	f001 f9d9 	bl	8001fac <HAL_Delay>
	LCD_I2C_Write_CMD(0x28);
 8000bfa:	2028      	movs	r0, #40	@ 0x28
 8000bfc:	f7ff ff92 	bl	8000b24 <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c00:	2032      	movs	r0, #50	@ 0x32
 8000c02:	f001 f9d3 	bl	8001fac <HAL_Delay>
	LCD_I2C_Write_CMD(0x01);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff ff8c 	bl	8000b24 <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c0c:	2032      	movs	r0, #50	@ 0x32
 8000c0e:	f001 f9cd 	bl	8001fac <HAL_Delay>
	LCD_I2C_Write_CMD(0x06);
 8000c12:	2006      	movs	r0, #6
 8000c14:	f7ff ff86 	bl	8000b24 <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c18:	2032      	movs	r0, #50	@ 0x32
 8000c1a:	f001 f9c7 	bl	8001fac <HAL_Delay>
	LCD_I2C_Write_CMD(0x0C);
 8000c1e:	200c      	movs	r0, #12
 8000c20:	f7ff ff80 	bl	8000b24 <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c24:	2032      	movs	r0, #50	@ 0x32
 8000c26:	f001 f9c1 	bl	8001fac <HAL_Delay>
	LCD_I2C_Write_CMD (0x02); /* move cursor to home and set data address to 0 */
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f7ff ff7a 	bl	8000b24 <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c30:	2032      	movs	r0, #50	@ 0x32
 8000c32:	f001 f9bb 	bl	8001fac <HAL_Delay>
	LCD_I2C_Write_CMD (0x80);
 8000c36:	2080      	movs	r0, #128	@ 0x80
 8000c38:	f7ff ff74 	bl	8000b24 <LCD_I2C_Write_CMD>

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <LCD_I2C_Clear>:
void LCD_I2C_Clear()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	LCD_I2C_Write_CMD(0x01);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ff6d 	bl	8000b24 <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c4a:	2032      	movs	r0, #50	@ 0x32
 8000c4c:	f001 f9ae 	bl	8001fac <HAL_Delay>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <LCD_I2C_Location>:
void LCD_I2C_Location(uint8_t x, uint8_t y)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	4613      	mov	r3, r2
 8000c62:	71bb      	strb	r3, [r7, #6]
	if(x==0)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d106      	bne.n	8000c78 <LCD_I2C_Location+0x24>
	{
		LCD_I2C_Write_CMD(0x80+y);
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	3b80      	subs	r3, #128	@ 0x80
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff57 	bl	8000b24 <LCD_I2C_Write_CMD>
	}
	else if(x==1)
	{
		LCD_I2C_Write_CMD(0xC0+y);
	}
}
 8000c76:	e008      	b.n	8000c8a <LCD_I2C_Location+0x36>
	else if(x==1)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d105      	bne.n	8000c8a <LCD_I2C_Location+0x36>
		LCD_I2C_Write_CMD(0xC0+y);
 8000c7e:	79bb      	ldrb	r3, [r7, #6]
 8000c80:	3b40      	subs	r3, #64	@ 0x40
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff4d 	bl	8000b24 <LCD_I2C_Write_CMD>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <LCD_I2C_Write_String>:
void LCD_I2C_Write_String(char* string)
{
 8000c92:	b590      	push	{r4, r7, lr}
 8000c94:	b085      	sub	sp, #20
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<strlen(string); i++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e009      	b.n	8000cb4 <LCD_I2C_Write_String+0x22>
	{
		LCD_I2C_Write_DATA(string[i]);
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff6b 	bl	8000b84 <LCD_I2C_Write_DATA>
	for(uint8_t i=0;i<strlen(string); i++)
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	7bfc      	ldrb	r4, [r7, #15]
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fa48 	bl	800014c <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	429c      	cmp	r4, r3
 8000cc0:	d3ee      	bcc.n	8000ca0 <LCD_I2C_Write_String+0xe>
	}
}
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd90      	pop	{r4, r7, pc}

08000ccc <LCD_I2C_Write_Number>:
void LCD_I2C_Write_Number(int number)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	char buffer[8];
    sprintf(buffer,"%d",number);
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4906      	ldr	r1, [pc, #24]	@ (8000cf4 <LCD_I2C_Write_Number+0x28>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fa01 	bl	80040e4 <siprintf>
    LCD_I2C_Write_String(buffer);
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ffd3 	bl	8000c92 <LCD_I2C_Write_String>
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	08004a5c 	.word	0x08004a5c

08000cf8 <lcd_init_display>:

void lcd_init_display() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000cfc:	f7ff ffa0 	bl	8000c40 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 2);
 8000d00:	2102      	movs	r1, #2
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ffa6 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("TRAFFIC LIGHT");
 8000d08:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <lcd_init_display+0x28>)
 8000d0a:	f7ff ffc2 	bl	8000c92 <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 5);
 8000d0e:	2105      	movs	r1, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff ff9f 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("SYSTEM");
 8000d16:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <lcd_init_display+0x2c>)
 8000d18:	f7ff ffbb 	bl	8000c92 <LCD_I2C_Write_String>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	08004a60 	.word	0x08004a60
 8000d24:	08004a70 	.word	0x08004a70

08000d28 <lcd_auto_display>:

void lcd_auto_display() {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000d2c:	f7ff ff88 	bl	8000c40 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 0);
 8000d30:	2100      	movs	r1, #0
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff ff8e 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("TRAFFIC1: ");
 8000d38:	4812      	ldr	r0, [pc, #72]	@ (8000d84 <lcd_auto_display+0x5c>)
 8000d3a:	f7ff ffaa 	bl	8000c92 <LCD_I2C_Write_String>
	LCD_I2C_Location(0, 11);
 8000d3e:	210b      	movs	r1, #11
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ff87 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_Number(trafficCounters[0]/1000);
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <lcd_auto_display+0x60>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a10      	ldr	r2, [pc, #64]	@ (8000d8c <lcd_auto_display+0x64>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	099b      	lsrs	r3, r3, #6
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ffba 	bl	8000ccc <LCD_I2C_Write_Number>
	LCD_I2C_Location(1, 0);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff ff7a 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("TRAFFIC2: ");
 8000d60:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <lcd_auto_display+0x68>)
 8000d62:	f7ff ff96 	bl	8000c92 <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 11);
 8000d66:	210b      	movs	r1, #11
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ff73 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_Number(trafficCounters[1]/1000);
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <lcd_auto_display+0x60>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <lcd_auto_display+0x64>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	099b      	lsrs	r3, r3, #6
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ffa6 	bl	8000ccc <LCD_I2C_Write_Number>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	08004a78 	.word	0x08004a78
 8000d88:	2000036c 	.word	0x2000036c
 8000d8c:	10624dd3 	.word	0x10624dd3
 8000d90:	08004a84 	.word	0x08004a84

08000d94 <lcd_manual_display>:

void lcd_manual_display() {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000d98:	f7ff ff52 	bl	8000c40 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 0);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff ff58 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("MANUAL MODE");
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <lcd_manual_display+0x1c>)
 8000da6:	f7ff ff74 	bl	8000c92 <LCD_I2C_Write_String>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	08004a90 	.word	0x08004a90

08000db4 <lcd_tunning_red>:
	LCD_I2C_Clear();
	LCD_I2C_Location(0, 2);
	LCD_I2C_Write_String("TUNNING MODE");
}

void lcd_tunning_red() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000db8:	f7ff ff42 	bl	8000c40 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 0);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ff48 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("TUNNING MODE");
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <lcd_tunning_red+0x44>)
 8000dc6:	f7ff ff64 	bl	8000c92 <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 0);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff ff41 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("RED: ");
 8000dd2:	480a      	ldr	r0, [pc, #40]	@ (8000dfc <lcd_tunning_red+0x48>)
 8000dd4:	f7ff ff5d 	bl	8000c92 <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 6);
 8000dd8:	2106      	movs	r1, #6
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff ff3a 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_Number(trafficRedDuration / 1000);
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <lcd_tunning_red+0x4c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <lcd_tunning_red+0x50>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	099b      	lsrs	r3, r3, #6
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff6d 	bl	8000ccc <LCD_I2C_Write_Number>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	08004a9c 	.word	0x08004a9c
 8000dfc:	08004aac 	.word	0x08004aac
 8000e00:	20000034 	.word	0x20000034
 8000e04:	10624dd3 	.word	0x10624dd3

08000e08 <lcd_tunning_green>:
void lcd_tunning_green() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000e0c:	f7ff ff18 	bl	8000c40 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 0);
 8000e10:	2100      	movs	r1, #0
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff ff1e 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("TUNNING MODE");
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <lcd_tunning_green+0x44>)
 8000e1a:	f7ff ff3a 	bl	8000c92 <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff ff17 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("GREEN: ");
 8000e26:	480a      	ldr	r0, [pc, #40]	@ (8000e50 <lcd_tunning_green+0x48>)
 8000e28:	f7ff ff33 	bl	8000c92 <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 8);
 8000e2c:	2108      	movs	r1, #8
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f7ff ff10 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_Number(trafficGreenDuration/ 1000);
 8000e34:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <lcd_tunning_green+0x4c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	@ (8000e58 <lcd_tunning_green+0x50>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	099b      	lsrs	r3, r3, #6
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff43 	bl	8000ccc <LCD_I2C_Write_Number>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	08004a9c 	.word	0x08004a9c
 8000e50:	08004ab4 	.word	0x08004ab4
 8000e54:	20000038 	.word	0x20000038
 8000e58:	10624dd3 	.word	0x10624dd3

08000e5c <lcd_tunning_yellow>:
void lcd_tunning_yellow() {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000e60:	f7ff feee 	bl	8000c40 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 0);
 8000e64:	2100      	movs	r1, #0
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fef4 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("TUNNING MODE");
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <lcd_tunning_yellow+0x44>)
 8000e6e:	f7ff ff10 	bl	8000c92 <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 0);
 8000e72:	2100      	movs	r1, #0
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff feed 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_String("YELLOW: ");
 8000e7a:	480a      	ldr	r0, [pc, #40]	@ (8000ea4 <lcd_tunning_yellow+0x48>)
 8000e7c:	f7ff ff09 	bl	8000c92 <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 9);
 8000e80:	2109      	movs	r1, #9
 8000e82:	2001      	movs	r0, #1
 8000e84:	f7ff fee6 	bl	8000c54 <LCD_I2C_Location>
	LCD_I2C_Write_Number(trafficYellowDuration / 1000);
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <lcd_tunning_yellow+0x4c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <lcd_tunning_yellow+0x50>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	099b      	lsrs	r3, r3, #6
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff19 	bl	8000ccc <LCD_I2C_Write_Number>
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08004a9c 	.word	0x08004a9c
 8000ea4:	08004abc 	.word	0x08004abc
 8000ea8:	2000003c 	.word	0x2000003c
 8000eac:	10624dd3 	.word	0x10624dd3

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f001 f818 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f836 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f000 f91a 	bl	80010f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 f8ee 	bl	80010a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ec4:	f000 f8a0 	bl	8001008 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000ec8:	f000 f870 	bl	8000fac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ecc:	4810      	ldr	r0, [pc, #64]	@ (8000f10 <main+0x60>)
 8000ece:	f002 fc89 	bl	80037e4 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000ed2:	f000 fa6b 	bl	80013ac <SCH_Init>
//  LCD_I2C_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(testMCU, 0, 500);
 8000ed6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000eda:	2100      	movs	r1, #0
 8000edc:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <main+0x64>)
 8000ede:	f000 faef 	bl	80014c0 <SCH_AddTask>
  SCH_AddTask(buttonReading, 0, TIMER_TICK);
 8000ee2:	220a      	movs	r2, #10
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <main+0x68>)
 8000ee8:	f000 faea 	bl	80014c0 <SCH_AddTask>
  SCH_AddTask(fsmInit, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	480a      	ldr	r0, [pc, #40]	@ (8000f1c <main+0x6c>)
 8000ef2:	f000 fae5 	bl	80014c0 <SCH_AddTask>
  SCH_AddTask(LCD_I2C_Init, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <main+0x70>)
 8000efc:	f000 fae0 	bl	80014c0 <SCH_AddTask>
  SCH_AddTask(fsmProcessing, 10, TIMER_TICK);
 8000f00:	220a      	movs	r2, #10
 8000f02:	210a      	movs	r1, #10
 8000f04:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <main+0x74>)
 8000f06:	f000 fadb 	bl	80014c0 <SCH_AddTask>
  while (1)
  {
	  SCH_Dispatch();
 8000f0a:	f000 fabf 	bl	800148c <SCH_Dispatch>
 8000f0e:	e7fc      	b.n	8000f0a <main+0x5a>
 8000f10:	20000144 	.word	0x20000144
 8000f14:	08001d29 	.word	0x08001d29
 8000f18:	0800015d 	.word	0x0800015d
 8000f1c:	08000981 	.word	0x08000981
 8000f20:	08000be5 	.word	0x08000be5
 8000f24:	080009a1 	.word	0x080009a1

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b090      	sub	sp, #64	@ 0x40
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	2228      	movs	r2, #40	@ 0x28
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 f8f4 	bl	8004124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f52:	2310      	movs	r3, #16
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f5e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 ffdb 	bl	8002f24 <HAL_RCC_OscConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f74:	f000 f96b 	bl	800124e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f78:	230f      	movs	r3, #15
 8000f7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2102      	movs	r1, #2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fa48 	bl	8003428 <HAL_RCC_ClockConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f9e:	f000 f956 	bl	800124e <Error_Handler>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3740      	adds	r7, #64	@ 0x40
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fb2:	4a13      	ldr	r2, [pc, #76]	@ (8001000 <MX_I2C1_Init+0x54>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fb8:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <MX_I2C1_Init+0x58>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <MX_I2C1_Init+0x50>)
 8000fea:	f001 faff 	bl	80025ec <HAL_I2C_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff4:	f000 f92b 	bl	800124e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200000f0 	.word	0x200000f0
 8001000:	40005400 	.word	0x40005400
 8001004:	000186a0 	.word	0x000186a0

08001008 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101c:	463b      	mov	r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <MX_TIM2_Init+0x94>)
 8001026:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800102a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <MX_TIM2_Init+0x94>)
 800102e:	2209      	movs	r2, #9
 8001030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <MX_TIM2_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001038:	4b18      	ldr	r3, [pc, #96]	@ (800109c <MX_TIM2_Init+0x94>)
 800103a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800103e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	4b16      	ldr	r3, [pc, #88]	@ (800109c <MX_TIM2_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <MX_TIM2_Init+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800104c:	4813      	ldr	r0, [pc, #76]	@ (800109c <MX_TIM2_Init+0x94>)
 800104e:	f002 fb79 	bl	8003744 <HAL_TIM_Base_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001058:	f000 f8f9 	bl	800124e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	@ (800109c <MX_TIM2_Init+0x94>)
 800106a:	f002 fcfd 	bl	8003a68 <HAL_TIM_ConfigClockSource>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001074:	f000 f8eb 	bl	800124e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <MX_TIM2_Init+0x94>)
 8001086:	f002 fedf 	bl	8003e48 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001090:	f000 f8dd 	bl	800124e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000144 	.word	0x20000144

080010a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_USART2_UART_Init+0x4c>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <MX_USART2_UART_Init+0x50>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <MX_USART2_UART_Init+0x4c>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <MX_USART2_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <MX_USART2_UART_Init+0x4c>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <MX_USART2_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_USART2_UART_Init+0x4c>)
 80010d8:	f002 ff26 	bl	8003f28 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010e2:	f000 f8b4 	bl	800124e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000018c 	.word	0x2000018c
 80010f0:	40004400 	.word	0x40004400

080010f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001108:	4b44      	ldr	r3, [pc, #272]	@ (800121c <MX_GPIO_Init+0x128>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a43      	ldr	r2, [pc, #268]	@ (800121c <MX_GPIO_Init+0x128>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b41      	ldr	r3, [pc, #260]	@ (800121c <MX_GPIO_Init+0x128>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b3e      	ldr	r3, [pc, #248]	@ (800121c <MX_GPIO_Init+0x128>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a3d      	ldr	r2, [pc, #244]	@ (800121c <MX_GPIO_Init+0x128>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b3b      	ldr	r3, [pc, #236]	@ (800121c <MX_GPIO_Init+0x128>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b38      	ldr	r3, [pc, #224]	@ (800121c <MX_GPIO_Init+0x128>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a37      	ldr	r2, [pc, #220]	@ (800121c <MX_GPIO_Init+0x128>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b35      	ldr	r3, [pc, #212]	@ (800121c <MX_GPIO_Init+0x128>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b32      	ldr	r3, [pc, #200]	@ (800121c <MX_GPIO_Init+0x128>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a31      	ldr	r2, [pc, #196]	@ (800121c <MX_GPIO_Init+0x128>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <MX_GPIO_Init+0x128>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CONTROL_TRAFFIC0_0_Pin|CONTROL_TRAFFIC0_1_Pin|CONTROL_TRAFFIC1_0_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2133      	movs	r1, #51	@ 0x33
 800116c:	482c      	ldr	r0, [pc, #176]	@ (8001220 <MX_GPIO_Init+0x12c>)
 800116e:	f001 f9ea 	bl	8002546 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONTROL_TRAFFIC1_1_GPIO_Port, CONTROL_TRAFFIC1_1_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2101      	movs	r1, #1
 8001176:	482b      	ldr	r0, [pc, #172]	@ (8001224 <MX_GPIO_Init+0x130>)
 8001178:	f001 f9e5 	bl	8002546 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800117c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001182:	4b29      	ldr	r3, [pc, #164]	@ (8001228 <MX_GPIO_Init+0x134>)
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4619      	mov	r1, r3
 8001190:	4826      	ldr	r0, [pc, #152]	@ (800122c <MX_GPIO_Init+0x138>)
 8001192:	f001 f83d 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONTROL_TRAFFIC0_0_Pin CONTROL_TRAFFIC0_1_Pin CONTROL_TRAFFIC1_0_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = CONTROL_TRAFFIC0_0_Pin|CONTROL_TRAFFIC0_1_Pin|CONTROL_TRAFFIC1_0_Pin|LED_RED_Pin;
 8001196:	2333      	movs	r3, #51	@ 0x33
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	481c      	ldr	r0, [pc, #112]	@ (8001220 <MX_GPIO_Init+0x12c>)
 80011ae:	f001 f82f 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONTROL_TRAFFIC1_1_Pin */
  GPIO_InitStruct.Pin = CONTROL_TRAFFIC1_1_Pin;
 80011b2:	2301      	movs	r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CONTROL_TRAFFIC1_1_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4619      	mov	r1, r3
 80011c8:	4816      	ldr	r0, [pc, #88]	@ (8001224 <MX_GPIO_Init+0x130>)
 80011ca:	f001 f821 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin;
 80011ce:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	4810      	ldr	r0, [pc, #64]	@ (8001224 <MX_GPIO_Init+0x130>)
 80011e4:	f001 f814 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80011e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4808      	ldr	r0, [pc, #32]	@ (8001220 <MX_GPIO_Init+0x12c>)
 80011fe:	f001 f807 	bl	8002210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2028      	movs	r0, #40	@ 0x28
 8001208:	f000 ffcb 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800120c:	2028      	movs	r0, #40	@ 0x28
 800120e:	f000 ffe4 	bl	80021da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	40010800 	.word	0x40010800
 8001224:	40010c00 	.word	0x40010c00
 8001228:	10110000 	.word	0x10110000
 800122c:	40011000 	.word	0x40011000

08001230 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001240:	d101      	bne.n	8001246 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8001242:	f000 f8fd 	bl	8001440 <SCH_Update>
	}
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001252:	b672      	cpsid	i
}
 8001254:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001256:	bf00      	nop
 8001258:	e7fd      	b.n	8001256 <Error_Handler+0x8>
	...

0800125c <turnOffLed>:
static uint16_t controlTraffic0Pins[TRAFFIC_NUMBER] = {CONTROL_TRAFFIC0_0_Pin, CONTROL_TRAFFIC1_0_Pin};

static GPIO_TypeDef* controlTraffic1Ports[TRAFFIC_NUMBER] = {CONTROL_TRAFFIC0_1_GPIO_Port, CONTROL_TRAFFIC1_1_GPIO_Port};
static uint16_t controlTraffic1Pins[TRAFFIC_NUMBER] = {CONTROL_TRAFFIC0_1_Pin, CONTROL_TRAFFIC1_1_Pin};

void turnOffLed(uint8_t index) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_RESET);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <turnOffLed+0x44>)
 800126a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <turnOffLed+0x48>)
 8001272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001276:	2200      	movs	r2, #0
 8001278:	4619      	mov	r1, r3
 800127a:	f001 f964 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_RESET);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4a09      	ldr	r2, [pc, #36]	@ (80012a8 <turnOffLed+0x4c>)
 8001282:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <turnOffLed+0x50>)
 800128a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	f001 f958 	bl	8002546 <HAL_GPIO_WritePin>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000018 	.word	0x20000018
 80012a4:	20000020 	.word	0x20000020
 80012a8:	20000024 	.word	0x20000024
 80012ac:	2000002c 	.word	0x2000002c

080012b0 <turnOnRed>:
void turnOnRed(uint8_t index) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_SET);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <turnOnRed+0x44>)
 80012be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	4a0c      	ldr	r2, [pc, #48]	@ (80012f8 <turnOnRed+0x48>)
 80012c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ca:	2201      	movs	r2, #1
 80012cc:	4619      	mov	r1, r3
 80012ce:	f001 f93a 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_SET);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4a09      	ldr	r2, [pc, #36]	@ (80012fc <turnOnRed+0x4c>)
 80012d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <turnOnRed+0x50>)
 80012de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4619      	mov	r1, r3
 80012e6:	f001 f92e 	bl	8002546 <HAL_GPIO_WritePin>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000018 	.word	0x20000018
 80012f8:	20000020 	.word	0x20000020
 80012fc:	20000024 	.word	0x20000024
 8001300:	2000002c 	.word	0x2000002c

08001304 <turnOnGreen>:
void turnOnGreen(uint8_t index) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_SET);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4a0d      	ldr	r2, [pc, #52]	@ (8001348 <turnOnGreen+0x44>)
 8001312:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4a0c      	ldr	r2, [pc, #48]	@ (800134c <turnOnGreen+0x48>)
 800131a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131e:	2201      	movs	r2, #1
 8001320:	4619      	mov	r1, r3
 8001322:	f001 f910 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_RESET);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <turnOnGreen+0x4c>)
 800132a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <turnOnGreen+0x50>)
 8001332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	f001 f904 	bl	8002546 <HAL_GPIO_WritePin>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000018 	.word	0x20000018
 800134c:	20000020 	.word	0x20000020
 8001350:	20000024 	.word	0x20000024
 8001354:	2000002c 	.word	0x2000002c

08001358 <turnOnYellow>:
void turnOnYellow(uint8_t index) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_RESET);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4a0d      	ldr	r2, [pc, #52]	@ (800139c <turnOnYellow+0x44>)
 8001366:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <turnOnYellow+0x48>)
 800136e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	f001 f8e6 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_SET);
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <turnOnYellow+0x4c>)
 800137e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4a08      	ldr	r2, [pc, #32]	@ (80013a8 <turnOnYellow+0x50>)
 8001386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800138a:	2201      	movs	r2, #1
 800138c:	4619      	mov	r1, r3
 800138e:	f001 f8da 	bl	8002546 <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000018 	.word	0x20000018
 80013a0:	20000020 	.word	0x20000020
 80013a4:	20000024 	.word	0x20000024
 80013a8:	2000002c 	.word	0x2000002c

080013ac <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	e037      	b.n	8001428 <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 80013b8:	79fa      	ldrb	r2, [r7, #7]
 80013ba:	4920      	ldr	r1, [pc, #128]	@ (800143c <SCH_Init+0x90>)
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i;
 80013ca:	79fa      	ldrb	r2, [r7, #7]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f1c3 0314 	rsb	r3, r3, #20
 80013d2:	b2d8      	uxtb	r0, r3
 80013d4:	4919      	ldr	r1, [pc, #100]	@ (800143c <SCH_Init+0x90>)
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	3304      	adds	r3, #4
 80013e2:	4602      	mov	r2, r0
 80013e4:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	4914      	ldr	r1, [pc, #80]	@ (800143c <SCH_Init+0x90>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	3308      	adds	r3, #8
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 80013fa:	79fa      	ldrb	r2, [r7, #7]
 80013fc:	490f      	ldr	r1, [pc, #60]	@ (800143c <SCH_Init+0x90>)
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	330c      	adds	r3, #12
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	490a      	ldr	r1, [pc, #40]	@ (800143c <SCH_Init+0x90>)
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	3310      	adds	r3, #16
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	3301      	adds	r3, #1
 8001426:	71fb      	strb	r3, [r7, #7]
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b13      	cmp	r3, #19
 800142c:	d9c4      	bls.n	80013b8 <SCH_Init+0xc>
    }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	200001d4 	.word	0x200001d4

08001440 <SCH_Update>:

void SCH_Update(void) {
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 8001444:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <SCH_Update+0x48>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d018      	beq.n	800147e <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 800144c:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <SCH_Update+0x48>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <SCH_Update+0x2e>
		if (tasks[0].delay > TIMER_TICK) {
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <SCH_Update+0x48>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b0a      	cmp	r3, #10
 800145a:	d905      	bls.n	8001468 <SCH_Update+0x28>
			tasks[0].delay -= TIMER_TICK;
 800145c:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <SCH_Update+0x48>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	3b0a      	subs	r3, #10
 8001462:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <SCH_Update+0x48>)
 8001464:	6093      	str	r3, [r2, #8]
 8001466:	e002      	b.n	800146e <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 8001468:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <SCH_Update+0x48>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <SCH_Update+0x48>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d104      	bne.n	8001480 <SCH_Update+0x40>
		tasks[0].flag = 1;
 8001476:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <SCH_Update+0x48>)
 8001478:	2201      	movs	r2, #1
 800147a:	741a      	strb	r2, [r3, #16]
 800147c:	e000      	b.n	8001480 <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 800147e:	bf00      	nop
	}
}
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	200001d4 	.word	0x200001d4

0800148c <SCH_Dispatch>:

void SCH_Dispatch(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <SCH_Dispatch+0x30>)
 8001492:	7c1b      	ldrb	r3, [r3, #16]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00f      	beq.n	80014b8 <SCH_Dispatch+0x2c>
    (*tasks[0].functionPointer)();
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <SCH_Dispatch+0x30>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4798      	blx	r3
    if (tasks[0].period > 0) {
 800149e:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <SCH_Dispatch+0x30>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <SCH_Dispatch+0x20>
        SCH_RefreshTask();
 80014a6:	f000 f9af 	bl	8001808 <SCH_RefreshTask>
 80014aa:	e006      	b.n	80014ba <SCH_Dispatch+0x2e>
    }
    else {
        SCH_DeleteTask(tasks[0].id);
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <SCH_Dispatch+0x30>)
 80014ae:	791b      	ldrb	r3, [r3, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 f90b 	bl	80016cc <SCH_DeleteTask>
 80014b6:	e000      	b.n	80014ba <SCH_Dispatch+0x2e>
    if (tasks[0].flag == 0) return;
 80014b8:	bf00      	nop
    }
}
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200001d4 	.word	0x200001d4

080014c0 <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 80014c0:	b4b0      	push	{r4, r5, r7}
 80014c2:	b089      	sub	sp, #36	@ 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return 0;
 80014cc:	4b7e      	ldr	r3, [pc, #504]	@ (80016c8 <SCH_AddTask+0x208>)
 80014ce:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SCH_AddTask+0x1a>
 80014d6:	2300      	movs	r3, #0
 80014d8:	e0f1      	b.n	80016be <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 80014da:	4b7b      	ldr	r3, [pc, #492]	@ (80016c8 <SCH_AddTask+0x208>)
 80014dc:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80014e0:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	76fb      	strb	r3, [r7, #27]
 80014ea:	e0e3      	b.n	80016b4 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 80014ec:	7efa      	ldrb	r2, [r7, #27]
 80014ee:	4976      	ldr	r1, [pc, #472]	@ (80016c8 <SCH_AddTask+0x208>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	3308      	adds	r3, #8
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	4413      	add	r3, r2
 8001502:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	429a      	cmp	r2, r3
 800150a:	d80a      	bhi.n	8001522 <SCH_AddTask+0x62>
 800150c:	7efa      	ldrb	r2, [r7, #27]
 800150e:	496e      	ldr	r1, [pc, #440]	@ (80016c8 <SCH_AddTask+0x208>)
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 80c6 	bne.w	80016ae <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8001522:	2313      	movs	r3, #19
 8001524:	76bb      	strb	r3, [r7, #26]
 8001526:	e017      	b.n	8001558 <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 8001528:	7ebb      	ldrb	r3, [r7, #26]
 800152a:	1e5a      	subs	r2, r3, #1
 800152c:	7eb9      	ldrb	r1, [r7, #26]
 800152e:	4866      	ldr	r0, [pc, #408]	@ (80016c8 <SCH_AddTask+0x208>)
 8001530:	460b      	mov	r3, r1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4418      	add	r0, r3
 800153a:	4963      	ldr	r1, [pc, #396]	@ (80016c8 <SCH_AddTask+0x208>)
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	4604      	mov	r4, r0
 8001548:	461d      	mov	r5, r3
 800154a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154e:	682b      	ldr	r3, [r5, #0]
 8001550:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8001552:	7ebb      	ldrb	r3, [r7, #26]
 8001554:	3b01      	subs	r3, #1
 8001556:	76bb      	strb	r3, [r7, #26]
 8001558:	7eba      	ldrb	r2, [r7, #26]
 800155a:	7efb      	ldrb	r3, [r7, #27]
 800155c:	429a      	cmp	r2, r3
 800155e:	d8e3      	bhi.n	8001528 <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 8001560:	7efa      	ldrb	r2, [r7, #27]
 8001562:	4959      	ldr	r1, [pc, #356]	@ (80016c8 <SCH_AddTask+0x208>)
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 8001572:	7efa      	ldrb	r2, [r7, #27]
 8001574:	4954      	ldr	r1, [pc, #336]	@ (80016c8 <SCH_AddTask+0x208>)
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	3304      	adds	r3, #4
 8001582:	7e7a      	ldrb	r2, [r7, #25]
 8001584:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 8001586:	7efa      	ldrb	r2, [r7, #27]
 8001588:	494f      	ldr	r1, [pc, #316]	@ (80016c8 <SCH_AddTask+0x208>)
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	330c      	adds	r3, #12
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 800159a:	7efa      	ldrb	r2, [r7, #27]
 800159c:	494a      	ldr	r1, [pc, #296]	@ (80016c8 <SCH_AddTask+0x208>)
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	3310      	adds	r3, #16
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d950      	bls.n	8001658 <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 80015be:	7efb      	ldrb	r3, [r7, #27]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	4941      	ldr	r1, [pc, #260]	@ (80016c8 <SCH_AddTask+0x208>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3308      	adds	r3, #8
 80015d0:	6819      	ldr	r1, [r3, #0]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	7efa      	ldrb	r2, [r7, #27]
 80015d6:	1ac9      	subs	r1, r1, r3
 80015d8:	483b      	ldr	r0, [pc, #236]	@ (80016c8 <SCH_AddTask+0x208>)
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4403      	add	r3, r0
 80015e4:	3308      	adds	r3, #8
 80015e6:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 80015e8:	7efa      	ldrb	r2, [r7, #27]
 80015ea:	4937      	ldr	r1, [pc, #220]	@ (80016c8 <SCH_AddTask+0x208>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3308      	adds	r3, #8
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 80015fe:	7efa      	ldrb	r2, [r7, #27]
 8001600:	4931      	ldr	r1, [pc, #196]	@ (80016c8 <SCH_AddTask+0x208>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	3310      	adds	r3, #16
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8001612:	7efb      	ldrb	r3, [r7, #27]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	6979      	ldr	r1, [r7, #20]
 8001618:	482b      	ldr	r0, [pc, #172]	@ (80016c8 <SCH_AddTask+0x208>)
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4403      	add	r3, r0
 8001624:	3308      	adds	r3, #8
 8001626:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 8001628:	7efb      	ldrb	r3, [r7, #27]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	4926      	ldr	r1, [pc, #152]	@ (80016c8 <SCH_AddTask+0x208>)
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3308      	adds	r3, #8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d12c      	bne.n	800169a <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 8001640:	7efb      	ldrb	r3, [r7, #27]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	4920      	ldr	r1, [pc, #128]	@ (80016c8 <SCH_AddTask+0x208>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	3310      	adds	r3, #16
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e020      	b.n	800169a <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 8001658:	7efa      	ldrb	r2, [r7, #27]
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	1ac9      	subs	r1, r1, r3
 8001660:	4819      	ldr	r0, [pc, #100]	@ (80016c8 <SCH_AddTask+0x208>)
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4403      	add	r3, r0
 800166c:	3308      	adds	r3, #8
 800166e:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8001670:	7efa      	ldrb	r2, [r7, #27]
 8001672:	4915      	ldr	r1, [pc, #84]	@ (80016c8 <SCH_AddTask+0x208>)
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	3308      	adds	r3, #8
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 8001686:	7efa      	ldrb	r2, [r7, #27]
 8001688:	490f      	ldr	r1, [pc, #60]	@ (80016c8 <SCH_AddTask+0x208>)
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	3310      	adds	r3, #16
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 800169a:	7efa      	ldrb	r2, [r7, #27]
 800169c:	490a      	ldr	r1, [pc, #40]	@ (80016c8 <SCH_AddTask+0x208>)
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3304      	adds	r3, #4
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	e007      	b.n	80016be <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80016ae:	7efb      	ldrb	r3, [r7, #27]
 80016b0:	3301      	adds	r3, #1
 80016b2:	76fb      	strb	r3, [r7, #27]
 80016b4:	7efb      	ldrb	r3, [r7, #27]
 80016b6:	2b13      	cmp	r3, #19
 80016b8:	f67f af18 	bls.w	80014ec <SCH_AddTask+0x2c>
        }
    }
    return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bcb0      	pop	{r4, r5, r7}
 80016c6:	4770      	bx	lr
 80016c8:	200001d4 	.word	0x200001d4

080016cc <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 80016cc:	b4b0      	push	{r4, r5, r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e088      	b.n	80017ee <SCH_DeleteTask+0x122>
    	if (tasks[i].functionPointer == 0) return 0;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	4949      	ldr	r1, [pc, #292]	@ (8001804 <SCH_DeleteTask+0x138>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <SCH_DeleteTask+0x28>
 80016f0:	2300      	movs	r3, #0
 80016f2:	e081      	b.n	80017f8 <SCH_DeleteTask+0x12c>
        if (tasks[i].id == id) {
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	4943      	ldr	r1, [pc, #268]	@ (8001804 <SCH_DeleteTask+0x138>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	3304      	adds	r3, #4
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	429a      	cmp	r2, r3
 800170a:	d16d      	bne.n	80017e8 <SCH_DeleteTask+0x11c>
            uint8_t currentID = tasks[i].id;
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	493d      	ldr	r1, [pc, #244]	@ (8001804 <SCH_DeleteTask+0x138>)
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	3304      	adds	r3, #4
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	4937      	ldr	r1, [pc, #220]	@ (8001804 <SCH_DeleteTask+0x138>)
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01d      	beq.n	8001772 <SCH_DeleteTask+0xa6>
                tasks[i + 1].delay += tasks[i].delay;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	4932      	ldr	r1, [pc, #200]	@ (8001804 <SCH_DeleteTask+0x138>)
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	3308      	adds	r3, #8
 8001748:	6819      	ldr	r1, [r3, #0]
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	482d      	ldr	r0, [pc, #180]	@ (8001804 <SCH_DeleteTask+0x138>)
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4403      	add	r3, r0
 8001758:	3308      	adds	r3, #8
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	3201      	adds	r2, #1
 8001760:	4419      	add	r1, r3
 8001762:	4828      	ldr	r0, [pc, #160]	@ (8001804 <SCH_DeleteTask+0x138>)
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4403      	add	r3, r0
 800176e:	3308      	adds	r3, #8
 8001770:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	73bb      	strb	r3, [r7, #14]
 8001776:	e017      	b.n	80017a8 <SCH_DeleteTask+0xdc>
                tasks[j] = tasks[j + 1];
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	7bb9      	ldrb	r1, [r7, #14]
 800177e:	4821      	ldr	r0, [pc, #132]	@ (8001804 <SCH_DeleteTask+0x138>)
 8001780:	460b      	mov	r3, r1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4418      	add	r0, r3
 800178a:	491e      	ldr	r1, [pc, #120]	@ (8001804 <SCH_DeleteTask+0x138>)
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	4604      	mov	r4, r0
 8001798:	461d      	mov	r5, r3
 800179a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179e:	682b      	ldr	r3, [r5, #0]
 80017a0:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	3301      	adds	r3, #1
 80017a6:	73bb      	strb	r3, [r7, #14]
 80017a8:	7bbb      	ldrb	r3, [r7, #14]
 80017aa:	2b12      	cmp	r3, #18
 80017ac:	d9e4      	bls.n	8001778 <SCH_DeleteTask+0xac>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <SCH_DeleteTask+0x138>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 80017b6:	4a13      	ldr	r2, [pc, #76]	@ (8001804 <SCH_DeleteTask+0x138>)
 80017b8:	7b7b      	ldrb	r3, [r7, #13]
 80017ba:	f882 3180 	strb.w	r3, [r2, #384]	@ 0x180
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <SCH_DeleteTask+0x138>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            tasks[SCH_TASKNUMBER - 1].period = 0;
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <SCH_DeleteTask+0x138>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <SCH_DeleteTask+0x138>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <SCH_DeleteTask+0x138>)
 80017d8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf0c      	ite	eq
 80017e0:	2301      	moveq	r3, #1
 80017e2:	2300      	movne	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	e007      	b.n	80017f8 <SCH_DeleteTask+0x12c>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	3301      	adds	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b13      	cmp	r3, #19
 80017f2:	f67f af73 	bls.w	80016dc <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bcb0      	pop	{r4, r5, r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200001d4 	.word	0x200001d4

08001808 <SCH_RefreshTask>:

unsigned char SCH_RefreshTask(void) {
 8001808:	b4b0      	push	{r4, r5, r7}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return 0;
 800180e:	4b96      	ldr	r3, [pc, #600]	@ (8001a68 <SCH_RefreshTask+0x260>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <SCH_RefreshTask+0x12>
 8001816:	2300      	movs	r3, #0
 8001818:	e120      	b.n	8001a5c <SCH_RefreshTask+0x254>
    SCH_Task currentTask = tasks[0];
 800181a:	4b93      	ldr	r3, [pc, #588]	@ (8001a68 <SCH_RefreshTask+0x260>)
 800181c:	463c      	mov	r4, r7
 800181e:	461d      	mov	r5, r3
 8001820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	6023      	str	r3, [r4, #0]
    uint32_t currentDelay = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800182c:	2300      	movs	r3, #0
 800182e:	76fb      	strb	r3, [r7, #27]
 8001830:	e10f      	b.n	8001a52 <SCH_RefreshTask+0x24a>
        if (i + 1 == SCH_TASKNUMBER || tasks[i + 1].functionPointer == NULL) {
 8001832:	7efb      	ldrb	r3, [r7, #27]
 8001834:	2b13      	cmp	r3, #19
 8001836:	d00a      	beq.n	800184e <SCH_RefreshTask+0x46>
 8001838:	7efb      	ldrb	r3, [r7, #27]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	498a      	ldr	r1, [pc, #552]	@ (8001a68 <SCH_RefreshTask+0x260>)
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d14a      	bne.n	80018e4 <SCH_RefreshTask+0xdc>
            tasks[i].functionPointer = currentTask.functionPointer;
 800184e:	7efa      	ldrb	r2, [r7, #27]
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	4885      	ldr	r0, [pc, #532]	@ (8001a68 <SCH_RefreshTask+0x260>)
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4403      	add	r3, r0
 800185e:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8001860:	7efa      	ldrb	r2, [r7, #27]
 8001862:	7938      	ldrb	r0, [r7, #4]
 8001864:	4980      	ldr	r1, [pc, #512]	@ (8001a68 <SCH_RefreshTask+0x260>)
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3304      	adds	r3, #4
 8001872:	4602      	mov	r2, r0
 8001874:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 8001876:	7efa      	ldrb	r2, [r7, #27]
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	487b      	ldr	r0, [pc, #492]	@ (8001a68 <SCH_RefreshTask+0x260>)
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4403      	add	r3, r0
 8001886:	330c      	adds	r3, #12
 8001888:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 800188a:	7efa      	ldrb	r2, [r7, #27]
 800188c:	4976      	ldr	r1, [pc, #472]	@ (8001a68 <SCH_RefreshTask+0x260>)
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3310      	adds	r3, #16
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	7efa      	ldrb	r2, [r7, #27]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	1ac9      	subs	r1, r1, r3
 80018a6:	4870      	ldr	r0, [pc, #448]	@ (8001a68 <SCH_RefreshTask+0x260>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4403      	add	r3, r0
 80018b2:	3308      	adds	r3, #8
 80018b4:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 80018b6:	7efa      	ldrb	r2, [r7, #27]
 80018b8:	496b      	ldr	r1, [pc, #428]	@ (8001a68 <SCH_RefreshTask+0x260>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3308      	adds	r3, #8
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <SCH_RefreshTask+0xd8>
                tasks[i].flag = 1;
 80018cc:	7efa      	ldrb	r2, [r7, #27]
 80018ce:	4966      	ldr	r1, [pc, #408]	@ (8001a68 <SCH_RefreshTask+0x260>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3310      	adds	r3, #16
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0bb      	b.n	8001a5c <SCH_RefreshTask+0x254>
        }
        currentDelay += tasks[i + 1].delay;
 80018e4:	7efb      	ldrb	r3, [r7, #27]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	495f      	ldr	r1, [pc, #380]	@ (8001a68 <SCH_RefreshTask+0x260>)
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	3308      	adds	r3, #8
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	61fb      	str	r3, [r7, #28]
        if (currentDelay > currentTask.period) {
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	429a      	cmp	r2, r3
 8001904:	f240 808d 	bls.w	8001a22 <SCH_RefreshTask+0x21a>
            tasks[i].functionPointer = currentTask.functionPointer;
 8001908:	7efa      	ldrb	r2, [r7, #27]
 800190a:	6839      	ldr	r1, [r7, #0]
 800190c:	4856      	ldr	r0, [pc, #344]	@ (8001a68 <SCH_RefreshTask+0x260>)
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4403      	add	r3, r0
 8001918:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 800191a:	7efa      	ldrb	r2, [r7, #27]
 800191c:	7938      	ldrb	r0, [r7, #4]
 800191e:	4952      	ldr	r1, [pc, #328]	@ (8001a68 <SCH_RefreshTask+0x260>)
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	3304      	adds	r3, #4
 800192c:	4602      	mov	r2, r0
 800192e:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 8001930:	7efa      	ldrb	r2, [r7, #27]
 8001932:	68f9      	ldr	r1, [r7, #12]
 8001934:	484c      	ldr	r0, [pc, #304]	@ (8001a68 <SCH_RefreshTask+0x260>)
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4403      	add	r3, r0
 8001940:	330c      	adds	r3, #12
 8001942:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8001944:	7efa      	ldrb	r2, [r7, #27]
 8001946:	4948      	ldr	r1, [pc, #288]	@ (8001a68 <SCH_RefreshTask+0x260>)
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3310      	adds	r3, #16
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 8001960:	7efb      	ldrb	r3, [r7, #27]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	4940      	ldr	r1, [pc, #256]	@ (8001a68 <SCH_RefreshTask+0x260>)
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3308      	adds	r3, #8
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	7efa      	ldrb	r2, [r7, #27]
 8001978:	1ac9      	subs	r1, r1, r3
 800197a:	483b      	ldr	r0, [pc, #236]	@ (8001a68 <SCH_RefreshTask+0x260>)
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4403      	add	r3, r0
 8001986:	3308      	adds	r3, #8
 8001988:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 800198a:	7efa      	ldrb	r2, [r7, #27]
 800198c:	4936      	ldr	r1, [pc, #216]	@ (8001a68 <SCH_RefreshTask+0x260>)
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	3308      	adds	r3, #8
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <SCH_RefreshTask+0x1ac>
                tasks[i].flag = 1;
 80019a0:	7efa      	ldrb	r2, [r7, #27]
 80019a2:	4931      	ldr	r1, [pc, #196]	@ (8001a68 <SCH_RefreshTask+0x260>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	3310      	adds	r3, #16
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 80019b4:	7efb      	ldrb	r3, [r7, #27]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	492b      	ldr	r1, [pc, #172]	@ (8001a68 <SCH_RefreshTask+0x260>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	3308      	adds	r3, #8
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	7efa      	ldrb	r2, [r7, #27]
 80019ca:	4827      	ldr	r0, [pc, #156]	@ (8001a68 <SCH_RefreshTask+0x260>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4403      	add	r3, r0
 80019d6:	3308      	adds	r3, #8
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	7efa      	ldrb	r2, [r7, #27]
 80019dc:	3201      	adds	r2, #1
 80019de:	1ac9      	subs	r1, r1, r3
 80019e0:	4821      	ldr	r0, [pc, #132]	@ (8001a68 <SCH_RefreshTask+0x260>)
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4403      	add	r3, r0
 80019ec:	3308      	adds	r3, #8
 80019ee:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 80019f0:	7efb      	ldrb	r3, [r7, #27]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	491c      	ldr	r1, [pc, #112]	@ (8001a68 <SCH_RefreshTask+0x260>)
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	3308      	adds	r3, #8
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10a      	bne.n	8001a1e <SCH_RefreshTask+0x216>
                tasks[i + 1].flag = 1;
 8001a08:	7efb      	ldrb	r3, [r7, #27]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	4916      	ldr	r1, [pc, #88]	@ (8001a68 <SCH_RefreshTask+0x260>)
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	3310      	adds	r3, #16
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e01c      	b.n	8001a5c <SCH_RefreshTask+0x254>
        }
        else {
            tasks[i] = tasks[i + 1];
 8001a22:	7efb      	ldrb	r3, [r7, #27]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	7ef9      	ldrb	r1, [r7, #27]
 8001a28:	480f      	ldr	r0, [pc, #60]	@ (8001a68 <SCH_RefreshTask+0x260>)
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4418      	add	r0, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	@ (8001a68 <SCH_RefreshTask+0x260>)
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	4604      	mov	r4, r0
 8001a42:	461d      	mov	r5, r3
 8001a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001a4c:	7efb      	ldrb	r3, [r7, #27]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	76fb      	strb	r3, [r7, #27]
 8001a52:	7efb      	ldrb	r3, [r7, #27]
 8001a54:	2b13      	cmp	r3, #19
 8001a56:	f67f aeec 	bls.w	8001832 <SCH_RefreshTask+0x2a>
        }
    }
    return 0;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3724      	adds	r7, #36	@ 0x24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bcb0      	pop	{r4, r5, r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	200001d4 	.word	0x200001d4

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_MspInit+0x5c>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <HAL_MspInit+0x5c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6193      	str	r3, [r2, #24]
 8001a7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_MspInit+0x5c>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <HAL_MspInit+0x5c>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac8 <HAL_MspInit+0x5c>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <HAL_MspInit+0x5c>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <HAL_MspInit+0x60>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <HAL_MspInit+0x60>)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010000 	.word	0x40010000

08001ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1d      	ldr	r2, [pc, #116]	@ (8001b60 <HAL_I2C_MspInit+0x90>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d132      	bne.n	8001b56 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <HAL_I2C_MspInit+0x94>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b64 <HAL_I2C_MspInit+0x94>)
 8001af6:	f043 0308 	orr.w	r3, r3, #8
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_I2C_MspInit+0x94>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4812      	ldr	r0, [pc, #72]	@ (8001b68 <HAL_I2C_MspInit+0x98>)
 8001b1e:	f000 fb77 	bl	8002210 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_I2C_MspInit+0x9c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b38:	4a0c      	ldr	r2, [pc, #48]	@ (8001b6c <HAL_I2C_MspInit+0x9c>)
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_I2C_MspInit+0x94>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a08      	ldr	r2, [pc, #32]	@ (8001b64 <HAL_I2C_MspInit+0x94>)
 8001b44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_I2C_MspInit+0x94>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	@ 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40005400 	.word	0x40005400
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010c00 	.word	0x40010c00
 8001b6c:	40010000 	.word	0x40010000

08001b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b80:	d113      	bne.n	8001baa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x44>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x44>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x44>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	201c      	movs	r0, #28
 8001ba0:	f000 faff 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ba4:	201c      	movs	r0, #28
 8001ba6:	f000 fb18 	bl	80021da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a15      	ldr	r2, [pc, #84]	@ (8001c28 <HAL_UART_MspInit+0x70>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d123      	bne.n	8001c20 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_UART_MspInit+0x74>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <HAL_UART_MspInit+0x74>)
 8001bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be2:	61d3      	str	r3, [r2, #28]
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_UART_MspInit+0x74>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <HAL_UART_MspInit+0x74>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <HAL_UART_MspInit+0x74>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_UART_MspInit+0x74>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c08:	230c      	movs	r3, #12
 8001c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <HAL_UART_MspInit+0x78>)
 8001c1c:	f000 faf8 	bl	8002210 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c20:	bf00      	nop
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40004400 	.word	0x40004400
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010800 	.word	0x40010800

08001c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <NMI_Handler+0x4>

08001c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c84:	f000 f976 	bl	8001f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c90:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <TIM2_IRQHandler+0x10>)
 8001c92:	f001 fdf9 	bl	8003888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000144 	.word	0x20000144

08001ca0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ca4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ca8:	f000 fc7e 	bl	80025a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f002 fa28 	bl	8004134 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20005000 	.word	0x20005000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	20000364 	.word	0x20000364
 8001d18:	200004c0 	.word	0x200004c0

08001d1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <testMCU>:
 *  Created on: Nov 22, 2024
 *      Author: DELL
 */
#include "test_module.h"

void testMCU(void) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <testMCU+0x10>)
 8001d30:	f000 fc21 	bl	8002576 <HAL_GPIO_TogglePin>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40010800 	.word	0x40010800

08001d3c <trafficToggle>:
uint32_t trafficGreenDuration = 3000;
uint32_t trafficYellowDuration = 2000;
enum TRAFFIC_STATE trafficStates[TRAFFIC_NUMBER] = {};
uint32_t trafficCounters[TRAFFIC_NUMBER];

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	460a      	mov	r2, r1
 8001d46:	71fb      	strb	r3, [r7, #7]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8001d4c:	79bb      	ldrb	r3, [r7, #6]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d84c      	bhi.n	8001dec <trafficToggle+0xb0>
 8001d52:	a201      	add	r2, pc, #4	@ (adr r2, 8001d58 <trafficToggle+0x1c>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001d69 	.word	0x08001d69
 8001d5c:	08001d7b 	.word	0x08001d7b
 8001d60:	08001da1 	.word	0x08001da1
 8001d64:	08001dc7 	.word	0x08001dc7
	case TRAFFIC_OFF:
		turnOffLed(index);
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fa76 	bl	800125c <turnOffLed>
		trafficStates[index] = TRAFFIC_OFF;
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	4a24      	ldr	r2, [pc, #144]	@ (8001e04 <trafficToggle+0xc8>)
 8001d74:	2100      	movs	r1, #0
 8001d76:	54d1      	strb	r1, [r2, r3]
		break;
 8001d78:	e03f      	b.n	8001dfa <trafficToggle+0xbe>
	case TRAFFIC_RED:
		turnOnRed(index);
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fa97 	bl	80012b0 <turnOnRed>
		trafficStates[index] = TRAFFIC_RED;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	@ (8001e04 <trafficToggle+0xc8>)
 8001d86:	2101      	movs	r1, #1
 8001d88:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e08 <trafficToggle+0xcc>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d12e      	bne.n	8001df0 <trafficToggle+0xb4>
			trafficCounters[index] = trafficRedDuration;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <trafficToggle+0xd0>)
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	491d      	ldr	r1, [pc, #116]	@ (8001e10 <trafficToggle+0xd4>)
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001d9e:	e027      	b.n	8001df0 <trafficToggle+0xb4>
	case TRAFFIC_GREEN:
		turnOnGreen(index);
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff faae 	bl	8001304 <turnOnGreen>
		trafficStates[index] = TRAFFIC_GREEN;
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <trafficToggle+0xc8>)
 8001dac:	2102      	movs	r1, #2
 8001dae:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <trafficToggle+0xcc>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d11d      	bne.n	8001df4 <trafficToggle+0xb8>
			trafficCounters[index] = trafficGreenDuration;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	4a16      	ldr	r2, [pc, #88]	@ (8001e14 <trafficToggle+0xd8>)
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	4914      	ldr	r1, [pc, #80]	@ (8001e10 <trafficToggle+0xd4>)
 8001dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001dc4:	e016      	b.n	8001df4 <trafficToggle+0xb8>
	case TRAFFIC_YELLOW:
		turnOnYellow(index);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fac5 	bl	8001358 <turnOnYellow>
		trafficStates[index] = TRAFFIC_YELLOW;
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e04 <trafficToggle+0xc8>)
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <trafficToggle+0xcc>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d10c      	bne.n	8001df8 <trafficToggle+0xbc>
			trafficCounters[index] = trafficYellowDuration;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <trafficToggle+0xdc>)
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	490a      	ldr	r1, [pc, #40]	@ (8001e10 <trafficToggle+0xd4>)
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001dea:	e005      	b.n	8001df8 <trafficToggle+0xbc>
	default:
		break;
 8001dec:	bf00      	nop
 8001dee:	e004      	b.n	8001dfa <trafficToggle+0xbe>
		break;
 8001df0:	bf00      	nop
 8001df2:	e002      	b.n	8001dfa <trafficToggle+0xbe>
		break;
 8001df4:	bf00      	nop
 8001df6:	e000      	b.n	8001dfa <trafficToggle+0xbe>
		break;
 8001df8:	bf00      	nop
	}
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000368 	.word	0x20000368
 8001e08:	200000d0 	.word	0x200000d0
 8001e0c:	20000034 	.word	0x20000034
 8001e10:	2000036c 	.word	0x2000036c
 8001e14:	20000038 	.word	0x20000038
 8001e18:	2000003c 	.word	0x2000003c

08001e1c <traffic0Off>:

void traffic0Off(void) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_OFF);
 8001e20:	2100      	movs	r1, #0
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff ff8a 	bl	8001d3c <trafficToggle>
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <traffic0Red>:
void traffic0Red(void) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 8001e30:	2101      	movs	r1, #1
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff ff82 	bl	8001d3c <trafficToggle>
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <traffic0Green>:
void traffic0Green(void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 8001e40:	2102      	movs	r1, #2
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff ff7a 	bl	8001d3c <trafficToggle>
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <traffic0Yellow>:
void traffic0Yellow(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 8001e50:	2103      	movs	r1, #3
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff ff72 	bl	8001d3c <trafficToggle>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <traffic1Off>:

void traffic1Off(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_OFF);
 8001e60:	2100      	movs	r1, #0
 8001e62:	2001      	movs	r0, #1
 8001e64:	f7ff ff6a 	bl	8001d3c <trafficToggle>
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <traffic1Red>:
void traffic1Red(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 8001e70:	2101      	movs	r1, #1
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7ff ff62 	bl	8001d3c <trafficToggle>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <traffic1Green>:
void traffic1Green(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 8001e80:	2102      	movs	r1, #2
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff ff5a 	bl	8001d3c <trafficToggle>
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <traffic1Yellow>:
void traffic1Yellow(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 8001e90:	2103      	movs	r1, #3
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff ff52 	bl	8001d3c <trafficToggle>
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e9c:	f7ff ff3e 	bl	8001d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea0:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ea2:	490c      	ldr	r1, [pc, #48]	@ (8001ed4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a09      	ldr	r2, [pc, #36]	@ (8001edc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001eb8:	4c09      	ldr	r4, [pc, #36]	@ (8001ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f002 f93b 	bl	8004140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eca:	f7fe fff1 	bl	8000eb0 <main>
  bx lr
 8001ece:	4770      	bx	lr
  ldr r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001ed8:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 8001edc:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001ee0:	200004c0 	.word	0x200004c0

08001ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC1_2_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eec:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <HAL_Init+0x28>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	@ (8001f10 <HAL_Init+0x28>)
 8001ef2:	f043 0310 	orr.w	r3, r3, #16
 8001ef6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f000 f947 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f000 f808 	bl	8001f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f04:	f7ff fdb2 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40022000 	.word	0x40022000

08001f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_InitTick+0x54>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <HAL_InitTick+0x58>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f95f 	bl	80021f6 <HAL_SYSTICK_Config>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00e      	b.n	8001f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d80a      	bhi.n	8001f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f000 f927 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f54:	4a06      	ldr	r2, [pc, #24]	@ (8001f70 <HAL_InitTick+0x5c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000030 	.word	0x20000030
 8001f6c:	20000044 	.word	0x20000044
 8001f70:	20000040 	.word	0x20000040

08001f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <HAL_IncTick+0x1c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <HAL_IncTick+0x20>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a03      	ldr	r2, [pc, #12]	@ (8001f94 <HAL_IncTick+0x20>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	20000044 	.word	0x20000044
 8001f94:	20000374 	.word	0x20000374

08001f98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b02      	ldr	r3, [pc, #8]	@ (8001fa8 <HAL_GetTick+0x10>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	20000374 	.word	0x20000374

08001fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff fff0 	bl	8001f98 <HAL_GetTick>
 8001fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d005      	beq.n	8001fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <HAL_Delay+0x44>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fd2:	bf00      	nop
 8001fd4:	f7ff ffe0 	bl	8001f98 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d8f7      	bhi.n	8001fd4 <HAL_Delay+0x28>
  {
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000044 	.word	0x20000044

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4906      	ldr	r1, [pc, #24]	@ (800208c <__NVIC_EnableIRQ+0x34>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	@ (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	@ (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	@ 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	@ 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff90 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff2d 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff42 	bl	800203c <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff90 	bl	80020e4 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5f 	bl	8002090 <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff35 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffa2 	bl	8002148 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b08b      	sub	sp, #44	@ 0x2c
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	e169      	b.n	80024f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002224:	2201      	movs	r2, #1
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 8158 	bne.w	80024f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a9a      	ldr	r2, [pc, #616]	@ (80024b0 <HAL_GPIO_Init+0x2a0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d05e      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 800224c:	4a98      	ldr	r2, [pc, #608]	@ (80024b0 <HAL_GPIO_Init+0x2a0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d875      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 8002252:	4a98      	ldr	r2, [pc, #608]	@ (80024b4 <HAL_GPIO_Init+0x2a4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d058      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 8002258:	4a96      	ldr	r2, [pc, #600]	@ (80024b4 <HAL_GPIO_Init+0x2a4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d86f      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 800225e:	4a96      	ldr	r2, [pc, #600]	@ (80024b8 <HAL_GPIO_Init+0x2a8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d052      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 8002264:	4a94      	ldr	r2, [pc, #592]	@ (80024b8 <HAL_GPIO_Init+0x2a8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d869      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 800226a:	4a94      	ldr	r2, [pc, #592]	@ (80024bc <HAL_GPIO_Init+0x2ac>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d04c      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 8002270:	4a92      	ldr	r2, [pc, #584]	@ (80024bc <HAL_GPIO_Init+0x2ac>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d863      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 8002276:	4a92      	ldr	r2, [pc, #584]	@ (80024c0 <HAL_GPIO_Init+0x2b0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d046      	beq.n	800230a <HAL_GPIO_Init+0xfa>
 800227c:	4a90      	ldr	r2, [pc, #576]	@ (80024c0 <HAL_GPIO_Init+0x2b0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d85d      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 8002282:	2b12      	cmp	r3, #18
 8002284:	d82a      	bhi.n	80022dc <HAL_GPIO_Init+0xcc>
 8002286:	2b12      	cmp	r3, #18
 8002288:	d859      	bhi.n	800233e <HAL_GPIO_Init+0x12e>
 800228a:	a201      	add	r2, pc, #4	@ (adr r2, 8002290 <HAL_GPIO_Init+0x80>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	0800230b 	.word	0x0800230b
 8002294:	080022e5 	.word	0x080022e5
 8002298:	080022f7 	.word	0x080022f7
 800229c:	08002339 	.word	0x08002339
 80022a0:	0800233f 	.word	0x0800233f
 80022a4:	0800233f 	.word	0x0800233f
 80022a8:	0800233f 	.word	0x0800233f
 80022ac:	0800233f 	.word	0x0800233f
 80022b0:	0800233f 	.word	0x0800233f
 80022b4:	0800233f 	.word	0x0800233f
 80022b8:	0800233f 	.word	0x0800233f
 80022bc:	0800233f 	.word	0x0800233f
 80022c0:	0800233f 	.word	0x0800233f
 80022c4:	0800233f 	.word	0x0800233f
 80022c8:	0800233f 	.word	0x0800233f
 80022cc:	0800233f 	.word	0x0800233f
 80022d0:	0800233f 	.word	0x0800233f
 80022d4:	080022ed 	.word	0x080022ed
 80022d8:	08002301 	.word	0x08002301
 80022dc:	4a79      	ldr	r2, [pc, #484]	@ (80024c4 <HAL_GPIO_Init+0x2b4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022e2:	e02c      	b.n	800233e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	623b      	str	r3, [r7, #32]
          break;
 80022ea:	e029      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	3304      	adds	r3, #4
 80022f2:	623b      	str	r3, [r7, #32]
          break;
 80022f4:	e024      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	3308      	adds	r3, #8
 80022fc:	623b      	str	r3, [r7, #32]
          break;
 80022fe:	e01f      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	330c      	adds	r3, #12
 8002306:	623b      	str	r3, [r7, #32]
          break;
 8002308:	e01a      	b.n	8002340 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002312:	2304      	movs	r3, #4
 8002314:	623b      	str	r3, [r7, #32]
          break;
 8002316:	e013      	b.n	8002340 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002320:	2308      	movs	r3, #8
 8002322:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	611a      	str	r2, [r3, #16]
          break;
 800232a:	e009      	b.n	8002340 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800232c:	2308      	movs	r3, #8
 800232e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	615a      	str	r2, [r3, #20]
          break;
 8002336:	e003      	b.n	8002340 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
          break;
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x130>
          break;
 800233e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2bff      	cmp	r3, #255	@ 0xff
 8002344:	d801      	bhi.n	800234a <HAL_GPIO_Init+0x13a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	e001      	b.n	800234e <HAL_GPIO_Init+0x13e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2bff      	cmp	r3, #255	@ 0xff
 8002354:	d802      	bhi.n	800235c <HAL_GPIO_Init+0x14c>
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	e002      	b.n	8002362 <HAL_GPIO_Init+0x152>
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	3b08      	subs	r3, #8
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	210f      	movs	r1, #15
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	401a      	ands	r2, r3
 8002374:	6a39      	ldr	r1, [r7, #32]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	431a      	orrs	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 80b1 	beq.w	80024f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002390:	4b4d      	ldr	r3, [pc, #308]	@ (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a4c      	ldr	r2, [pc, #304]	@ (80024c8 <HAL_GPIO_Init+0x2b8>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b4a      	ldr	r3, [pc, #296]	@ (80024c8 <HAL_GPIO_Init+0x2b8>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023a8:	4a48      	ldr	r2, [pc, #288]	@ (80024cc <HAL_GPIO_Init+0x2bc>)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a40      	ldr	r2, [pc, #256]	@ (80024d0 <HAL_GPIO_Init+0x2c0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <HAL_GPIO_Init+0x1ec>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3f      	ldr	r2, [pc, #252]	@ (80024d4 <HAL_GPIO_Init+0x2c4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00d      	beq.n	80023f8 <HAL_GPIO_Init+0x1e8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3e      	ldr	r2, [pc, #248]	@ (80024d8 <HAL_GPIO_Init+0x2c8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <HAL_GPIO_Init+0x1e4>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3d      	ldr	r2, [pc, #244]	@ (80024dc <HAL_GPIO_Init+0x2cc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_GPIO_Init+0x1e0>
 80023ec:	2303      	movs	r3, #3
 80023ee:	e006      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023f0:	2304      	movs	r3, #4
 80023f2:	e004      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e002      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_GPIO_Init+0x1ee>
 80023fc:	2300      	movs	r3, #0
 80023fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002400:	f002 0203 	and.w	r2, r2, #3
 8002404:	0092      	lsls	r2, r2, #2
 8002406:	4093      	lsls	r3, r2
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800240e:	492f      	ldr	r1, [pc, #188]	@ (80024cc <HAL_GPIO_Init+0x2bc>)
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002428:	4b2d      	ldr	r3, [pc, #180]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	492c      	ldr	r1, [pc, #176]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002436:	4b2a      	ldr	r3, [pc, #168]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	43db      	mvns	r3, r3
 800243e:	4928      	ldr	r1, [pc, #160]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002440:	4013      	ands	r3, r2
 8002442:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d006      	beq.n	800245e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002450:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	4922      	ldr	r1, [pc, #136]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800245e:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	43db      	mvns	r3, r3
 8002466:	491e      	ldr	r1, [pc, #120]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002468:	4013      	ands	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002478:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4918      	ldr	r1, [pc, #96]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002486:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	43db      	mvns	r3, r3
 800248e:	4914      	ldr	r1, [pc, #80]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 8002490:	4013      	ands	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d021      	beq.n	80024e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024a0:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	490e      	ldr	r1, [pc, #56]	@ (80024e0 <HAL_GPIO_Init+0x2d0>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e021      	b.n	80024f2 <HAL_GPIO_Init+0x2e2>
 80024ae:	bf00      	nop
 80024b0:	10320000 	.word	0x10320000
 80024b4:	10310000 	.word	0x10310000
 80024b8:	10220000 	.word	0x10220000
 80024bc:	10210000 	.word	0x10210000
 80024c0:	10120000 	.word	0x10120000
 80024c4:	10110000 	.word	0x10110000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40010000 	.word	0x40010000
 80024d0:	40010800 	.word	0x40010800
 80024d4:	40010c00 	.word	0x40010c00
 80024d8:	40011000 	.word	0x40011000
 80024dc:	40011400 	.word	0x40011400
 80024e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_GPIO_Init+0x304>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	4909      	ldr	r1, [pc, #36]	@ (8002514 <HAL_GPIO_Init+0x304>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	3301      	adds	r3, #1
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	f47f ae8e 	bne.w	8002224 <HAL_GPIO_Init+0x14>
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	372c      	adds	r7, #44	@ 0x2c
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e001      	b.n	800253a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	807b      	strh	r3, [r7, #2]
 8002552:	4613      	mov	r3, r2
 8002554:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002556:	787b      	ldrb	r3, [r7, #1]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255c:	887a      	ldrh	r2, [r7, #2]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002562:	e003      	b.n	800256c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	041a      	lsls	r2, r3, #16
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	611a      	str	r2, [r3, #16]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002588:	887a      	ldrh	r2, [r7, #2]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	041a      	lsls	r2, r3, #16
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	43d9      	mvns	r1, r3
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	400b      	ands	r3, r1
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	611a      	str	r2, [r3, #16]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025b2:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025be:	4a05      	ldr	r2, [pc, #20]	@ (80025d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f806 	bl	80025d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40010400 	.word	0x40010400

080025d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e12b      	b.n	8002856 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff fa5c 	bl	8001ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	@ 0x24
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800263e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800264e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002650:	f001 f832 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 8002654:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a81      	ldr	r2, [pc, #516]	@ (8002860 <HAL_I2C_Init+0x274>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d807      	bhi.n	8002670 <HAL_I2C_Init+0x84>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a80      	ldr	r2, [pc, #512]	@ (8002864 <HAL_I2C_Init+0x278>)
 8002664:	4293      	cmp	r3, r2
 8002666:	bf94      	ite	ls
 8002668:	2301      	movls	r3, #1
 800266a:	2300      	movhi	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e006      	b.n	800267e <HAL_I2C_Init+0x92>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a7d      	ldr	r2, [pc, #500]	@ (8002868 <HAL_I2C_Init+0x27c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0e7      	b.n	8002856 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4a78      	ldr	r2, [pc, #480]	@ (800286c <HAL_I2C_Init+0x280>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9b      	lsrs	r3, r3, #18
 8002690:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002860 <HAL_I2C_Init+0x274>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d802      	bhi.n	80026c0 <HAL_I2C_Init+0xd4>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3301      	adds	r3, #1
 80026be:	e009      	b.n	80026d4 <HAL_I2C_Init+0xe8>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	4a69      	ldr	r2, [pc, #420]	@ (8002870 <HAL_I2C_Init+0x284>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	3301      	adds	r3, #1
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	430b      	orrs	r3, r1
 80026da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	495c      	ldr	r1, [pc, #368]	@ (8002860 <HAL_I2C_Init+0x274>)
 80026f0:	428b      	cmp	r3, r1
 80026f2:	d819      	bhi.n	8002728 <HAL_I2C_Init+0x13c>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e59      	subs	r1, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002702:	1c59      	adds	r1, r3, #1
 8002704:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002708:	400b      	ands	r3, r1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_I2C_Init+0x138>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e59      	subs	r1, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fbb1 f3f3 	udiv	r3, r1, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002722:	e051      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002724:	2304      	movs	r3, #4
 8002726:	e04f      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d111      	bne.n	8002754 <HAL_I2C_Init+0x168>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	440b      	add	r3, r1
 800273e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002742:	3301      	adds	r3, #1
 8002744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e012      	b.n	800277a <HAL_I2C_Init+0x18e>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e58      	subs	r0, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	0099      	lsls	r1, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	fbb0 f3f3 	udiv	r3, r0, r3
 800276a:	3301      	adds	r3, #1
 800276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Init+0x196>
 800277e:	2301      	movs	r3, #1
 8002780:	e022      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10e      	bne.n	80027a8 <HAL_I2C_Init+0x1bc>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e58      	subs	r0, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	440b      	add	r3, r1
 8002798:	fbb0 f3f3 	udiv	r3, r0, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027a6:	e00f      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	6809      	ldr	r1, [r1, #0]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6911      	ldr	r1, [r2, #16]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68d2      	ldr	r2, [r2, #12]
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	000186a0 	.word	0x000186a0
 8002864:	001e847f 	.word	0x001e847f
 8002868:	003d08ff 	.word	0x003d08ff
 800286c:	431bde83 	.word	0x431bde83
 8002870:	10624dd3 	.word	0x10624dd3

08002874 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	461a      	mov	r2, r3
 8002880:	460b      	mov	r3, r1
 8002882:	817b      	strh	r3, [r7, #10]
 8002884:	4613      	mov	r3, r2
 8002886:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff fb86 	bl	8001f98 <HAL_GetTick>
 800288c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	f040 80e0 	bne.w	8002a5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2319      	movs	r3, #25
 80028a2:	2201      	movs	r2, #1
 80028a4:	4970      	ldr	r1, [pc, #448]	@ (8002a68 <HAL_I2C_Master_Transmit+0x1f4>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f964 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
 80028b4:	e0d3      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_I2C_Master_Transmit+0x50>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e0cc      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d007      	beq.n	80028ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2221      	movs	r2, #33	@ 0x21
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2210      	movs	r2, #16
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	893a      	ldrh	r2, [r7, #8]
 800291a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a50      	ldr	r2, [pc, #320]	@ (8002a6c <HAL_I2C_Master_Transmit+0x1f8>)
 800292a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800292c:	8979      	ldrh	r1, [r7, #10]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f89c 	bl	8002a70 <I2C_MasterRequestWrite>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e08d      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002958:	e066      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	6a39      	ldr	r1, [r7, #32]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fa22 	bl	8002da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	2b04      	cmp	r3, #4
 8002970:	d107      	bne.n	8002982 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002980:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06b      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11b      	bne.n	80029fc <HAL_I2C_Master_Transmit+0x188>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	6a39      	ldr	r1, [r7, #32]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fa19 	bl	8002e38 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e01a      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d194      	bne.n	800295a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	00100002 	.word	0x00100002
 8002a6c:	ffff0000 	.word	0xffff0000

08002a70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d006      	beq.n	8002a9a <I2C_MasterRequestWrite+0x2a>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d003      	beq.n	8002a9a <I2C_MasterRequestWrite+0x2a>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a98:	d108      	bne.n	8002aac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e00b      	b.n	8002ac4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab0:	2b12      	cmp	r3, #18
 8002ab2:	d107      	bne.n	8002ac4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ac2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f84f 	bl	8002b74 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aea:	d103      	bne.n	8002af4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e035      	b.n	8002b64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b00:	d108      	bne.n	8002b14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b02:	897b      	ldrh	r3, [r7, #10]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	e01b      	b.n	8002b4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b14:	897b      	ldrh	r3, [r7, #10]
 8002b16:	11db      	asrs	r3, r3, #7
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 0306 	and.w	r3, r3, #6
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f063 030f 	orn	r3, r3, #15
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	490e      	ldr	r1, [pc, #56]	@ (8002b6c <I2C_MasterRequestWrite+0xfc>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f898 	bl	8002c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e010      	b.n	8002b64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4907      	ldr	r1, [pc, #28]	@ (8002b70 <I2C_MasterRequestWrite+0x100>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f888 	bl	8002c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	00010008 	.word	0x00010008
 8002b70:	00010002 	.word	0x00010002

08002b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b84:	e048      	b.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d044      	beq.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8e:	f7ff fa03 	bl	8001f98 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d302      	bcc.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d139      	bne.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10d      	bne.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	e00c      	b.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d116      	bne.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e023      	b.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	0c1b      	lsrs	r3, r3, #16
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d10d      	bne.n	8002c3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	43da      	mvns	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	e00c      	b.n	8002c58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	43da      	mvns	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d093      	beq.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c76:	e071      	b.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c86:	d123      	bne.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ca0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	f043 0204 	orr.w	r2, r3, #4
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e067      	b.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd6:	d041      	beq.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd8:	f7ff f95e 	bl	8001f98 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d302      	bcc.n	8002cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d136      	bne.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d10c      	bne.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	e00b      	b.n	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf14      	ite	ne
 8002d24:	2301      	movne	r3, #1
 8002d26:	2300      	moveq	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e021      	b.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	0c1b      	lsrs	r3, r3, #16
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10c      	bne.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4013      	ands	r3, r2
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e00b      	b.n	8002d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	43da      	mvns	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	bf14      	ite	ne
 8002d92:	2301      	movne	r3, #1
 8002d94:	2300      	moveq	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f47f af6d 	bne.w	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db4:	e034      	b.n	8002e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f886 	bl	8002ec8 <I2C_IsAcknowledgeFailed>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e034      	b.n	8002e30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d028      	beq.n	8002e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7ff f8e3 	bl	8001f98 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d11d      	bne.n	8002e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dee:	2b80      	cmp	r3, #128	@ 0x80
 8002df0:	d016      	beq.n	8002e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e007      	b.n	8002e30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e2a:	2b80      	cmp	r3, #128	@ 0x80
 8002e2c:	d1c3      	bne.n	8002db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e44:	e034      	b.n	8002eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f83e 	bl	8002ec8 <I2C_IsAcknowledgeFailed>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e034      	b.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d028      	beq.n	8002eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5e:	f7ff f89b 	bl	8001f98 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d302      	bcc.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11d      	bne.n	8002eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d016      	beq.n	8002eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e007      	b.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d1c3      	bne.n	8002e46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ede:	d11b      	bne.n	8002f18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ee8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	f043 0204 	orr.w	r2, r3, #4
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e272      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8087 	beq.w	8003052 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f44:	4b92      	ldr	r3, [pc, #584]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d00c      	beq.n	8002f6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f50:	4b8f      	ldr	r3, [pc, #572]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d112      	bne.n	8002f82 <HAL_RCC_OscConfig+0x5e>
 8002f5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f68:	d10b      	bne.n	8002f82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6a:	4b89      	ldr	r3, [pc, #548]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d06c      	beq.n	8003050 <HAL_RCC_OscConfig+0x12c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d168      	bne.n	8003050 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e24c      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x76>
 8002f8c:	4b80      	ldr	r3, [pc, #512]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a7f      	ldr	r2, [pc, #508]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	e02e      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x98>
 8002fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7a      	ldr	r2, [pc, #488]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b78      	ldr	r3, [pc, #480]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a77      	ldr	r2, [pc, #476]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e01d      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xbc>
 8002fc6:	4b72      	ldr	r3, [pc, #456]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a71      	ldr	r2, [pc, #452]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
 8002fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a6a      	ldr	r2, [pc, #424]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b68      	ldr	r3, [pc, #416]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a67      	ldr	r2, [pc, #412]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe ffca 	bl	8001f98 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe ffc6 	bl	8001f98 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	@ 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e200      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b5d      	ldr	r3, [pc, #372]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0xe4>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe ffb6 	bl	8001f98 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe ffb2 	bl	8001f98 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	@ 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1ec      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003042:	4b53      	ldr	r3, [pc, #332]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x10c>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d063      	beq.n	8003126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800305e:	4b4c      	ldr	r3, [pc, #304]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800306a:	4b49      	ldr	r3, [pc, #292]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b08      	cmp	r3, #8
 8003074:	d11c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x18c>
 8003076:	4b46      	ldr	r3, [pc, #280]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	4b43      	ldr	r3, [pc, #268]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x176>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e1c0      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309a:	4b3d      	ldr	r3, [pc, #244]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4939      	ldr	r1, [pc, #228]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	e03a      	b.n	8003126 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b8:	4b36      	ldr	r3, [pc, #216]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fe ff6b 	bl	8001f98 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c6:	f7fe ff67 	bl	8001f98 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1a1      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4927      	ldr	r1, [pc, #156]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
 80030f8:	e015      	b.n	8003126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fa:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe ff4a 	bl	8001f98 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003108:	f7fe ff46 	bl	8001f98 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e180      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03a      	beq.n	80031a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d019      	beq.n	800316e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313a:	4b17      	ldr	r3, [pc, #92]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003140:	f7fe ff2a 	bl	8001f98 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003148:	f7fe ff26 	bl	8001f98 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e160      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315a:	4b0d      	ldr	r3, [pc, #52]	@ (8003190 <HAL_RCC_OscConfig+0x26c>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003166:	2001      	movs	r0, #1
 8003168:	f000 face 	bl	8003708 <RCC_Delay>
 800316c:	e01c      	b.n	80031a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316e:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7fe ff10 	bl	8001f98 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317a:	e00f      	b.n	800319c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317c:	f7fe ff0c 	bl	8001f98 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d908      	bls.n	800319c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e146      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	42420000 	.word	0x42420000
 8003198:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319c:	4b92      	ldr	r3, [pc, #584]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e9      	bne.n	800317c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80a6 	beq.w	8003302 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ba:	4b8b      	ldr	r3, [pc, #556]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10d      	bne.n	80031e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	4b88      	ldr	r3, [pc, #544]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4a87      	ldr	r2, [pc, #540]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d0:	61d3      	str	r3, [r2, #28]
 80031d2:	4b85      	ldr	r3, [pc, #532]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b82      	ldr	r3, [pc, #520]	@ (80033ec <HAL_RCC_OscConfig+0x4c8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d118      	bne.n	8003220 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ee:	4b7f      	ldr	r3, [pc, #508]	@ (80033ec <HAL_RCC_OscConfig+0x4c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7e      	ldr	r2, [pc, #504]	@ (80033ec <HAL_RCC_OscConfig+0x4c8>)
 80031f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fa:	f7fe fecd 	bl	8001f98 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003202:	f7fe fec9 	bl	8001f98 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b64      	cmp	r3, #100	@ 0x64
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e103      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	4b75      	ldr	r3, [pc, #468]	@ (80033ec <HAL_RCC_OscConfig+0x4c8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x312>
 8003228:	4b6f      	ldr	r3, [pc, #444]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4a6e      	ldr	r2, [pc, #440]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6213      	str	r3, [r2, #32]
 8003234:	e02d      	b.n	8003292 <HAL_RCC_OscConfig+0x36e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x334>
 800323e:	4b6a      	ldr	r3, [pc, #424]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4a69      	ldr	r2, [pc, #420]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6213      	str	r3, [r2, #32]
 800324a:	4b67      	ldr	r3, [pc, #412]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a66      	ldr	r2, [pc, #408]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	6213      	str	r3, [r2, #32]
 8003256:	e01c      	b.n	8003292 <HAL_RCC_OscConfig+0x36e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b05      	cmp	r3, #5
 800325e:	d10c      	bne.n	800327a <HAL_RCC_OscConfig+0x356>
 8003260:	4b61      	ldr	r3, [pc, #388]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	4a60      	ldr	r2, [pc, #384]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6213      	str	r3, [r2, #32]
 800326c:	4b5e      	ldr	r3, [pc, #376]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4a5d      	ldr	r2, [pc, #372]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	e00b      	b.n	8003292 <HAL_RCC_OscConfig+0x36e>
 800327a:	4b5b      	ldr	r3, [pc, #364]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4a5a      	ldr	r2, [pc, #360]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6213      	str	r3, [r2, #32]
 8003286:	4b58      	ldr	r3, [pc, #352]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4a57      	ldr	r2, [pc, #348]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d015      	beq.n	80032c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329a:	f7fe fe7d 	bl	8001f98 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe fe79 	bl	8001f98 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0b1      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b8:	4b4b      	ldr	r3, [pc, #300]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ee      	beq.n	80032a2 <HAL_RCC_OscConfig+0x37e>
 80032c4:	e014      	b.n	80032f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fe fe67 	bl	8001f98 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fe fe63 	bl	8001f98 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e09b      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e4:	4b40      	ldr	r3, [pc, #256]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ee      	bne.n	80032ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f6:	4b3c      	ldr	r3, [pc, #240]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4a3b      	ldr	r2, [pc, #236]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003300:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8087 	beq.w	800341a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800330c:	4b36      	ldr	r3, [pc, #216]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b08      	cmp	r3, #8
 8003316:	d061      	beq.n	80033dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d146      	bne.n	80033ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003320:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <HAL_RCC_OscConfig+0x4cc>)
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fe fe37 	bl	8001f98 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe fe33 	bl	8001f98 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e06d      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003340:	4b29      	ldr	r3, [pc, #164]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003354:	d108      	bne.n	8003368 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003356:	4b24      	ldr	r3, [pc, #144]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4921      	ldr	r1, [pc, #132]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003368:	4b1f      	ldr	r3, [pc, #124]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a19      	ldr	r1, [r3, #32]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	430b      	orrs	r3, r1
 800337a:	491b      	ldr	r1, [pc, #108]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003380:	4b1b      	ldr	r3, [pc, #108]	@ (80033f0 <HAL_RCC_OscConfig+0x4cc>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7fe fe07 	bl	8001f98 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fe fe03 	bl	8001f98 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e03d      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a0:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x46a>
 80033ac:	e035      	b.n	800341a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ae:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <HAL_RCC_OscConfig+0x4cc>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fe fdf0 	bl	8001f98 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fe fdec 	bl	8001f98 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e026      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x498>
 80033da:	e01e      	b.n	800341a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e019      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000
 80033f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <HAL_RCC_OscConfig+0x500>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	429a      	cmp	r2, r3
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d001      	beq.n	800341a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000

08003428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0d0      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b6a      	ldr	r3, [pc, #424]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d910      	bls.n	800346c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b67      	ldr	r3, [pc, #412]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 0207 	bic.w	r2, r3, #7
 8003452:	4965      	ldr	r1, [pc, #404]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b63      	ldr	r3, [pc, #396]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0b8      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003484:	4b59      	ldr	r3, [pc, #356]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4a58      	ldr	r2, [pc, #352]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800348e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800349c:	4b53      	ldr	r3, [pc, #332]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a52      	ldr	r2, [pc, #328]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80034a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a8:	4b50      	ldr	r3, [pc, #320]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	494d      	ldr	r1, [pc, #308]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d040      	beq.n	8003548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	4b47      	ldr	r3, [pc, #284]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d115      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e07f      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e6:	4b41      	ldr	r3, [pc, #260]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e073      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f6:	4b3d      	ldr	r3, [pc, #244]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e06b      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003506:	4b39      	ldr	r3, [pc, #228]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4936      	ldr	r1, [pc, #216]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	4313      	orrs	r3, r2
 8003516:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003518:	f7fe fd3e 	bl	8001f98 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fe fd3a 	bl	8001f98 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e053      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	4b2d      	ldr	r3, [pc, #180]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 020c 	and.w	r2, r3, #12
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	429a      	cmp	r2, r3
 8003546:	d1eb      	bne.n	8003520 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003548:	4b27      	ldr	r3, [pc, #156]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d210      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b24      	ldr	r3, [pc, #144]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 0207 	bic.w	r2, r3, #7
 800355e:	4922      	ldr	r1, [pc, #136]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b20      	ldr	r3, [pc, #128]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e032      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003584:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4916      	ldr	r1, [pc, #88]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035a2:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	490e      	ldr	r1, [pc, #56]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b6:	f000 f821 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 80035ba:	4602      	mov	r2, r0
 80035bc:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	490a      	ldr	r1, [pc, #40]	@ (80035f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035c8:	5ccb      	ldrb	r3, [r1, r3]
 80035ca:	fa22 f303 	lsr.w	r3, r2, r3
 80035ce:	4a09      	ldr	r2, [pc, #36]	@ (80035f4 <HAL_RCC_ClockConfig+0x1cc>)
 80035d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035d2:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <HAL_RCC_ClockConfig+0x1d0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fc9c 	bl	8001f14 <HAL_InitTick>

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08004ac8 	.word	0x08004ac8
 80035f4:	20000030 	.word	0x20000030
 80035f8:	20000040 	.word	0x20000040

080035fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003616:	4b1e      	ldr	r3, [pc, #120]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x94>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b04      	cmp	r3, #4
 8003624:	d002      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x30>
 8003626:	2b08      	cmp	r3, #8
 8003628:	d003      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0x36>
 800362a:	e027      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800362c:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x98>)
 800362e:	613b      	str	r3, [r7, #16]
      break;
 8003630:	e027      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	0c9b      	lsrs	r3, r3, #18
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	4a17      	ldr	r2, [pc, #92]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x9c>)
 800363c:	5cd3      	ldrb	r3, [r2, r3]
 800363e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d010      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800364a:	4b11      	ldr	r3, [pc, #68]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x94>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	0c5b      	lsrs	r3, r3, #17
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	4a11      	ldr	r2, [pc, #68]	@ (800369c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003656:	5cd3      	ldrb	r3, [r2, r3]
 8003658:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a0d      	ldr	r2, [pc, #52]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x98>)
 800365e:	fb03 f202 	mul.w	r2, r3, r2
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e004      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a0c      	ldr	r2, [pc, #48]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	613b      	str	r3, [r7, #16]
      break;
 800367a:	e002      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b05      	ldr	r3, [pc, #20]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x98>)
 800367e:	613b      	str	r3, [r7, #16]
      break;
 8003680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003682:	693b      	ldr	r3, [r7, #16]
}
 8003684:	4618      	mov	r0, r3
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	007a1200 	.word	0x007a1200
 8003698:	08004ae0 	.word	0x08004ae0
 800369c:	08004af0 	.word	0x08004af0
 80036a0:	003d0900 	.word	0x003d0900

080036a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a8:	4b02      	ldr	r3, [pc, #8]	@ (80036b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	20000030 	.word	0x20000030

080036b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036bc:	f7ff fff2 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	@ (80036dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08004ad8 	.word	0x08004ad8

080036e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036e4:	f7ff ffde 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	0adb      	lsrs	r3, r3, #11
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4903      	ldr	r1, [pc, #12]	@ (8003704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	08004ad8 	.word	0x08004ad8

08003708 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003710:	4b0a      	ldr	r3, [pc, #40]	@ (800373c <RCC_Delay+0x34>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <RCC_Delay+0x38>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0a5b      	lsrs	r3, r3, #9
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003724:	bf00      	nop
  }
  while (Delay --);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	60fa      	str	r2, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <RCC_Delay+0x1c>
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	20000030 	.word	0x20000030
 8003740:	10624dd3 	.word	0x10624dd3

08003744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e041      	b.n	80037da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fa00 	bl	8001b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fa5c 	bl	8003c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e03a      	b.n	8003872 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a18      	ldr	r2, [pc, #96]	@ (800387c <HAL_TIM_Base_Start_IT+0x98>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x58>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003826:	d009      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x58>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a14      	ldr	r2, [pc, #80]	@ (8003880 <HAL_TIM_Base_Start_IT+0x9c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x58>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a13      	ldr	r2, [pc, #76]	@ (8003884 <HAL_TIM_Base_Start_IT+0xa0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d111      	bne.n	8003860 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b06      	cmp	r3, #6
 800384c:	d010      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385e:	e007      	b.n	8003870 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800

08003888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d020      	beq.n	80038ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01b      	beq.n	80038ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0202 	mvn.w	r2, #2
 80038bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f998 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f98b 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f99a 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d020      	beq.n	8003938 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01b      	beq.n	8003938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0204 	mvn.w	r2, #4
 8003908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f972 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 8003924:	e005      	b.n	8003932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f965 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f974 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d020      	beq.n	8003984 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01b      	beq.n	8003984 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0208 	mvn.w	r2, #8
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2204      	movs	r2, #4
 800395a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f94c 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 8003970:	e005      	b.n	800397e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f93f 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f94e 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	d020      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01b      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0210 	mvn.w	r2, #16
 80039a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2208      	movs	r2, #8
 80039a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f926 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 80039bc:	e005      	b.n	80039ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f919 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f928 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00c      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0201 	mvn.w	r2, #1
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fc1e 	bl	8001230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00c      	beq.n	8003a18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d007      	beq.n	8003a18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fa7f 	bl	8003f16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8f8 	bl	8003c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00c      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0220 	mvn.w	r2, #32
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa52 	bl	8003f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIM_ConfigClockSource+0x1c>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e0b4      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x186>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003abc:	d03e      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0xd4>
 8003abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac2:	f200 8087 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aca:	f000 8086 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x172>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad2:	d87f      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b70      	cmp	r3, #112	@ 0x70
 8003ad6:	d01a      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0xa6>
 8003ad8:	2b70      	cmp	r3, #112	@ 0x70
 8003ada:	d87b      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b60      	cmp	r3, #96	@ 0x60
 8003ade:	d050      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x11a>
 8003ae0:	2b60      	cmp	r3, #96	@ 0x60
 8003ae2:	d877      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae4:	2b50      	cmp	r3, #80	@ 0x50
 8003ae6:	d03c      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0xfa>
 8003ae8:	2b50      	cmp	r3, #80	@ 0x50
 8003aea:	d873      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003aec:	2b40      	cmp	r3, #64	@ 0x40
 8003aee:	d058      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x13a>
 8003af0:	2b40      	cmp	r3, #64	@ 0x40
 8003af2:	d86f      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003af4:	2b30      	cmp	r3, #48	@ 0x30
 8003af6:	d064      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003af8:	2b30      	cmp	r3, #48	@ 0x30
 8003afa:	d86b      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d060      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d867      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d05c      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d05a      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b0c:	e062      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b1e:	f000 f974 	bl	8003e0a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	609a      	str	r2, [r3, #8]
      break;
 8003b3a:	e04f      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b4c:	f000 f95d 	bl	8003e0a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b5e:	609a      	str	r2, [r3, #8]
      break;
 8003b60:	e03c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f000 f8d4 	bl	8003d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2150      	movs	r1, #80	@ 0x50
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f92b 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 8003b80:	e02c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f000 f8f2 	bl	8003d78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2160      	movs	r1, #96	@ 0x60
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f91b 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 8003ba0:	e01c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 f8b4 	bl	8003d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2140      	movs	r1, #64	@ 0x40
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f90b 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e00c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f000 f902 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 8003bd2:	e003      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd8:	e000      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
	...

08003c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a2f      	ldr	r2, [pc, #188]	@ (8003d10 <TIM_Base_SetConfig+0xd0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <TIM_Base_SetConfig+0x30>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5e:	d007      	beq.n	8003c70 <TIM_Base_SetConfig+0x30>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a2c      	ldr	r2, [pc, #176]	@ (8003d14 <TIM_Base_SetConfig+0xd4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_Base_SetConfig+0x30>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d18 <TIM_Base_SetConfig+0xd8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d108      	bne.n	8003c82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <TIM_Base_SetConfig+0xd0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00b      	beq.n	8003ca2 <TIM_Base_SetConfig+0x62>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c90:	d007      	beq.n	8003ca2 <TIM_Base_SetConfig+0x62>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a1f      	ldr	r2, [pc, #124]	@ (8003d14 <TIM_Base_SetConfig+0xd4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <TIM_Base_SetConfig+0x62>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d18 <TIM_Base_SetConfig+0xd8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d108      	bne.n	8003cb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a0d      	ldr	r2, [pc, #52]	@ (8003d10 <TIM_Base_SetConfig+0xd0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d103      	bne.n	8003ce8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f023 0201 	bic.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	611a      	str	r2, [r3, #16]
  }
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40000400 	.word	0x40000400
 8003d18:	40000800 	.word	0x40000800

08003d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f023 030a 	bic.w	r3, r3, #10
 8003d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f023 0210 	bic.w	r2, r3, #16
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	031b      	lsls	r3, r3, #12
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	621a      	str	r2, [r3, #32]
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f043 0307 	orr.w	r3, r3, #7
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b087      	sub	sp, #28
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	021a      	lsls	r2, r3, #8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	609a      	str	r2, [r3, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e046      	b.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eac:	d009      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a12      	ldr	r2, [pc, #72]	@ (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a10      	ldr	r2, [pc, #64]	@ (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10c      	bne.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40000800 	.word	0x40000800

08003f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e042      	b.n	8003fc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd fe32 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2224      	movs	r2, #36	@ 0x24
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f82b 	bl	8003fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004002:	f023 030c 	bic.w	r3, r3, #12
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	430b      	orrs	r3, r1
 800400e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2c      	ldr	r2, [pc, #176]	@ (80040dc <UART_SetConfig+0x114>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d103      	bne.n	8004038 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004030:	f7ff fb56 	bl	80036e0 <HAL_RCC_GetPCLK2Freq>
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	e002      	b.n	800403e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004038:	f7ff fb3e 	bl	80036b8 <HAL_RCC_GetPCLK1Freq>
 800403c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	009a      	lsls	r2, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	4a22      	ldr	r2, [pc, #136]	@ (80040e0 <UART_SetConfig+0x118>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	0119      	lsls	r1, r3, #4
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009a      	lsls	r2, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	fbb2 f2f3 	udiv	r2, r2, r3
 8004074:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <UART_SetConfig+0x118>)
 8004076:	fba3 0302 	umull	r0, r3, r3, r2
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2064      	movs	r0, #100	@ 0x64
 800407e:	fb00 f303 	mul.w	r3, r0, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	3332      	adds	r3, #50	@ 0x32
 8004088:	4a15      	ldr	r2, [pc, #84]	@ (80040e0 <UART_SetConfig+0x118>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004094:	4419      	add	r1, r3
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009a      	lsls	r2, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ac:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <UART_SetConfig+0x118>)
 80040ae:	fba3 0302 	umull	r0, r3, r3, r2
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	2064      	movs	r0, #100	@ 0x64
 80040b6:	fb00 f303 	mul.w	r3, r0, r3
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	3332      	adds	r3, #50	@ 0x32
 80040c0:	4a07      	ldr	r2, [pc, #28]	@ (80040e0 <UART_SetConfig+0x118>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	f003 020f 	and.w	r2, r3, #15
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	440a      	add	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40013800 	.word	0x40013800
 80040e0:	51eb851f 	.word	0x51eb851f

080040e4 <siprintf>:
 80040e4:	b40e      	push	{r1, r2, r3}
 80040e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80040ea:	b500      	push	{lr}
 80040ec:	b09c      	sub	sp, #112	@ 0x70
 80040ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80040f0:	9002      	str	r0, [sp, #8]
 80040f2:	9006      	str	r0, [sp, #24]
 80040f4:	9107      	str	r1, [sp, #28]
 80040f6:	9104      	str	r1, [sp, #16]
 80040f8:	4808      	ldr	r0, [pc, #32]	@ (800411c <siprintf+0x38>)
 80040fa:	4909      	ldr	r1, [pc, #36]	@ (8004120 <siprintf+0x3c>)
 80040fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004100:	9105      	str	r1, [sp, #20]
 8004102:	6800      	ldr	r0, [r0, #0]
 8004104:	a902      	add	r1, sp, #8
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	f000 f992 	bl	8004430 <_svfiprintf_r>
 800410c:	2200      	movs	r2, #0
 800410e:	9b02      	ldr	r3, [sp, #8]
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	b01c      	add	sp, #112	@ 0x70
 8004114:	f85d eb04 	ldr.w	lr, [sp], #4
 8004118:	b003      	add	sp, #12
 800411a:	4770      	bx	lr
 800411c:	20000048 	.word	0x20000048
 8004120:	ffff0208 	.word	0xffff0208

08004124 <memset>:
 8004124:	4603      	mov	r3, r0
 8004126:	4402      	add	r2, r0
 8004128:	4293      	cmp	r3, r2
 800412a:	d100      	bne.n	800412e <memset+0xa>
 800412c:	4770      	bx	lr
 800412e:	f803 1b01 	strb.w	r1, [r3], #1
 8004132:	e7f9      	b.n	8004128 <memset+0x4>

08004134 <__errno>:
 8004134:	4b01      	ldr	r3, [pc, #4]	@ (800413c <__errno+0x8>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000048 	.word	0x20000048

08004140 <__libc_init_array>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	2600      	movs	r6, #0
 8004144:	4d0c      	ldr	r5, [pc, #48]	@ (8004178 <__libc_init_array+0x38>)
 8004146:	4c0d      	ldr	r4, [pc, #52]	@ (800417c <__libc_init_array+0x3c>)
 8004148:	1b64      	subs	r4, r4, r5
 800414a:	10a4      	asrs	r4, r4, #2
 800414c:	42a6      	cmp	r6, r4
 800414e:	d109      	bne.n	8004164 <__libc_init_array+0x24>
 8004150:	f000 fc78 	bl	8004a44 <_init>
 8004154:	2600      	movs	r6, #0
 8004156:	4d0a      	ldr	r5, [pc, #40]	@ (8004180 <__libc_init_array+0x40>)
 8004158:	4c0a      	ldr	r4, [pc, #40]	@ (8004184 <__libc_init_array+0x44>)
 800415a:	1b64      	subs	r4, r4, r5
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	42a6      	cmp	r6, r4
 8004160:	d105      	bne.n	800416e <__libc_init_array+0x2e>
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	f855 3b04 	ldr.w	r3, [r5], #4
 8004168:	4798      	blx	r3
 800416a:	3601      	adds	r6, #1
 800416c:	e7ee      	b.n	800414c <__libc_init_array+0xc>
 800416e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004172:	4798      	blx	r3
 8004174:	3601      	adds	r6, #1
 8004176:	e7f2      	b.n	800415e <__libc_init_array+0x1e>
 8004178:	08004b30 	.word	0x08004b30
 800417c:	08004b30 	.word	0x08004b30
 8004180:	08004b30 	.word	0x08004b30
 8004184:	08004b34 	.word	0x08004b34

08004188 <__retarget_lock_acquire_recursive>:
 8004188:	4770      	bx	lr

0800418a <__retarget_lock_release_recursive>:
 800418a:	4770      	bx	lr

0800418c <_free_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4605      	mov	r5, r0
 8004190:	2900      	cmp	r1, #0
 8004192:	d040      	beq.n	8004216 <_free_r+0x8a>
 8004194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004198:	1f0c      	subs	r4, r1, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfb8      	it	lt
 800419e:	18e4      	addlt	r4, r4, r3
 80041a0:	f000 f8de 	bl	8004360 <__malloc_lock>
 80041a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004218 <_free_r+0x8c>)
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	b933      	cbnz	r3, 80041b8 <_free_r+0x2c>
 80041aa:	6063      	str	r3, [r4, #4]
 80041ac:	6014      	str	r4, [r2, #0]
 80041ae:	4628      	mov	r0, r5
 80041b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b4:	f000 b8da 	b.w	800436c <__malloc_unlock>
 80041b8:	42a3      	cmp	r3, r4
 80041ba:	d908      	bls.n	80041ce <_free_r+0x42>
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	1821      	adds	r1, r4, r0
 80041c0:	428b      	cmp	r3, r1
 80041c2:	bf01      	itttt	eq
 80041c4:	6819      	ldreq	r1, [r3, #0]
 80041c6:	685b      	ldreq	r3, [r3, #4]
 80041c8:	1809      	addeq	r1, r1, r0
 80041ca:	6021      	streq	r1, [r4, #0]
 80041cc:	e7ed      	b.n	80041aa <_free_r+0x1e>
 80041ce:	461a      	mov	r2, r3
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	b10b      	cbz	r3, 80041d8 <_free_r+0x4c>
 80041d4:	42a3      	cmp	r3, r4
 80041d6:	d9fa      	bls.n	80041ce <_free_r+0x42>
 80041d8:	6811      	ldr	r1, [r2, #0]
 80041da:	1850      	adds	r0, r2, r1
 80041dc:	42a0      	cmp	r0, r4
 80041de:	d10b      	bne.n	80041f8 <_free_r+0x6c>
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	4401      	add	r1, r0
 80041e4:	1850      	adds	r0, r2, r1
 80041e6:	4283      	cmp	r3, r0
 80041e8:	6011      	str	r1, [r2, #0]
 80041ea:	d1e0      	bne.n	80041ae <_free_r+0x22>
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4408      	add	r0, r1
 80041f2:	6010      	str	r0, [r2, #0]
 80041f4:	6053      	str	r3, [r2, #4]
 80041f6:	e7da      	b.n	80041ae <_free_r+0x22>
 80041f8:	d902      	bls.n	8004200 <_free_r+0x74>
 80041fa:	230c      	movs	r3, #12
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	e7d6      	b.n	80041ae <_free_r+0x22>
 8004200:	6820      	ldr	r0, [r4, #0]
 8004202:	1821      	adds	r1, r4, r0
 8004204:	428b      	cmp	r3, r1
 8004206:	bf01      	itttt	eq
 8004208:	6819      	ldreq	r1, [r3, #0]
 800420a:	685b      	ldreq	r3, [r3, #4]
 800420c:	1809      	addeq	r1, r1, r0
 800420e:	6021      	streq	r1, [r4, #0]
 8004210:	6063      	str	r3, [r4, #4]
 8004212:	6054      	str	r4, [r2, #4]
 8004214:	e7cb      	b.n	80041ae <_free_r+0x22>
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	200004bc 	.word	0x200004bc

0800421c <sbrk_aligned>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4e0f      	ldr	r6, [pc, #60]	@ (800425c <sbrk_aligned+0x40>)
 8004220:	460c      	mov	r4, r1
 8004222:	6831      	ldr	r1, [r6, #0]
 8004224:	4605      	mov	r5, r0
 8004226:	b911      	cbnz	r1, 800422e <sbrk_aligned+0x12>
 8004228:	f000 fbaa 	bl	8004980 <_sbrk_r>
 800422c:	6030      	str	r0, [r6, #0]
 800422e:	4621      	mov	r1, r4
 8004230:	4628      	mov	r0, r5
 8004232:	f000 fba5 	bl	8004980 <_sbrk_r>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d103      	bne.n	8004242 <sbrk_aligned+0x26>
 800423a:	f04f 34ff 	mov.w	r4, #4294967295
 800423e:	4620      	mov	r0, r4
 8004240:	bd70      	pop	{r4, r5, r6, pc}
 8004242:	1cc4      	adds	r4, r0, #3
 8004244:	f024 0403 	bic.w	r4, r4, #3
 8004248:	42a0      	cmp	r0, r4
 800424a:	d0f8      	beq.n	800423e <sbrk_aligned+0x22>
 800424c:	1a21      	subs	r1, r4, r0
 800424e:	4628      	mov	r0, r5
 8004250:	f000 fb96 	bl	8004980 <_sbrk_r>
 8004254:	3001      	adds	r0, #1
 8004256:	d1f2      	bne.n	800423e <sbrk_aligned+0x22>
 8004258:	e7ef      	b.n	800423a <sbrk_aligned+0x1e>
 800425a:	bf00      	nop
 800425c:	200004b8 	.word	0x200004b8

08004260 <_malloc_r>:
 8004260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004264:	1ccd      	adds	r5, r1, #3
 8004266:	f025 0503 	bic.w	r5, r5, #3
 800426a:	3508      	adds	r5, #8
 800426c:	2d0c      	cmp	r5, #12
 800426e:	bf38      	it	cc
 8004270:	250c      	movcc	r5, #12
 8004272:	2d00      	cmp	r5, #0
 8004274:	4606      	mov	r6, r0
 8004276:	db01      	blt.n	800427c <_malloc_r+0x1c>
 8004278:	42a9      	cmp	r1, r5
 800427a:	d904      	bls.n	8004286 <_malloc_r+0x26>
 800427c:	230c      	movs	r3, #12
 800427e:	6033      	str	r3, [r6, #0]
 8004280:	2000      	movs	r0, #0
 8004282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800435c <_malloc_r+0xfc>
 800428a:	f000 f869 	bl	8004360 <__malloc_lock>
 800428e:	f8d8 3000 	ldr.w	r3, [r8]
 8004292:	461c      	mov	r4, r3
 8004294:	bb44      	cbnz	r4, 80042e8 <_malloc_r+0x88>
 8004296:	4629      	mov	r1, r5
 8004298:	4630      	mov	r0, r6
 800429a:	f7ff ffbf 	bl	800421c <sbrk_aligned>
 800429e:	1c43      	adds	r3, r0, #1
 80042a0:	4604      	mov	r4, r0
 80042a2:	d158      	bne.n	8004356 <_malloc_r+0xf6>
 80042a4:	f8d8 4000 	ldr.w	r4, [r8]
 80042a8:	4627      	mov	r7, r4
 80042aa:	2f00      	cmp	r7, #0
 80042ac:	d143      	bne.n	8004336 <_malloc_r+0xd6>
 80042ae:	2c00      	cmp	r4, #0
 80042b0:	d04b      	beq.n	800434a <_malloc_r+0xea>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	4639      	mov	r1, r7
 80042b6:	4630      	mov	r0, r6
 80042b8:	eb04 0903 	add.w	r9, r4, r3
 80042bc:	f000 fb60 	bl	8004980 <_sbrk_r>
 80042c0:	4581      	cmp	r9, r0
 80042c2:	d142      	bne.n	800434a <_malloc_r+0xea>
 80042c4:	6821      	ldr	r1, [r4, #0]
 80042c6:	4630      	mov	r0, r6
 80042c8:	1a6d      	subs	r5, r5, r1
 80042ca:	4629      	mov	r1, r5
 80042cc:	f7ff ffa6 	bl	800421c <sbrk_aligned>
 80042d0:	3001      	adds	r0, #1
 80042d2:	d03a      	beq.n	800434a <_malloc_r+0xea>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	442b      	add	r3, r5
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	f8d8 3000 	ldr.w	r3, [r8]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	bb62      	cbnz	r2, 800433c <_malloc_r+0xdc>
 80042e2:	f8c8 7000 	str.w	r7, [r8]
 80042e6:	e00f      	b.n	8004308 <_malloc_r+0xa8>
 80042e8:	6822      	ldr	r2, [r4, #0]
 80042ea:	1b52      	subs	r2, r2, r5
 80042ec:	d420      	bmi.n	8004330 <_malloc_r+0xd0>
 80042ee:	2a0b      	cmp	r2, #11
 80042f0:	d917      	bls.n	8004322 <_malloc_r+0xc2>
 80042f2:	1961      	adds	r1, r4, r5
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	6025      	str	r5, [r4, #0]
 80042f8:	bf18      	it	ne
 80042fa:	6059      	strne	r1, [r3, #4]
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	bf08      	it	eq
 8004300:	f8c8 1000 	streq.w	r1, [r8]
 8004304:	5162      	str	r2, [r4, r5]
 8004306:	604b      	str	r3, [r1, #4]
 8004308:	4630      	mov	r0, r6
 800430a:	f000 f82f 	bl	800436c <__malloc_unlock>
 800430e:	f104 000b 	add.w	r0, r4, #11
 8004312:	1d23      	adds	r3, r4, #4
 8004314:	f020 0007 	bic.w	r0, r0, #7
 8004318:	1ac2      	subs	r2, r0, r3
 800431a:	bf1c      	itt	ne
 800431c:	1a1b      	subne	r3, r3, r0
 800431e:	50a3      	strne	r3, [r4, r2]
 8004320:	e7af      	b.n	8004282 <_malloc_r+0x22>
 8004322:	6862      	ldr	r2, [r4, #4]
 8004324:	42a3      	cmp	r3, r4
 8004326:	bf0c      	ite	eq
 8004328:	f8c8 2000 	streq.w	r2, [r8]
 800432c:	605a      	strne	r2, [r3, #4]
 800432e:	e7eb      	b.n	8004308 <_malloc_r+0xa8>
 8004330:	4623      	mov	r3, r4
 8004332:	6864      	ldr	r4, [r4, #4]
 8004334:	e7ae      	b.n	8004294 <_malloc_r+0x34>
 8004336:	463c      	mov	r4, r7
 8004338:	687f      	ldr	r7, [r7, #4]
 800433a:	e7b6      	b.n	80042aa <_malloc_r+0x4a>
 800433c:	461a      	mov	r2, r3
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	42a3      	cmp	r3, r4
 8004342:	d1fb      	bne.n	800433c <_malloc_r+0xdc>
 8004344:	2300      	movs	r3, #0
 8004346:	6053      	str	r3, [r2, #4]
 8004348:	e7de      	b.n	8004308 <_malloc_r+0xa8>
 800434a:	230c      	movs	r3, #12
 800434c:	4630      	mov	r0, r6
 800434e:	6033      	str	r3, [r6, #0]
 8004350:	f000 f80c 	bl	800436c <__malloc_unlock>
 8004354:	e794      	b.n	8004280 <_malloc_r+0x20>
 8004356:	6005      	str	r5, [r0, #0]
 8004358:	e7d6      	b.n	8004308 <_malloc_r+0xa8>
 800435a:	bf00      	nop
 800435c:	200004bc 	.word	0x200004bc

08004360 <__malloc_lock>:
 8004360:	4801      	ldr	r0, [pc, #4]	@ (8004368 <__malloc_lock+0x8>)
 8004362:	f7ff bf11 	b.w	8004188 <__retarget_lock_acquire_recursive>
 8004366:	bf00      	nop
 8004368:	200004b4 	.word	0x200004b4

0800436c <__malloc_unlock>:
 800436c:	4801      	ldr	r0, [pc, #4]	@ (8004374 <__malloc_unlock+0x8>)
 800436e:	f7ff bf0c 	b.w	800418a <__retarget_lock_release_recursive>
 8004372:	bf00      	nop
 8004374:	200004b4 	.word	0x200004b4

08004378 <__ssputs_r>:
 8004378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800437c:	461f      	mov	r7, r3
 800437e:	688e      	ldr	r6, [r1, #8]
 8004380:	4682      	mov	sl, r0
 8004382:	42be      	cmp	r6, r7
 8004384:	460c      	mov	r4, r1
 8004386:	4690      	mov	r8, r2
 8004388:	680b      	ldr	r3, [r1, #0]
 800438a:	d82d      	bhi.n	80043e8 <__ssputs_r+0x70>
 800438c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004390:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004394:	d026      	beq.n	80043e4 <__ssputs_r+0x6c>
 8004396:	6965      	ldr	r5, [r4, #20]
 8004398:	6909      	ldr	r1, [r1, #16]
 800439a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800439e:	eba3 0901 	sub.w	r9, r3, r1
 80043a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043a6:	1c7b      	adds	r3, r7, #1
 80043a8:	444b      	add	r3, r9
 80043aa:	106d      	asrs	r5, r5, #1
 80043ac:	429d      	cmp	r5, r3
 80043ae:	bf38      	it	cc
 80043b0:	461d      	movcc	r5, r3
 80043b2:	0553      	lsls	r3, r2, #21
 80043b4:	d527      	bpl.n	8004406 <__ssputs_r+0x8e>
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7ff ff52 	bl	8004260 <_malloc_r>
 80043bc:	4606      	mov	r6, r0
 80043be:	b360      	cbz	r0, 800441a <__ssputs_r+0xa2>
 80043c0:	464a      	mov	r2, r9
 80043c2:	6921      	ldr	r1, [r4, #16]
 80043c4:	f000 fafa 	bl	80049bc <memcpy>
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	6126      	str	r6, [r4, #16]
 80043d6:	444e      	add	r6, r9
 80043d8:	6026      	str	r6, [r4, #0]
 80043da:	463e      	mov	r6, r7
 80043dc:	6165      	str	r5, [r4, #20]
 80043de:	eba5 0509 	sub.w	r5, r5, r9
 80043e2:	60a5      	str	r5, [r4, #8]
 80043e4:	42be      	cmp	r6, r7
 80043e6:	d900      	bls.n	80043ea <__ssputs_r+0x72>
 80043e8:	463e      	mov	r6, r7
 80043ea:	4632      	mov	r2, r6
 80043ec:	4641      	mov	r1, r8
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	f000 faac 	bl	800494c <memmove>
 80043f4:	2000      	movs	r0, #0
 80043f6:	68a3      	ldr	r3, [r4, #8]
 80043f8:	1b9b      	subs	r3, r3, r6
 80043fa:	60a3      	str	r3, [r4, #8]
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	4433      	add	r3, r6
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004406:	462a      	mov	r2, r5
 8004408:	f000 fae6 	bl	80049d8 <_realloc_r>
 800440c:	4606      	mov	r6, r0
 800440e:	2800      	cmp	r0, #0
 8004410:	d1e0      	bne.n	80043d4 <__ssputs_r+0x5c>
 8004412:	4650      	mov	r0, sl
 8004414:	6921      	ldr	r1, [r4, #16]
 8004416:	f7ff feb9 	bl	800418c <_free_r>
 800441a:	230c      	movs	r3, #12
 800441c:	f8ca 3000 	str.w	r3, [sl]
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	f04f 30ff 	mov.w	r0, #4294967295
 8004426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	e7e9      	b.n	8004402 <__ssputs_r+0x8a>
	...

08004430 <_svfiprintf_r>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	4698      	mov	r8, r3
 8004436:	898b      	ldrh	r3, [r1, #12]
 8004438:	4607      	mov	r7, r0
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	460d      	mov	r5, r1
 800443e:	4614      	mov	r4, r2
 8004440:	b09d      	sub	sp, #116	@ 0x74
 8004442:	d510      	bpl.n	8004466 <_svfiprintf_r+0x36>
 8004444:	690b      	ldr	r3, [r1, #16]
 8004446:	b973      	cbnz	r3, 8004466 <_svfiprintf_r+0x36>
 8004448:	2140      	movs	r1, #64	@ 0x40
 800444a:	f7ff ff09 	bl	8004260 <_malloc_r>
 800444e:	6028      	str	r0, [r5, #0]
 8004450:	6128      	str	r0, [r5, #16]
 8004452:	b930      	cbnz	r0, 8004462 <_svfiprintf_r+0x32>
 8004454:	230c      	movs	r3, #12
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	b01d      	add	sp, #116	@ 0x74
 800445e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004462:	2340      	movs	r3, #64	@ 0x40
 8004464:	616b      	str	r3, [r5, #20]
 8004466:	2300      	movs	r3, #0
 8004468:	9309      	str	r3, [sp, #36]	@ 0x24
 800446a:	2320      	movs	r3, #32
 800446c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004470:	2330      	movs	r3, #48	@ 0x30
 8004472:	f04f 0901 	mov.w	r9, #1
 8004476:	f8cd 800c 	str.w	r8, [sp, #12]
 800447a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004614 <_svfiprintf_r+0x1e4>
 800447e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004482:	4623      	mov	r3, r4
 8004484:	469a      	mov	sl, r3
 8004486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800448a:	b10a      	cbz	r2, 8004490 <_svfiprintf_r+0x60>
 800448c:	2a25      	cmp	r2, #37	@ 0x25
 800448e:	d1f9      	bne.n	8004484 <_svfiprintf_r+0x54>
 8004490:	ebba 0b04 	subs.w	fp, sl, r4
 8004494:	d00b      	beq.n	80044ae <_svfiprintf_r+0x7e>
 8004496:	465b      	mov	r3, fp
 8004498:	4622      	mov	r2, r4
 800449a:	4629      	mov	r1, r5
 800449c:	4638      	mov	r0, r7
 800449e:	f7ff ff6b 	bl	8004378 <__ssputs_r>
 80044a2:	3001      	adds	r0, #1
 80044a4:	f000 80a7 	beq.w	80045f6 <_svfiprintf_r+0x1c6>
 80044a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044aa:	445a      	add	r2, fp
 80044ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80044ae:	f89a 3000 	ldrb.w	r3, [sl]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 809f 	beq.w	80045f6 <_svfiprintf_r+0x1c6>
 80044b8:	2300      	movs	r3, #0
 80044ba:	f04f 32ff 	mov.w	r2, #4294967295
 80044be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044c2:	f10a 0a01 	add.w	sl, sl, #1
 80044c6:	9304      	str	r3, [sp, #16]
 80044c8:	9307      	str	r3, [sp, #28]
 80044ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80044d0:	4654      	mov	r4, sl
 80044d2:	2205      	movs	r2, #5
 80044d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d8:	484e      	ldr	r0, [pc, #312]	@ (8004614 <_svfiprintf_r+0x1e4>)
 80044da:	f000 fa61 	bl	80049a0 <memchr>
 80044de:	9a04      	ldr	r2, [sp, #16]
 80044e0:	b9d8      	cbnz	r0, 800451a <_svfiprintf_r+0xea>
 80044e2:	06d0      	lsls	r0, r2, #27
 80044e4:	bf44      	itt	mi
 80044e6:	2320      	movmi	r3, #32
 80044e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ec:	0711      	lsls	r1, r2, #28
 80044ee:	bf44      	itt	mi
 80044f0:	232b      	movmi	r3, #43	@ 0x2b
 80044f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044f6:	f89a 3000 	ldrb.w	r3, [sl]
 80044fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80044fc:	d015      	beq.n	800452a <_svfiprintf_r+0xfa>
 80044fe:	4654      	mov	r4, sl
 8004500:	2000      	movs	r0, #0
 8004502:	f04f 0c0a 	mov.w	ip, #10
 8004506:	9a07      	ldr	r2, [sp, #28]
 8004508:	4621      	mov	r1, r4
 800450a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800450e:	3b30      	subs	r3, #48	@ 0x30
 8004510:	2b09      	cmp	r3, #9
 8004512:	d94b      	bls.n	80045ac <_svfiprintf_r+0x17c>
 8004514:	b1b0      	cbz	r0, 8004544 <_svfiprintf_r+0x114>
 8004516:	9207      	str	r2, [sp, #28]
 8004518:	e014      	b.n	8004544 <_svfiprintf_r+0x114>
 800451a:	eba0 0308 	sub.w	r3, r0, r8
 800451e:	fa09 f303 	lsl.w	r3, r9, r3
 8004522:	4313      	orrs	r3, r2
 8004524:	46a2      	mov	sl, r4
 8004526:	9304      	str	r3, [sp, #16]
 8004528:	e7d2      	b.n	80044d0 <_svfiprintf_r+0xa0>
 800452a:	9b03      	ldr	r3, [sp, #12]
 800452c:	1d19      	adds	r1, r3, #4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	9103      	str	r1, [sp, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	bfbb      	ittet	lt
 8004536:	425b      	neglt	r3, r3
 8004538:	f042 0202 	orrlt.w	r2, r2, #2
 800453c:	9307      	strge	r3, [sp, #28]
 800453e:	9307      	strlt	r3, [sp, #28]
 8004540:	bfb8      	it	lt
 8004542:	9204      	strlt	r2, [sp, #16]
 8004544:	7823      	ldrb	r3, [r4, #0]
 8004546:	2b2e      	cmp	r3, #46	@ 0x2e
 8004548:	d10a      	bne.n	8004560 <_svfiprintf_r+0x130>
 800454a:	7863      	ldrb	r3, [r4, #1]
 800454c:	2b2a      	cmp	r3, #42	@ 0x2a
 800454e:	d132      	bne.n	80045b6 <_svfiprintf_r+0x186>
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	3402      	adds	r4, #2
 8004554:	1d1a      	adds	r2, r3, #4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	9203      	str	r2, [sp, #12]
 800455a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800455e:	9305      	str	r3, [sp, #20]
 8004560:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004618 <_svfiprintf_r+0x1e8>
 8004564:	2203      	movs	r2, #3
 8004566:	4650      	mov	r0, sl
 8004568:	7821      	ldrb	r1, [r4, #0]
 800456a:	f000 fa19 	bl	80049a0 <memchr>
 800456e:	b138      	cbz	r0, 8004580 <_svfiprintf_r+0x150>
 8004570:	2240      	movs	r2, #64	@ 0x40
 8004572:	9b04      	ldr	r3, [sp, #16]
 8004574:	eba0 000a 	sub.w	r0, r0, sl
 8004578:	4082      	lsls	r2, r0
 800457a:	4313      	orrs	r3, r2
 800457c:	3401      	adds	r4, #1
 800457e:	9304      	str	r3, [sp, #16]
 8004580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004584:	2206      	movs	r2, #6
 8004586:	4825      	ldr	r0, [pc, #148]	@ (800461c <_svfiprintf_r+0x1ec>)
 8004588:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800458c:	f000 fa08 	bl	80049a0 <memchr>
 8004590:	2800      	cmp	r0, #0
 8004592:	d036      	beq.n	8004602 <_svfiprintf_r+0x1d2>
 8004594:	4b22      	ldr	r3, [pc, #136]	@ (8004620 <_svfiprintf_r+0x1f0>)
 8004596:	bb1b      	cbnz	r3, 80045e0 <_svfiprintf_r+0x1b0>
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	3307      	adds	r3, #7
 800459c:	f023 0307 	bic.w	r3, r3, #7
 80045a0:	3308      	adds	r3, #8
 80045a2:	9303      	str	r3, [sp, #12]
 80045a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045a6:	4433      	add	r3, r6
 80045a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80045aa:	e76a      	b.n	8004482 <_svfiprintf_r+0x52>
 80045ac:	460c      	mov	r4, r1
 80045ae:	2001      	movs	r0, #1
 80045b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80045b4:	e7a8      	b.n	8004508 <_svfiprintf_r+0xd8>
 80045b6:	2300      	movs	r3, #0
 80045b8:	f04f 0c0a 	mov.w	ip, #10
 80045bc:	4619      	mov	r1, r3
 80045be:	3401      	adds	r4, #1
 80045c0:	9305      	str	r3, [sp, #20]
 80045c2:	4620      	mov	r0, r4
 80045c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045c8:	3a30      	subs	r2, #48	@ 0x30
 80045ca:	2a09      	cmp	r2, #9
 80045cc:	d903      	bls.n	80045d6 <_svfiprintf_r+0x1a6>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0c6      	beq.n	8004560 <_svfiprintf_r+0x130>
 80045d2:	9105      	str	r1, [sp, #20]
 80045d4:	e7c4      	b.n	8004560 <_svfiprintf_r+0x130>
 80045d6:	4604      	mov	r4, r0
 80045d8:	2301      	movs	r3, #1
 80045da:	fb0c 2101 	mla	r1, ip, r1, r2
 80045de:	e7f0      	b.n	80045c2 <_svfiprintf_r+0x192>
 80045e0:	ab03      	add	r3, sp, #12
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	462a      	mov	r2, r5
 80045e6:	4638      	mov	r0, r7
 80045e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004624 <_svfiprintf_r+0x1f4>)
 80045ea:	a904      	add	r1, sp, #16
 80045ec:	f3af 8000 	nop.w
 80045f0:	1c42      	adds	r2, r0, #1
 80045f2:	4606      	mov	r6, r0
 80045f4:	d1d6      	bne.n	80045a4 <_svfiprintf_r+0x174>
 80045f6:	89ab      	ldrh	r3, [r5, #12]
 80045f8:	065b      	lsls	r3, r3, #25
 80045fa:	f53f af2d 	bmi.w	8004458 <_svfiprintf_r+0x28>
 80045fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004600:	e72c      	b.n	800445c <_svfiprintf_r+0x2c>
 8004602:	ab03      	add	r3, sp, #12
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	462a      	mov	r2, r5
 8004608:	4638      	mov	r0, r7
 800460a:	4b06      	ldr	r3, [pc, #24]	@ (8004624 <_svfiprintf_r+0x1f4>)
 800460c:	a904      	add	r1, sp, #16
 800460e:	f000 f87d 	bl	800470c <_printf_i>
 8004612:	e7ed      	b.n	80045f0 <_svfiprintf_r+0x1c0>
 8004614:	08004af2 	.word	0x08004af2
 8004618:	08004af8 	.word	0x08004af8
 800461c:	08004afc 	.word	0x08004afc
 8004620:	00000000 	.word	0x00000000
 8004624:	08004379 	.word	0x08004379

08004628 <_printf_common>:
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	4616      	mov	r6, r2
 800462e:	4698      	mov	r8, r3
 8004630:	688a      	ldr	r2, [r1, #8]
 8004632:	690b      	ldr	r3, [r1, #16]
 8004634:	4607      	mov	r7, r0
 8004636:	4293      	cmp	r3, r2
 8004638:	bfb8      	it	lt
 800463a:	4613      	movlt	r3, r2
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004642:	460c      	mov	r4, r1
 8004644:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004648:	b10a      	cbz	r2, 800464e <_printf_common+0x26>
 800464a:	3301      	adds	r3, #1
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	0699      	lsls	r1, r3, #26
 8004652:	bf42      	ittt	mi
 8004654:	6833      	ldrmi	r3, [r6, #0]
 8004656:	3302      	addmi	r3, #2
 8004658:	6033      	strmi	r3, [r6, #0]
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	f015 0506 	ands.w	r5, r5, #6
 8004660:	d106      	bne.n	8004670 <_printf_common+0x48>
 8004662:	f104 0a19 	add.w	sl, r4, #25
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	6832      	ldr	r2, [r6, #0]
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	42ab      	cmp	r3, r5
 800466e:	dc2b      	bgt.n	80046c8 <_printf_common+0xa0>
 8004670:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004674:	6822      	ldr	r2, [r4, #0]
 8004676:	3b00      	subs	r3, #0
 8004678:	bf18      	it	ne
 800467a:	2301      	movne	r3, #1
 800467c:	0692      	lsls	r2, r2, #26
 800467e:	d430      	bmi.n	80046e2 <_printf_common+0xba>
 8004680:	4641      	mov	r1, r8
 8004682:	4638      	mov	r0, r7
 8004684:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004688:	47c8      	blx	r9
 800468a:	3001      	adds	r0, #1
 800468c:	d023      	beq.n	80046d6 <_printf_common+0xae>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	f003 0306 	and.w	r3, r3, #6
 8004696:	2b04      	cmp	r3, #4
 8004698:	bf14      	ite	ne
 800469a:	2500      	movne	r5, #0
 800469c:	6833      	ldreq	r3, [r6, #0]
 800469e:	f04f 0600 	mov.w	r6, #0
 80046a2:	bf08      	it	eq
 80046a4:	68e5      	ldreq	r5, [r4, #12]
 80046a6:	f104 041a 	add.w	r4, r4, #26
 80046aa:	bf08      	it	eq
 80046ac:	1aed      	subeq	r5, r5, r3
 80046ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80046b2:	bf08      	it	eq
 80046b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bfc4      	itt	gt
 80046bc:	1a9b      	subgt	r3, r3, r2
 80046be:	18ed      	addgt	r5, r5, r3
 80046c0:	42b5      	cmp	r5, r6
 80046c2:	d11a      	bne.n	80046fa <_printf_common+0xd2>
 80046c4:	2000      	movs	r0, #0
 80046c6:	e008      	b.n	80046da <_printf_common+0xb2>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4652      	mov	r2, sl
 80046cc:	4641      	mov	r1, r8
 80046ce:	4638      	mov	r0, r7
 80046d0:	47c8      	blx	r9
 80046d2:	3001      	adds	r0, #1
 80046d4:	d103      	bne.n	80046de <_printf_common+0xb6>
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046de:	3501      	adds	r5, #1
 80046e0:	e7c1      	b.n	8004666 <_printf_common+0x3e>
 80046e2:	2030      	movs	r0, #48	@ 0x30
 80046e4:	18e1      	adds	r1, r4, r3
 80046e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046f0:	4422      	add	r2, r4
 80046f2:	3302      	adds	r3, #2
 80046f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046f8:	e7c2      	b.n	8004680 <_printf_common+0x58>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4622      	mov	r2, r4
 80046fe:	4641      	mov	r1, r8
 8004700:	4638      	mov	r0, r7
 8004702:	47c8      	blx	r9
 8004704:	3001      	adds	r0, #1
 8004706:	d0e6      	beq.n	80046d6 <_printf_common+0xae>
 8004708:	3601      	adds	r6, #1
 800470a:	e7d9      	b.n	80046c0 <_printf_common+0x98>

0800470c <_printf_i>:
 800470c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004710:	7e0f      	ldrb	r7, [r1, #24]
 8004712:	4691      	mov	r9, r2
 8004714:	2f78      	cmp	r7, #120	@ 0x78
 8004716:	4680      	mov	r8, r0
 8004718:	460c      	mov	r4, r1
 800471a:	469a      	mov	sl, r3
 800471c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800471e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004722:	d807      	bhi.n	8004734 <_printf_i+0x28>
 8004724:	2f62      	cmp	r7, #98	@ 0x62
 8004726:	d80a      	bhi.n	800473e <_printf_i+0x32>
 8004728:	2f00      	cmp	r7, #0
 800472a:	f000 80d3 	beq.w	80048d4 <_printf_i+0x1c8>
 800472e:	2f58      	cmp	r7, #88	@ 0x58
 8004730:	f000 80ba 	beq.w	80048a8 <_printf_i+0x19c>
 8004734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800473c:	e03a      	b.n	80047b4 <_printf_i+0xa8>
 800473e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004742:	2b15      	cmp	r3, #21
 8004744:	d8f6      	bhi.n	8004734 <_printf_i+0x28>
 8004746:	a101      	add	r1, pc, #4	@ (adr r1, 800474c <_printf_i+0x40>)
 8004748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800474c:	080047a5 	.word	0x080047a5
 8004750:	080047b9 	.word	0x080047b9
 8004754:	08004735 	.word	0x08004735
 8004758:	08004735 	.word	0x08004735
 800475c:	08004735 	.word	0x08004735
 8004760:	08004735 	.word	0x08004735
 8004764:	080047b9 	.word	0x080047b9
 8004768:	08004735 	.word	0x08004735
 800476c:	08004735 	.word	0x08004735
 8004770:	08004735 	.word	0x08004735
 8004774:	08004735 	.word	0x08004735
 8004778:	080048bb 	.word	0x080048bb
 800477c:	080047e3 	.word	0x080047e3
 8004780:	08004875 	.word	0x08004875
 8004784:	08004735 	.word	0x08004735
 8004788:	08004735 	.word	0x08004735
 800478c:	080048dd 	.word	0x080048dd
 8004790:	08004735 	.word	0x08004735
 8004794:	080047e3 	.word	0x080047e3
 8004798:	08004735 	.word	0x08004735
 800479c:	08004735 	.word	0x08004735
 80047a0:	0800487d 	.word	0x0800487d
 80047a4:	6833      	ldr	r3, [r6, #0]
 80047a6:	1d1a      	adds	r2, r3, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6032      	str	r2, [r6, #0]
 80047ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047b4:	2301      	movs	r3, #1
 80047b6:	e09e      	b.n	80048f6 <_printf_i+0x1ea>
 80047b8:	6833      	ldr	r3, [r6, #0]
 80047ba:	6820      	ldr	r0, [r4, #0]
 80047bc:	1d19      	adds	r1, r3, #4
 80047be:	6031      	str	r1, [r6, #0]
 80047c0:	0606      	lsls	r6, r0, #24
 80047c2:	d501      	bpl.n	80047c8 <_printf_i+0xbc>
 80047c4:	681d      	ldr	r5, [r3, #0]
 80047c6:	e003      	b.n	80047d0 <_printf_i+0xc4>
 80047c8:	0645      	lsls	r5, r0, #25
 80047ca:	d5fb      	bpl.n	80047c4 <_printf_i+0xb8>
 80047cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047d0:	2d00      	cmp	r5, #0
 80047d2:	da03      	bge.n	80047dc <_printf_i+0xd0>
 80047d4:	232d      	movs	r3, #45	@ 0x2d
 80047d6:	426d      	negs	r5, r5
 80047d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047dc:	230a      	movs	r3, #10
 80047de:	4859      	ldr	r0, [pc, #356]	@ (8004944 <_printf_i+0x238>)
 80047e0:	e011      	b.n	8004806 <_printf_i+0xfa>
 80047e2:	6821      	ldr	r1, [r4, #0]
 80047e4:	6833      	ldr	r3, [r6, #0]
 80047e6:	0608      	lsls	r0, r1, #24
 80047e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80047ec:	d402      	bmi.n	80047f4 <_printf_i+0xe8>
 80047ee:	0649      	lsls	r1, r1, #25
 80047f0:	bf48      	it	mi
 80047f2:	b2ad      	uxthmi	r5, r5
 80047f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80047f6:	6033      	str	r3, [r6, #0]
 80047f8:	bf14      	ite	ne
 80047fa:	230a      	movne	r3, #10
 80047fc:	2308      	moveq	r3, #8
 80047fe:	4851      	ldr	r0, [pc, #324]	@ (8004944 <_printf_i+0x238>)
 8004800:	2100      	movs	r1, #0
 8004802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004806:	6866      	ldr	r6, [r4, #4]
 8004808:	2e00      	cmp	r6, #0
 800480a:	bfa8      	it	ge
 800480c:	6821      	ldrge	r1, [r4, #0]
 800480e:	60a6      	str	r6, [r4, #8]
 8004810:	bfa4      	itt	ge
 8004812:	f021 0104 	bicge.w	r1, r1, #4
 8004816:	6021      	strge	r1, [r4, #0]
 8004818:	b90d      	cbnz	r5, 800481e <_printf_i+0x112>
 800481a:	2e00      	cmp	r6, #0
 800481c:	d04b      	beq.n	80048b6 <_printf_i+0x1aa>
 800481e:	4616      	mov	r6, r2
 8004820:	fbb5 f1f3 	udiv	r1, r5, r3
 8004824:	fb03 5711 	mls	r7, r3, r1, r5
 8004828:	5dc7      	ldrb	r7, [r0, r7]
 800482a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800482e:	462f      	mov	r7, r5
 8004830:	42bb      	cmp	r3, r7
 8004832:	460d      	mov	r5, r1
 8004834:	d9f4      	bls.n	8004820 <_printf_i+0x114>
 8004836:	2b08      	cmp	r3, #8
 8004838:	d10b      	bne.n	8004852 <_printf_i+0x146>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	07df      	lsls	r7, r3, #31
 800483e:	d508      	bpl.n	8004852 <_printf_i+0x146>
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	6861      	ldr	r1, [r4, #4]
 8004844:	4299      	cmp	r1, r3
 8004846:	bfde      	ittt	le
 8004848:	2330      	movle	r3, #48	@ 0x30
 800484a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800484e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004852:	1b92      	subs	r2, r2, r6
 8004854:	6122      	str	r2, [r4, #16]
 8004856:	464b      	mov	r3, r9
 8004858:	4621      	mov	r1, r4
 800485a:	4640      	mov	r0, r8
 800485c:	f8cd a000 	str.w	sl, [sp]
 8004860:	aa03      	add	r2, sp, #12
 8004862:	f7ff fee1 	bl	8004628 <_printf_common>
 8004866:	3001      	adds	r0, #1
 8004868:	d14a      	bne.n	8004900 <_printf_i+0x1f4>
 800486a:	f04f 30ff 	mov.w	r0, #4294967295
 800486e:	b004      	add	sp, #16
 8004870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	f043 0320 	orr.w	r3, r3, #32
 800487a:	6023      	str	r3, [r4, #0]
 800487c:	2778      	movs	r7, #120	@ 0x78
 800487e:	4832      	ldr	r0, [pc, #200]	@ (8004948 <_printf_i+0x23c>)
 8004880:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	6831      	ldr	r1, [r6, #0]
 8004888:	061f      	lsls	r7, r3, #24
 800488a:	f851 5b04 	ldr.w	r5, [r1], #4
 800488e:	d402      	bmi.n	8004896 <_printf_i+0x18a>
 8004890:	065f      	lsls	r7, r3, #25
 8004892:	bf48      	it	mi
 8004894:	b2ad      	uxthmi	r5, r5
 8004896:	6031      	str	r1, [r6, #0]
 8004898:	07d9      	lsls	r1, r3, #31
 800489a:	bf44      	itt	mi
 800489c:	f043 0320 	orrmi.w	r3, r3, #32
 80048a0:	6023      	strmi	r3, [r4, #0]
 80048a2:	b11d      	cbz	r5, 80048ac <_printf_i+0x1a0>
 80048a4:	2310      	movs	r3, #16
 80048a6:	e7ab      	b.n	8004800 <_printf_i+0xf4>
 80048a8:	4826      	ldr	r0, [pc, #152]	@ (8004944 <_printf_i+0x238>)
 80048aa:	e7e9      	b.n	8004880 <_printf_i+0x174>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	f023 0320 	bic.w	r3, r3, #32
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	e7f6      	b.n	80048a4 <_printf_i+0x198>
 80048b6:	4616      	mov	r6, r2
 80048b8:	e7bd      	b.n	8004836 <_printf_i+0x12a>
 80048ba:	6833      	ldr	r3, [r6, #0]
 80048bc:	6825      	ldr	r5, [r4, #0]
 80048be:	1d18      	adds	r0, r3, #4
 80048c0:	6961      	ldr	r1, [r4, #20]
 80048c2:	6030      	str	r0, [r6, #0]
 80048c4:	062e      	lsls	r6, r5, #24
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	d501      	bpl.n	80048ce <_printf_i+0x1c2>
 80048ca:	6019      	str	r1, [r3, #0]
 80048cc:	e002      	b.n	80048d4 <_printf_i+0x1c8>
 80048ce:	0668      	lsls	r0, r5, #25
 80048d0:	d5fb      	bpl.n	80048ca <_printf_i+0x1be>
 80048d2:	8019      	strh	r1, [r3, #0]
 80048d4:	2300      	movs	r3, #0
 80048d6:	4616      	mov	r6, r2
 80048d8:	6123      	str	r3, [r4, #16]
 80048da:	e7bc      	b.n	8004856 <_printf_i+0x14a>
 80048dc:	6833      	ldr	r3, [r6, #0]
 80048de:	2100      	movs	r1, #0
 80048e0:	1d1a      	adds	r2, r3, #4
 80048e2:	6032      	str	r2, [r6, #0]
 80048e4:	681e      	ldr	r6, [r3, #0]
 80048e6:	6862      	ldr	r2, [r4, #4]
 80048e8:	4630      	mov	r0, r6
 80048ea:	f000 f859 	bl	80049a0 <memchr>
 80048ee:	b108      	cbz	r0, 80048f4 <_printf_i+0x1e8>
 80048f0:	1b80      	subs	r0, r0, r6
 80048f2:	6060      	str	r0, [r4, #4]
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	2300      	movs	r3, #0
 80048fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048fe:	e7aa      	b.n	8004856 <_printf_i+0x14a>
 8004900:	4632      	mov	r2, r6
 8004902:	4649      	mov	r1, r9
 8004904:	4640      	mov	r0, r8
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	47d0      	blx	sl
 800490a:	3001      	adds	r0, #1
 800490c:	d0ad      	beq.n	800486a <_printf_i+0x15e>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	079b      	lsls	r3, r3, #30
 8004912:	d413      	bmi.n	800493c <_printf_i+0x230>
 8004914:	68e0      	ldr	r0, [r4, #12]
 8004916:	9b03      	ldr	r3, [sp, #12]
 8004918:	4298      	cmp	r0, r3
 800491a:	bfb8      	it	lt
 800491c:	4618      	movlt	r0, r3
 800491e:	e7a6      	b.n	800486e <_printf_i+0x162>
 8004920:	2301      	movs	r3, #1
 8004922:	4632      	mov	r2, r6
 8004924:	4649      	mov	r1, r9
 8004926:	4640      	mov	r0, r8
 8004928:	47d0      	blx	sl
 800492a:	3001      	adds	r0, #1
 800492c:	d09d      	beq.n	800486a <_printf_i+0x15e>
 800492e:	3501      	adds	r5, #1
 8004930:	68e3      	ldr	r3, [r4, #12]
 8004932:	9903      	ldr	r1, [sp, #12]
 8004934:	1a5b      	subs	r3, r3, r1
 8004936:	42ab      	cmp	r3, r5
 8004938:	dcf2      	bgt.n	8004920 <_printf_i+0x214>
 800493a:	e7eb      	b.n	8004914 <_printf_i+0x208>
 800493c:	2500      	movs	r5, #0
 800493e:	f104 0619 	add.w	r6, r4, #25
 8004942:	e7f5      	b.n	8004930 <_printf_i+0x224>
 8004944:	08004b03 	.word	0x08004b03
 8004948:	08004b14 	.word	0x08004b14

0800494c <memmove>:
 800494c:	4288      	cmp	r0, r1
 800494e:	b510      	push	{r4, lr}
 8004950:	eb01 0402 	add.w	r4, r1, r2
 8004954:	d902      	bls.n	800495c <memmove+0x10>
 8004956:	4284      	cmp	r4, r0
 8004958:	4623      	mov	r3, r4
 800495a:	d807      	bhi.n	800496c <memmove+0x20>
 800495c:	1e43      	subs	r3, r0, #1
 800495e:	42a1      	cmp	r1, r4
 8004960:	d008      	beq.n	8004974 <memmove+0x28>
 8004962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800496a:	e7f8      	b.n	800495e <memmove+0x12>
 800496c:	4601      	mov	r1, r0
 800496e:	4402      	add	r2, r0
 8004970:	428a      	cmp	r2, r1
 8004972:	d100      	bne.n	8004976 <memmove+0x2a>
 8004974:	bd10      	pop	{r4, pc}
 8004976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800497a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800497e:	e7f7      	b.n	8004970 <memmove+0x24>

08004980 <_sbrk_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	2300      	movs	r3, #0
 8004984:	4d05      	ldr	r5, [pc, #20]	@ (800499c <_sbrk_r+0x1c>)
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f7fd f990 	bl	8001cb0 <_sbrk>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_sbrk_r+0x1a>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_sbrk_r+0x1a>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	200004b0 	.word	0x200004b0

080049a0 <memchr>:
 80049a0:	4603      	mov	r3, r0
 80049a2:	b510      	push	{r4, lr}
 80049a4:	b2c9      	uxtb	r1, r1
 80049a6:	4402      	add	r2, r0
 80049a8:	4293      	cmp	r3, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	d101      	bne.n	80049b2 <memchr+0x12>
 80049ae:	2000      	movs	r0, #0
 80049b0:	e003      	b.n	80049ba <memchr+0x1a>
 80049b2:	7804      	ldrb	r4, [r0, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	428c      	cmp	r4, r1
 80049b8:	d1f6      	bne.n	80049a8 <memchr+0x8>
 80049ba:	bd10      	pop	{r4, pc}

080049bc <memcpy>:
 80049bc:	440a      	add	r2, r1
 80049be:	4291      	cmp	r1, r2
 80049c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80049c4:	d100      	bne.n	80049c8 <memcpy+0xc>
 80049c6:	4770      	bx	lr
 80049c8:	b510      	push	{r4, lr}
 80049ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ce:	4291      	cmp	r1, r2
 80049d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d4:	d1f9      	bne.n	80049ca <memcpy+0xe>
 80049d6:	bd10      	pop	{r4, pc}

080049d8 <_realloc_r>:
 80049d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049dc:	4680      	mov	r8, r0
 80049de:	4615      	mov	r5, r2
 80049e0:	460c      	mov	r4, r1
 80049e2:	b921      	cbnz	r1, 80049ee <_realloc_r+0x16>
 80049e4:	4611      	mov	r1, r2
 80049e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ea:	f7ff bc39 	b.w	8004260 <_malloc_r>
 80049ee:	b92a      	cbnz	r2, 80049fc <_realloc_r+0x24>
 80049f0:	f7ff fbcc 	bl	800418c <_free_r>
 80049f4:	2400      	movs	r4, #0
 80049f6:	4620      	mov	r0, r4
 80049f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049fc:	f000 f81a 	bl	8004a34 <_malloc_usable_size_r>
 8004a00:	4285      	cmp	r5, r0
 8004a02:	4606      	mov	r6, r0
 8004a04:	d802      	bhi.n	8004a0c <_realloc_r+0x34>
 8004a06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a0a:	d8f4      	bhi.n	80049f6 <_realloc_r+0x1e>
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	4640      	mov	r0, r8
 8004a10:	f7ff fc26 	bl	8004260 <_malloc_r>
 8004a14:	4607      	mov	r7, r0
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d0ec      	beq.n	80049f4 <_realloc_r+0x1c>
 8004a1a:	42b5      	cmp	r5, r6
 8004a1c:	462a      	mov	r2, r5
 8004a1e:	4621      	mov	r1, r4
 8004a20:	bf28      	it	cs
 8004a22:	4632      	movcs	r2, r6
 8004a24:	f7ff ffca 	bl	80049bc <memcpy>
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	f7ff fbae 	bl	800418c <_free_r>
 8004a30:	463c      	mov	r4, r7
 8004a32:	e7e0      	b.n	80049f6 <_realloc_r+0x1e>

08004a34 <_malloc_usable_size_r>:
 8004a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a38:	1f18      	subs	r0, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bfbc      	itt	lt
 8004a3e:	580b      	ldrlt	r3, [r1, r0]
 8004a40:	18c0      	addlt	r0, r0, r3
 8004a42:	4770      	bx	lr

08004a44 <_init>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr

08004a50 <_fini>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr
