
traffic_light_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a6c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004b78  08004b78  00005b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c44  08004c44  000060b0  2**0
                  CONTENTS
  4 .ARM          00000008  08004c44  08004c44  00005c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c4c  08004c4c  000060b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c4c  08004c4c  00005c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08004c54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  200000b0  08004d04  000060b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08004d04  000064e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faff  00000000  00000000  000060d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d5  00000000  00000000  00015bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000183b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0c  00000000  00000000  00019468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019aa1  00000000  00000000  0001a174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f6b  00000000  00000000  00033c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d588  00000000  00000000  00049b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000d7108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004940  00000000  00000000  000d7190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000dbad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b60 	.word	0x08004b60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08004b60 	.word	0x08004b60

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000162:	2300      	movs	r3, #0
 8000164:	71fb      	strb	r3, [r7, #7]
 8000166:	e06b      	b.n	8000240 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000168:	79fa      	ldrb	r2, [r7, #7]
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	4938      	ldr	r1, [pc, #224]	@ (8000250 <buttonReading+0xf4>)
 800016e:	5c89      	ldrb	r1, [r1, r2]
 8000170:	4a38      	ldr	r2, [pc, #224]	@ (8000254 <buttonReading+0xf8>)
 8000172:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000174:	79fa      	ldrb	r2, [r7, #7]
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	4937      	ldr	r1, [pc, #220]	@ (8000258 <buttonReading+0xfc>)
 800017a:	5c89      	ldrb	r1, [r1, r2]
 800017c:	4a34      	ldr	r2, [pc, #208]	@ (8000250 <buttonReading+0xf4>)
 800017e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	4a36      	ldr	r2, [pc, #216]	@ (800025c <buttonReading+0x100>)
 8000184:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	4935      	ldr	r1, [pc, #212]	@ (8000260 <buttonReading+0x104>)
 800018c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000190:	79fc      	ldrb	r4, [r7, #7]
 8000192:	4619      	mov	r1, r3
 8000194:	4610      	mov	r0, r2
 8000196:	f002 fa4d 	bl	8002634 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	461a      	mov	r2, r3
 800019e:	4b2e      	ldr	r3, [pc, #184]	@ (8000258 <buttonReading+0xfc>)
 80001a0:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000258 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4929      	ldr	r1, [pc, #164]	@ (8000250 <buttonReading+0xf4>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d143      	bne.n	800023a <buttonReading+0xde>
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a28      	ldr	r2, [pc, #160]	@ (8000258 <buttonReading+0xfc>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4926      	ldr	r1, [pc, #152]	@ (8000254 <buttonReading+0xf8>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d13b      	bne.n	800023a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	4a27      	ldr	r2, [pc, #156]	@ (8000264 <buttonReading+0x108>)
 80001c6:	5cd2      	ldrb	r2, [r2, r3]
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	4923      	ldr	r1, [pc, #140]	@ (8000258 <buttonReading+0xfc>)
 80001cc:	5ccb      	ldrb	r3, [r1, r3]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d014      	beq.n	80001fc <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001d2:	79fa      	ldrb	r2, [r7, #7]
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	4920      	ldr	r1, [pc, #128]	@ (8000258 <buttonReading+0xfc>)
 80001d8:	5c89      	ldrb	r1, [r1, r2]
 80001da:	4a22      	ldr	r2, [pc, #136]	@ (8000264 <buttonReading+0x108>)
 80001dc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	4a20      	ldr	r2, [pc, #128]	@ (8000264 <buttonReading+0x108>)
 80001e2:	5cd3      	ldrb	r3, [r2, r3]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d128      	bne.n	800023a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000268 <buttonReading+0x10c>)
 80001ec:	2101      	movs	r1, #1
 80001ee:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / TIMER_TICK;
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	4a1e      	ldr	r2, [pc, #120]	@ (800026c <buttonReading+0x110>)
 80001f4:	21c8      	movs	r1, #200	@ 0xc8
 80001f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001fa:	e01e      	b.n	800023a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	4a19      	ldr	r2, [pc, #100]	@ (8000264 <buttonReading+0x108>)
 8000200:	5cd3      	ldrb	r3, [r2, r3]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d119      	bne.n	800023a <buttonReading+0xde>
					buttonCounters[i] --;
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	4a18      	ldr	r2, [pc, #96]	@ (800026c <buttonReading+0x110>)
 800020a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800020e:	b292      	uxth	r2, r2
 8000210:	3a01      	subs	r2, #1
 8000212:	b292      	uxth	r2, r2
 8000214:	b211      	sxth	r1, r2
 8000216:	4a15      	ldr	r2, [pc, #84]	@ (800026c <buttonReading+0x110>)
 8000218:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	4a13      	ldr	r2, [pc, #76]	@ (800026c <buttonReading+0x110>)
 8000220:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000224:	2b00      	cmp	r3, #0
 8000226:	dc08      	bgt.n	800023a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4a0f      	ldr	r2, [pc, #60]	@ (8000268 <buttonReading+0x10c>)
 800022c:	2101      	movs	r1, #1
 800022e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / TIMER_TICK;
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	4a0e      	ldr	r2, [pc, #56]	@ (800026c <buttonReading+0x110>)
 8000234:	2114      	movs	r1, #20
 8000236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	3301      	adds	r3, #1
 800023e:	71fb      	strb	r3, [r7, #7]
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b03      	cmp	r3, #3
 8000244:	d990      	bls.n	8000168 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}
 8000250:	200000d4 	.word	0x200000d4
 8000254:	200000d8 	.word	0x200000d8
 8000258:	200000d0 	.word	0x200000d0
 800025c:	20000000 	.word	0x20000000
 8000260:	20000010 	.word	0x20000010
 8000264:	200000cc 	.word	0x200000cc
 8000268:	200000dc 	.word	0x200000dc
 800026c:	200000e0 	.word	0x200000e0

08000270 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b03      	cmp	r3, #3
 800027e:	d901      	bls.n	8000284 <buttonPressed+0x14>
 8000280:	2300      	movs	r3, #0
 8000282:	e00b      	b.n	800029c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	4a08      	ldr	r2, [pc, #32]	@ (80002a8 <buttonPressed+0x38>)
 8000288:	5cd3      	ldrb	r3, [r2, r3]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d105      	bne.n	800029a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	4a05      	ldr	r2, [pc, #20]	@ (80002a8 <buttonPressed+0x38>)
 8000292:	2100      	movs	r1, #0
 8000294:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000296:	2301      	movs	r3, #1
 8000298:	e000      	b.n	800029c <buttonPressed+0x2c>
	}
	return 0;
 800029a:	2300      	movs	r3, #0
}
 800029c:	4618      	mov	r0, r3
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	200000dc 	.word	0x200000dc

080002ac <counterRun>:
 *      Author: DELL
 */

#include "counter.h"

void counterRun(void) {
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	if (trafficCounters[0] > TIMER_TICK) {
 80002b0:	4b0e      	ldr	r3, [pc, #56]	@ (80002ec <counterRun+0x40>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b0a      	cmp	r3, #10
 80002b6:	d905      	bls.n	80002c4 <counterRun+0x18>
		trafficCounters[0] -= TIMER_TICK;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <counterRun+0x40>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3b0a      	subs	r3, #10
 80002be:	4a0b      	ldr	r2, [pc, #44]	@ (80002ec <counterRun+0x40>)
 80002c0:	6013      	str	r3, [r2, #0]
 80002c2:	e002      	b.n	80002ca <counterRun+0x1e>
	}
	else {
		trafficCounters[0] = 0;
 80002c4:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <counterRun+0x40>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
	}
	if (trafficCounters[1] > TIMER_TICK) {
 80002ca:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <counterRun+0x40>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	2b0a      	cmp	r3, #10
 80002d0:	d905      	bls.n	80002de <counterRun+0x32>
		trafficCounters[1] -= TIMER_TICK;
 80002d2:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <counterRun+0x40>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	3b0a      	subs	r3, #10
 80002d8:	4a04      	ldr	r2, [pc, #16]	@ (80002ec <counterRun+0x40>)
 80002da:	6053      	str	r3, [r2, #4]
	}
	else {
		trafficCounters[1] = 0;
	}
}
 80002dc:	e002      	b.n	80002e4 <counterRun+0x38>
		trafficCounters[1] = 0;
 80002de:	4b03      	ldr	r3, [pc, #12]	@ (80002ec <counterRun+0x40>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	605a      	str	r2, [r3, #4]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	2000038c 	.word	0x2000038c

080002f0 <counterReset>:

void counterReset(void) {
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	trafficCounters[0] = 0;
 80002f4:	4b04      	ldr	r3, [pc, #16]	@ (8000308 <counterReset+0x18>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
	trafficCounters[1] = 0;
 80002fa:	4b03      	ldr	r3, [pc, #12]	@ (8000308 <counterReset+0x18>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	2000038c 	.word	0x2000038c

0800030c <fsmAutoStop>:
static uint8_t fsmIDs[FSM_TASK] = {};
static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmAutoStop(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	SCH_AddTask(counterReset, 0, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	2100      	movs	r1, #0
 8000314:	4802      	ldr	r0, [pc, #8]	@ (8000320 <fsmAutoStop+0x14>)
 8000316:	f001 f90b 	bl	8001530 <SCH_AddTask>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	080002f1 	.word	0x080002f1

08000324 <fsmAutoProcessing>:

/*
 * For pedestrian mode if needed
 * */
void fsmAutoProcessing(void) {
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	return;
 8000328:	bf00      	nop
}
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <fsmAuto>:

void fsmAuto(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	fsmAutoIDs[0] = SCH_AddTask(fsmAutoProcessing, 10, TIMER_TICK);
 8000334:	220a      	movs	r2, #10
 8000336:	210a      	movs	r1, #10
 8000338:	4845      	ldr	r0, [pc, #276]	@ (8000450 <fsmAuto+0x120>)
 800033a:	f001 f8f9 	bl	8001530 <SCH_AddTask>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	4b44      	ldr	r3, [pc, #272]	@ (8000454 <fsmAuto+0x124>)
 8000344:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(counterRun, 0, TIMER_TICK);
 8000346:	220a      	movs	r2, #10
 8000348:	2100      	movs	r1, #0
 800034a:	4843      	ldr	r0, [pc, #268]	@ (8000458 <fsmAuto+0x128>)
 800034c:	f001 f8f0 	bl	8001530 <SCH_AddTask>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <fsmAuto+0x124>)
 8000356:	705a      	strb	r2, [r3, #1]
//	fsmAutoIDs[2] = SCH_AddTask(lcd_auto_display, 0, 1000);
	fsmAutoIDs[2] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000358:	4b40      	ldr	r3, [pc, #256]	@ (800045c <fsmAuto+0x12c>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	4b40      	ldr	r3, [pc, #256]	@ (8000460 <fsmAuto+0x130>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	441a      	add	r2, r3
 8000362:	4b40      	ldr	r3, [pc, #256]	@ (8000464 <fsmAuto+0x134>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4413      	add	r3, r2
 8000368:	461a      	mov	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	483e      	ldr	r0, [pc, #248]	@ (8000468 <fsmAuto+0x138>)
 800036e:	f001 f8df 	bl	8001530 <SCH_AddTask>
 8000372:	4603      	mov	r3, r0
 8000374:	461a      	mov	r2, r3
 8000376:	4b37      	ldr	r3, [pc, #220]	@ (8000454 <fsmAuto+0x124>)
 8000378:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800037a:	4b38      	ldr	r3, [pc, #224]	@ (800045c <fsmAuto+0x12c>)
 800037c:	6819      	ldr	r1, [r3, #0]
 800037e:	4b37      	ldr	r3, [pc, #220]	@ (800045c <fsmAuto+0x12c>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b37      	ldr	r3, [pc, #220]	@ (8000460 <fsmAuto+0x130>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	441a      	add	r2, r3
 8000388:	4b36      	ldr	r3, [pc, #216]	@ (8000464 <fsmAuto+0x134>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4413      	add	r3, r2
 800038e:	461a      	mov	r2, r3
 8000390:	4836      	ldr	r0, [pc, #216]	@ (800046c <fsmAuto+0x13c>)
 8000392:	f001 f8cd 	bl	8001530 <SCH_AddTask>
 8000396:	4603      	mov	r3, r0
 8000398:	461a      	mov	r2, r3
 800039a:	4b2e      	ldr	r3, [pc, #184]	@ (8000454 <fsmAuto+0x124>)
 800039c:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800039e:	4b2f      	ldr	r3, [pc, #188]	@ (800045c <fsmAuto+0x12c>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b30      	ldr	r3, [pc, #192]	@ (8000464 <fsmAuto+0x134>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	18d1      	adds	r1, r2, r3
 80003a8:	4b2c      	ldr	r3, [pc, #176]	@ (800045c <fsmAuto+0x12c>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000460 <fsmAuto+0x130>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	441a      	add	r2, r3
 80003b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000464 <fsmAuto+0x134>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4413      	add	r3, r2
 80003b8:	461a      	mov	r2, r3
 80003ba:	482d      	ldr	r0, [pc, #180]	@ (8000470 <fsmAuto+0x140>)
 80003bc:	f001 f8b8 	bl	8001530 <SCH_AddTask>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	4b23      	ldr	r3, [pc, #140]	@ (8000454 <fsmAuto+0x124>)
 80003c6:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80003c8:	4b24      	ldr	r3, [pc, #144]	@ (800045c <fsmAuto+0x12c>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b24      	ldr	r3, [pc, #144]	@ (8000460 <fsmAuto+0x130>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	441a      	add	r2, r3
 80003d2:	4b24      	ldr	r3, [pc, #144]	@ (8000464 <fsmAuto+0x134>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4413      	add	r3, r2
 80003d8:	461a      	mov	r2, r3
 80003da:	2100      	movs	r1, #0
 80003dc:	4825      	ldr	r0, [pc, #148]	@ (8000474 <fsmAuto+0x144>)
 80003de:	f001 f8a7 	bl	8001530 <SCH_AddTask>
 80003e2:	4603      	mov	r3, r0
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <fsmAuto+0x124>)
 80003e8:	715a      	strb	r2, [r3, #5]
	fsmAutoIDs[6] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80003ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000464 <fsmAuto+0x134>)
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	4b1b      	ldr	r3, [pc, #108]	@ (800045c <fsmAuto+0x12c>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <fsmAuto+0x130>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	441a      	add	r2, r3
 80003f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <fsmAuto+0x134>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4413      	add	r3, r2
 80003fe:	461a      	mov	r2, r3
 8000400:	481d      	ldr	r0, [pc, #116]	@ (8000478 <fsmAuto+0x148>)
 8000402:	f001 f895 	bl	8001530 <SCH_AddTask>
 8000406:	4603      	mov	r3, r0
 8000408:	461a      	mov	r2, r3
 800040a:	4b12      	ldr	r3, [pc, #72]	@ (8000454 <fsmAuto+0x124>)
 800040c:	719a      	strb	r2, [r3, #6]
	fsmAutoIDs[7] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <fsmAuto+0x134>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <fsmAuto+0x130>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	18d1      	adds	r1, r2, r3
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <fsmAuto+0x12c>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <fsmAuto+0x130>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	441a      	add	r2, r3
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <fsmAuto+0x134>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4413      	add	r3, r2
 8000428:	461a      	mov	r2, r3
 800042a:	4814      	ldr	r0, [pc, #80]	@ (800047c <fsmAuto+0x14c>)
 800042c:	f001 f880 	bl	8001530 <SCH_AddTask>
 8000430:	4603      	mov	r3, r0
 8000432:	461a      	mov	r2, r3
 8000434:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <fsmAuto+0x124>)
 8000436:	71da      	strb	r2, [r3, #7]
	fsmAutoIDs[8] = SCH_AddTask(lcd_auto_display, 0, 1000);
 8000438:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800043c:	2100      	movs	r1, #0
 800043e:	4810      	ldr	r0, [pc, #64]	@ (8000480 <fsmAuto+0x150>)
 8000440:	f001 f876 	bl	8001530 <SCH_AddTask>
 8000444:	4603      	mov	r3, r0
 8000446:	461a      	mov	r2, r3
 8000448:	4b02      	ldr	r3, [pc, #8]	@ (8000454 <fsmAuto+0x124>)
 800044a:	721a      	strb	r2, [r3, #8]
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	08000325 	.word	0x08000325
 8000454:	200000f0 	.word	0x200000f0
 8000458:	080002ad 	.word	0x080002ad
 800045c:	2000004c 	.word	0x2000004c
 8000460:	20000054 	.word	0x20000054
 8000464:	20000050 	.word	0x20000050
 8000468:	08001f49 	.word	0x08001f49
 800046c:	08001f59 	.word	0x08001f59
 8000470:	08001f69 	.word	0x08001f69
 8000474:	08001f99 	.word	0x08001f99
 8000478:	08001fa9 	.word	0x08001fa9
 800047c:	08001f89 	.word	0x08001f89
 8000480:	08000d71 	.word	0x08000d71

08000484 <fsmManualStop>:

void fsmManualStop(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	SCH_AddTask(traffic0Off, 0, 0);
 8000488:	2200      	movs	r2, #0
 800048a:	2100      	movs	r1, #0
 800048c:	4804      	ldr	r0, [pc, #16]	@ (80004a0 <fsmManualStop+0x1c>)
 800048e:	f001 f84f 	bl	8001530 <SCH_AddTask>
	SCH_AddTask(traffic1Off, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	4803      	ldr	r0, [pc, #12]	@ (80004a4 <fsmManualStop+0x20>)
 8000498:	f001 f84a 	bl	8001530 <SCH_AddTask>
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	08001f39 	.word	0x08001f39
 80004a4:	08001f79 	.word	0x08001f79

080004a8 <fsmManualProcessing>:

void fsmManualProcessing(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	if (buttonPressed(1) || server_button_pressed(1)) {
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff fedf 	bl	8000270 <buttonPressed>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d105      	bne.n	80004c4 <fsmManualProcessing+0x1c>
 80004b8:	2001      	movs	r0, #1
 80004ba:	f001 fb47 	bl	8001b4c <server_button_pressed>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d01d      	beq.n	8000500 <fsmManualProcessing+0x58>
		switch (trafficStates[0]) {
 80004c4:	4b24      	ldr	r3, [pc, #144]	@ (8000558 <fsmManualProcessing+0xb0>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d012      	beq.n	80004f2 <fsmManualProcessing+0x4a>
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	dc16      	bgt.n	80004fe <fsmManualProcessing+0x56>
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d002      	beq.n	80004da <fsmManualProcessing+0x32>
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	d006      	beq.n	80004e6 <fsmManualProcessing+0x3e>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Red, 0, 0);
			break;
		default:
			break;
 80004d8:	e011      	b.n	80004fe <fsmManualProcessing+0x56>
			SCH_AddTask(traffic0Green, 0, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2100      	movs	r1, #0
 80004de:	481f      	ldr	r0, [pc, #124]	@ (800055c <fsmManualProcessing+0xb4>)
 80004e0:	f001 f826 	bl	8001530 <SCH_AddTask>
			break;
 80004e4:	e00c      	b.n	8000500 <fsmManualProcessing+0x58>
			SCH_AddTask(traffic0Yellow, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	481d      	ldr	r0, [pc, #116]	@ (8000560 <fsmManualProcessing+0xb8>)
 80004ec:	f001 f820 	bl	8001530 <SCH_AddTask>
			break;
 80004f0:	e006      	b.n	8000500 <fsmManualProcessing+0x58>
			SCH_AddTask(traffic0Red, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	481b      	ldr	r0, [pc, #108]	@ (8000564 <fsmManualProcessing+0xbc>)
 80004f8:	f001 f81a 	bl	8001530 <SCH_AddTask>
			break;
 80004fc:	e000      	b.n	8000500 <fsmManualProcessing+0x58>
			break;
 80004fe:	bf00      	nop
		}
	}
	if (buttonPressed(2) || server_button_pressed(2)) {
 8000500:	2002      	movs	r0, #2
 8000502:	f7ff feb5 	bl	8000270 <buttonPressed>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d105      	bne.n	8000518 <fsmManualProcessing+0x70>
 800050c:	2002      	movs	r0, #2
 800050e:	f001 fb1d 	bl	8001b4c <server_button_pressed>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d01d      	beq.n	8000554 <fsmManualProcessing+0xac>
		switch (trafficStates[1]) {
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <fsmManualProcessing+0xb0>)
 800051a:	785b      	ldrb	r3, [r3, #1]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d012      	beq.n	8000546 <fsmManualProcessing+0x9e>
 8000520:	2b03      	cmp	r3, #3
 8000522:	dc16      	bgt.n	8000552 <fsmManualProcessing+0xaa>
 8000524:	2b01      	cmp	r3, #1
 8000526:	d002      	beq.n	800052e <fsmManualProcessing+0x86>
 8000528:	2b02      	cmp	r3, #2
 800052a:	d006      	beq.n	800053a <fsmManualProcessing+0x92>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Red, 0, 0);
			break;
		default:
			break;
 800052c:	e011      	b.n	8000552 <fsmManualProcessing+0xaa>
			SCH_AddTask(traffic1Green, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	480d      	ldr	r0, [pc, #52]	@ (8000568 <fsmManualProcessing+0xc0>)
 8000534:	f000 fffc 	bl	8001530 <SCH_AddTask>
			break;
 8000538:	e00c      	b.n	8000554 <fsmManualProcessing+0xac>
			SCH_AddTask(traffic1Yellow, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	480b      	ldr	r0, [pc, #44]	@ (800056c <fsmManualProcessing+0xc4>)
 8000540:	f000 fff6 	bl	8001530 <SCH_AddTask>
			break;
 8000544:	e006      	b.n	8000554 <fsmManualProcessing+0xac>
			SCH_AddTask(traffic1Red, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	4809      	ldr	r0, [pc, #36]	@ (8000570 <fsmManualProcessing+0xc8>)
 800054c:	f000 fff0 	bl	8001530 <SCH_AddTask>
			break;
 8000550:	e000      	b.n	8000554 <fsmManualProcessing+0xac>
			break;
 8000552:	bf00      	nop
		}
	}
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000388 	.word	0x20000388
 800055c:	08001f59 	.word	0x08001f59
 8000560:	08001f69 	.word	0x08001f69
 8000564:	08001f49 	.word	0x08001f49
 8000568:	08001f99 	.word	0x08001f99
 800056c:	08001fa9 	.word	0x08001fa9
 8000570:	08001f89 	.word	0x08001f89

08000574 <fsmManual>:

void fsmManual(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	fsmManualIDs[0] = SCH_AddTask(fsmManualProcessing, 10, TIMER_TICK);
 8000578:	220a      	movs	r2, #10
 800057a:	210a      	movs	r1, #10
 800057c:	480b      	ldr	r0, [pc, #44]	@ (80005ac <fsmManual+0x38>)
 800057e:	f000 ffd7 	bl	8001530 <SCH_AddTask>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <fsmManual+0x3c>)
 8000588:	701a      	strb	r2, [r3, #0]
	// Initialize for Manual Mode
	SCH_AddTask(traffic0Red, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <fsmManual+0x40>)
 8000590:	f000 ffce 	bl	8001530 <SCH_AddTask>
	SCH_AddTask(traffic1Green, 0, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2100      	movs	r1, #0
 8000598:	4807      	ldr	r0, [pc, #28]	@ (80005b8 <fsmManual+0x44>)
 800059a:	f000 ffc9 	bl	8001530 <SCH_AddTask>
	SCH_AddTask(lcd_manual_display, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	4806      	ldr	r0, [pc, #24]	@ (80005bc <fsmManual+0x48>)
 80005a4:	f000 ffc4 	bl	8001530 <SCH_AddTask>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	080004a9 	.word	0x080004a9
 80005b0:	200000fc 	.word	0x200000fc
 80005b4:	08001f49 	.word	0x08001f49
 80005b8:	08001f99 	.word	0x08001f99
 80005bc:	08000ddd 	.word	0x08000ddd

080005c0 <fsmTunningStop>:

void fsmTunningStop(void) {
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	return;
 80005c4:	bf00      	nop
}
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <fsmTunningProcessing>:

void fsmTunningProcessing(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
		if (buttonPressed(1) || server_button_pressed(1)) {
 80005d0:	2001      	movs	r0, #1
 80005d2:	f7ff fe4d 	bl	8000270 <buttonPressed>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d106      	bne.n	80005ea <fsmTunningProcessing+0x1e>
 80005dc:	2001      	movs	r0, #1
 80005de:	f001 fab5 	bl	8001b4c <server_button_pressed>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f000 80ba 	beq.w	800075e <fsmTunningProcessing+0x192>
			SCH_DeleteTask(fsmTunningIDs[1]);
 80005ea:	4bad      	ldr	r3, [pc, #692]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 f8a4 	bl	800173c <SCH_DeleteTask>
			SCH_DeleteTask(fsmTunningIDs[2]);
 80005f4:	4baa      	ldr	r3, [pc, #680]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 80005f6:	789b      	ldrb	r3, [r3, #2]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 f89f 	bl	800173c <SCH_DeleteTask>
			SCH_DeleteTask(fsmTunningIDs[3]);
 80005fe:	4ba8      	ldr	r3, [pc, #672]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 8000600:	78db      	ldrb	r3, [r3, #3]
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f89a 	bl	800173c <SCH_DeleteTask>
			SCH_DeleteTask(fsmTunningIDs[4]);
 8000608:	4ba5      	ldr	r3, [pc, #660]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f895 	bl	800173c <SCH_DeleteTask>
			switch (fsmTunningState) {
 8000612:	4ba4      	ldr	r3, [pc, #656]	@ (80008a4 <fsmTunningProcessing+0x2d8>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b03      	cmp	r3, #3
 8000618:	d06d      	beq.n	80006f6 <fsmTunningProcessing+0x12a>
 800061a:	2b03      	cmp	r3, #3
 800061c:	f300 809e 	bgt.w	800075c <fsmTunningProcessing+0x190>
 8000620:	2b01      	cmp	r3, #1
 8000622:	d002      	beq.n	800062a <fsmTunningProcessing+0x5e>
 8000624:	2b02      	cmp	r3, #2
 8000626:	d033      	beq.n	8000690 <fsmTunningProcessing+0xc4>
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
					fsmTunningState = TRAFFIC_RED;
					break;
				default:
					break;
 8000628:	e098      	b.n	800075c <fsmTunningProcessing+0x190>
					SCH_AddTask(lcd_tunning_green, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	489e      	ldr	r0, [pc, #632]	@ (80008a8 <fsmTunningProcessing+0x2dc>)
 8000630:	f000 ff7e 	bl	8001530 <SCH_AddTask>
					fsmTunningIDs[1] = SCH_AddTask(traffic0Green, 0, 1000);
 8000634:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000638:	2100      	movs	r1, #0
 800063a:	489c      	ldr	r0, [pc, #624]	@ (80008ac <fsmTunningProcessing+0x2e0>)
 800063c:	f000 ff78 	bl	8001530 <SCH_AddTask>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b96      	ldr	r3, [pc, #600]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 8000646:	705a      	strb	r2, [r3, #1]
					fsmTunningIDs[2] = SCH_AddTask(traffic1Green, 0, 1000);
 8000648:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800064c:	2100      	movs	r1, #0
 800064e:	4898      	ldr	r0, [pc, #608]	@ (80008b0 <fsmTunningProcessing+0x2e4>)
 8000650:	f000 ff6e 	bl	8001530 <SCH_AddTask>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b91      	ldr	r3, [pc, #580]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 800065a:	709a      	strb	r2, [r3, #2]
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 800065c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000660:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000664:	4893      	ldr	r0, [pc, #588]	@ (80008b4 <fsmTunningProcessing+0x2e8>)
 8000666:	f000 ff63 	bl	8001530 <SCH_AddTask>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	4b8c      	ldr	r3, [pc, #560]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 8000670:	70da      	strb	r2, [r3, #3]
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 8000672:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000676:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800067a:	488f      	ldr	r0, [pc, #572]	@ (80008b8 <fsmTunningProcessing+0x2ec>)
 800067c:	f000 ff58 	bl	8001530 <SCH_AddTask>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b86      	ldr	r3, [pc, #536]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 8000686:	711a      	strb	r2, [r3, #4]
					fsmTunningState = TRAFFIC_GREEN;
 8000688:	4b86      	ldr	r3, [pc, #536]	@ (80008a4 <fsmTunningProcessing+0x2d8>)
 800068a:	2202      	movs	r2, #2
 800068c:	701a      	strb	r2, [r3, #0]
					break;
 800068e:	e066      	b.n	800075e <fsmTunningProcessing+0x192>
					SCH_AddTask(lcd_tunning_yellow, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	4889      	ldr	r0, [pc, #548]	@ (80008bc <fsmTunningProcessing+0x2f0>)
 8000696:	f000 ff4b 	bl	8001530 <SCH_AddTask>
					fsmTunningIDs[1] = SCH_AddTask(traffic0Yellow, 0, 1000);
 800069a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800069e:	2100      	movs	r1, #0
 80006a0:	4887      	ldr	r0, [pc, #540]	@ (80008c0 <fsmTunningProcessing+0x2f4>)
 80006a2:	f000 ff45 	bl	8001530 <SCH_AddTask>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b7d      	ldr	r3, [pc, #500]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 80006ac:	705a      	strb	r2, [r3, #1]
					fsmTunningIDs[2] = SCH_AddTask(traffic1Yellow, 0, 1000);
 80006ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006b2:	2100      	movs	r1, #0
 80006b4:	4883      	ldr	r0, [pc, #524]	@ (80008c4 <fsmTunningProcessing+0x2f8>)
 80006b6:	f000 ff3b 	bl	8001530 <SCH_AddTask>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b78      	ldr	r3, [pc, #480]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 80006c0:	709a      	strb	r2, [r3, #2]
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 80006c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006c6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006ca:	487a      	ldr	r0, [pc, #488]	@ (80008b4 <fsmTunningProcessing+0x2e8>)
 80006cc:	f000 ff30 	bl	8001530 <SCH_AddTask>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b72      	ldr	r3, [pc, #456]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 80006d6:	70da      	strb	r2, [r3, #3]
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 80006d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006dc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006e0:	4875      	ldr	r0, [pc, #468]	@ (80008b8 <fsmTunningProcessing+0x2ec>)
 80006e2:	f000 ff25 	bl	8001530 <SCH_AddTask>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b6d      	ldr	r3, [pc, #436]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 80006ec:	711a      	strb	r2, [r3, #4]
					fsmTunningState = TRAFFIC_YELLOW;
 80006ee:	4b6d      	ldr	r3, [pc, #436]	@ (80008a4 <fsmTunningProcessing+0x2d8>)
 80006f0:	2203      	movs	r2, #3
 80006f2:	701a      	strb	r2, [r3, #0]
					break;
 80006f4:	e033      	b.n	800075e <fsmTunningProcessing+0x192>
					SCH_AddTask(lcd_tunning_red, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	4873      	ldr	r0, [pc, #460]	@ (80008c8 <fsmTunningProcessing+0x2fc>)
 80006fc:	f000 ff18 	bl	8001530 <SCH_AddTask>
					fsmTunningIDs[1] = SCH_AddTask(traffic0Red, 0, 1000);
 8000700:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000704:	2100      	movs	r1, #0
 8000706:	4871      	ldr	r0, [pc, #452]	@ (80008cc <fsmTunningProcessing+0x300>)
 8000708:	f000 ff12 	bl	8001530 <SCH_AddTask>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	4b63      	ldr	r3, [pc, #396]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 8000712:	705a      	strb	r2, [r3, #1]
					fsmTunningIDs[2] = SCH_AddTask(traffic1Red, 0, 1000);
 8000714:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000718:	2100      	movs	r1, #0
 800071a:	486d      	ldr	r0, [pc, #436]	@ (80008d0 <fsmTunningProcessing+0x304>)
 800071c:	f000 ff08 	bl	8001530 <SCH_AddTask>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b5e      	ldr	r3, [pc, #376]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 8000726:	709a      	strb	r2, [r3, #2]
					fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 8000728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800072c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000730:	4860      	ldr	r0, [pc, #384]	@ (80008b4 <fsmTunningProcessing+0x2e8>)
 8000732:	f000 fefd 	bl	8001530 <SCH_AddTask>
 8000736:	4603      	mov	r3, r0
 8000738:	461a      	mov	r2, r3
 800073a:	4b59      	ldr	r3, [pc, #356]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 800073c:	70da      	strb	r2, [r3, #3]
					fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 800073e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000742:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000746:	485c      	ldr	r0, [pc, #368]	@ (80008b8 <fsmTunningProcessing+0x2ec>)
 8000748:	f000 fef2 	bl	8001530 <SCH_AddTask>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4b53      	ldr	r3, [pc, #332]	@ (80008a0 <fsmTunningProcessing+0x2d4>)
 8000752:	711a      	strb	r2, [r3, #4]
					fsmTunningState = TRAFFIC_RED;
 8000754:	4b53      	ldr	r3, [pc, #332]	@ (80008a4 <fsmTunningProcessing+0x2d8>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
					break;
 800075a:	e000      	b.n	800075e <fsmTunningProcessing+0x192>
					break;
 800075c:	bf00      	nop
			}
		}

		if (buttonPressed(2) || server_button_pressed(2)) {
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff fd86 	bl	8000270 <buttonPressed>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d105      	bne.n	8000776 <fsmTunningProcessing+0x1aa>
 800076a:	2002      	movs	r0, #2
 800076c:	f001 f9ee 	bl	8001b4c <server_button_pressed>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d050      	beq.n	8000818 <fsmTunningProcessing+0x24c>
			switch (fsmTunningState) {
 8000776:	4b4b      	ldr	r3, [pc, #300]	@ (80008a4 <fsmTunningProcessing+0x2d8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d034      	beq.n	80007e8 <fsmTunningProcessing+0x21c>
 800077e:	2b03      	cmp	r3, #3
 8000780:	dc49      	bgt.n	8000816 <fsmTunningProcessing+0x24a>
 8000782:	2b01      	cmp	r3, #1
 8000784:	d002      	beq.n	800078c <fsmTunningProcessing+0x1c0>
 8000786:	2b02      	cmp	r3, #2
 8000788:	d017      	beq.n	80007ba <fsmTunningProcessing+0x1ee>
						trafficYellowDuration = TRAFFIC_DURATION_MAX;
					}
					SCH_AddTask(lcd_tunning_yellow, 0, 0);
					break;
				default:
					break;
 800078a:	e044      	b.n	8000816 <fsmTunningProcessing+0x24a>
					if (trafficRedDuration < TRAFFIC_DURATION_MAX - TRAFFIC_DURATION_AUTO) {
 800078c:	4b51      	ldr	r3, [pc, #324]	@ (80008d4 <fsmTunningProcessing+0x308>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f644 2237 	movw	r2, #18999	@ 0x4a37
 8000794:	4293      	cmp	r3, r2
 8000796:	d806      	bhi.n	80007a6 <fsmTunningProcessing+0x1da>
						trafficRedDuration += TRAFFIC_DURATION_AUTO;
 8000798:	4b4e      	ldr	r3, [pc, #312]	@ (80008d4 <fsmTunningProcessing+0x308>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80007a0:	4a4c      	ldr	r2, [pc, #304]	@ (80008d4 <fsmTunningProcessing+0x308>)
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	e003      	b.n	80007ae <fsmTunningProcessing+0x1e2>
						trafficRedDuration = TRAFFIC_DURATION_MAX;
 80007a6:	4b4b      	ldr	r3, [pc, #300]	@ (80008d4 <fsmTunningProcessing+0x308>)
 80007a8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80007ac:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_red, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	4845      	ldr	r0, [pc, #276]	@ (80008c8 <fsmTunningProcessing+0x2fc>)
 80007b4:	f000 febc 	bl	8001530 <SCH_AddTask>
					break;
 80007b8:	e02e      	b.n	8000818 <fsmTunningProcessing+0x24c>
					if (trafficGreenDuration < TRAFFIC_DURATION_MAX - TRAFFIC_DURATION_AUTO) {
 80007ba:	4b47      	ldr	r3, [pc, #284]	@ (80008d8 <fsmTunningProcessing+0x30c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f644 2237 	movw	r2, #18999	@ 0x4a37
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d806      	bhi.n	80007d4 <fsmTunningProcessing+0x208>
						trafficGreenDuration += TRAFFIC_DURATION_AUTO;
 80007c6:	4b44      	ldr	r3, [pc, #272]	@ (80008d8 <fsmTunningProcessing+0x30c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80007ce:	4a42      	ldr	r2, [pc, #264]	@ (80008d8 <fsmTunningProcessing+0x30c>)
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	e003      	b.n	80007dc <fsmTunningProcessing+0x210>
						trafficGreenDuration = TRAFFIC_DURATION_MAX;
 80007d4:	4b40      	ldr	r3, [pc, #256]	@ (80008d8 <fsmTunningProcessing+0x30c>)
 80007d6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80007da:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_green, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	4831      	ldr	r0, [pc, #196]	@ (80008a8 <fsmTunningProcessing+0x2dc>)
 80007e2:	f000 fea5 	bl	8001530 <SCH_AddTask>
					break;
 80007e6:	e017      	b.n	8000818 <fsmTunningProcessing+0x24c>
					if (trafficYellowDuration < TRAFFIC_DURATION_MAX - TRAFFIC_DURATION_AUTO) {
 80007e8:	4b3c      	ldr	r3, [pc, #240]	@ (80008dc <fsmTunningProcessing+0x310>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f644 2237 	movw	r2, #18999	@ 0x4a37
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d806      	bhi.n	8000802 <fsmTunningProcessing+0x236>
						trafficYellowDuration += TRAFFIC_DURATION_AUTO;
 80007f4:	4b39      	ldr	r3, [pc, #228]	@ (80008dc <fsmTunningProcessing+0x310>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80007fc:	4a37      	ldr	r2, [pc, #220]	@ (80008dc <fsmTunningProcessing+0x310>)
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	e003      	b.n	800080a <fsmTunningProcessing+0x23e>
						trafficYellowDuration = TRAFFIC_DURATION_MAX;
 8000802:	4b36      	ldr	r3, [pc, #216]	@ (80008dc <fsmTunningProcessing+0x310>)
 8000804:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000808:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_yellow, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	482b      	ldr	r0, [pc, #172]	@ (80008bc <fsmTunningProcessing+0x2f0>)
 8000810:	f000 fe8e 	bl	8001530 <SCH_AddTask>
					break;
 8000814:	e000      	b.n	8000818 <fsmTunningProcessing+0x24c>
					break;
 8000816:	bf00      	nop
			}
		}

		if (buttonPressed(3) || server_button_pressed(3)) {
 8000818:	2003      	movs	r0, #3
 800081a:	f7ff fd29 	bl	8000270 <buttonPressed>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d105      	bne.n	8000830 <fsmTunningProcessing+0x264>
 8000824:	2003      	movs	r0, #3
 8000826:	f001 f991 	bl	8001b4c <server_button_pressed>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d06e      	beq.n	800090e <fsmTunningProcessing+0x342>
			switch (fsmTunningState) {
 8000830:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <fsmTunningProcessing+0x2d8>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b03      	cmp	r3, #3
 8000836:	d053      	beq.n	80008e0 <fsmTunningProcessing+0x314>
 8000838:	2b03      	cmp	r3, #3
 800083a:	dc67      	bgt.n	800090c <fsmTunningProcessing+0x340>
 800083c:	2b01      	cmp	r3, #1
 800083e:	d002      	beq.n	8000846 <fsmTunningProcessing+0x27a>
 8000840:	2b02      	cmp	r3, #2
 8000842:	d016      	beq.n	8000872 <fsmTunningProcessing+0x2a6>
						trafficYellowDuration = TRAFFIC_DURATION_MIN;
					}
					SCH_AddTask(lcd_tunning_yellow, 0, 0);
					break;
				default:
					break;
 8000844:	e062      	b.n	800090c <fsmTunningProcessing+0x340>
					if (trafficRedDuration > TRAFFIC_DURATION_MIN + TRAFFIC_DURATION_AUTO) {
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <fsmTunningProcessing+0x308>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800084e:	d906      	bls.n	800085e <fsmTunningProcessing+0x292>
						trafficRedDuration -= TRAFFIC_DURATION_AUTO;
 8000850:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <fsmTunningProcessing+0x308>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000858:	4a1e      	ldr	r2, [pc, #120]	@ (80008d4 <fsmTunningProcessing+0x308>)
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	e003      	b.n	8000866 <fsmTunningProcessing+0x29a>
						trafficRedDuration = TRAFFIC_DURATION_MIN;
 800085e:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <fsmTunningProcessing+0x308>)
 8000860:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000864:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_red, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	4817      	ldr	r0, [pc, #92]	@ (80008c8 <fsmTunningProcessing+0x2fc>)
 800086c:	f000 fe60 	bl	8001530 <SCH_AddTask>
					break;
 8000870:	e04d      	b.n	800090e <fsmTunningProcessing+0x342>
					if (trafficGreenDuration > TRAFFIC_DURATION_MIN + TRAFFIC_DURATION_AUTO) {
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <fsmTunningProcessing+0x30c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800087a:	d906      	bls.n	800088a <fsmTunningProcessing+0x2be>
						trafficGreenDuration -= TRAFFIC_DURATION_AUTO;
 800087c:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <fsmTunningProcessing+0x30c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000884:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <fsmTunningProcessing+0x30c>)
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	e003      	b.n	8000892 <fsmTunningProcessing+0x2c6>
						trafficGreenDuration = TRAFFIC_DURATION_MIN;
 800088a:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <fsmTunningProcessing+0x30c>)
 800088c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000890:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_green, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <fsmTunningProcessing+0x2dc>)
 8000898:	f000 fe4a 	bl	8001530 <SCH_AddTask>
					break;
 800089c:	e037      	b.n	800090e <fsmTunningProcessing+0x342>
 800089e:	bf00      	nop
 80008a0:	20000100 	.word	0x20000100
 80008a4:	200000e9 	.word	0x200000e9
 80008a8:	08000e51 	.word	0x08000e51
 80008ac:	08001f59 	.word	0x08001f59
 80008b0:	08001f99 	.word	0x08001f99
 80008b4:	08001f39 	.word	0x08001f39
 80008b8:	08001f79 	.word	0x08001f79
 80008bc:	08000ea5 	.word	0x08000ea5
 80008c0:	08001f69 	.word	0x08001f69
 80008c4:	08001fa9 	.word	0x08001fa9
 80008c8:	08000dfd 	.word	0x08000dfd
 80008cc:	08001f49 	.word	0x08001f49
 80008d0:	08001f89 	.word	0x08001f89
 80008d4:	2000004c 	.word	0x2000004c
 80008d8:	20000050 	.word	0x20000050
 80008dc:	20000054 	.word	0x20000054
					if (trafficYellowDuration > TRAFFIC_DURATION_MIN + TRAFFIC_DURATION_AUTO) {
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <fsmTunningProcessing+0x348>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80008e8:	d906      	bls.n	80008f8 <fsmTunningProcessing+0x32c>
						trafficYellowDuration -= TRAFFIC_DURATION_AUTO;
 80008ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <fsmTunningProcessing+0x348>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <fsmTunningProcessing+0x348>)
 80008f4:	6013      	str	r3, [r2, #0]
 80008f6:	e003      	b.n	8000900 <fsmTunningProcessing+0x334>
						trafficYellowDuration = TRAFFIC_DURATION_MIN;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <fsmTunningProcessing+0x348>)
 80008fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008fe:	601a      	str	r2, [r3, #0]
					SCH_AddTask(lcd_tunning_yellow, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <fsmTunningProcessing+0x34c>)
 8000906:	f000 fe13 	bl	8001530 <SCH_AddTask>
					break;
 800090a:	e000      	b.n	800090e <fsmTunningProcessing+0x342>
					break;
 800090c:	bf00      	nop
				}
		}
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000054 	.word	0x20000054
 8000918:	08000ea5 	.word	0x08000ea5

0800091c <fsmTunning>:

void fsmTunning(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	fsmTunningIDs[0] = SCH_AddTask(fsmTunningProcessing, 10, TIMER_TICK);
 8000920:	220a      	movs	r2, #10
 8000922:	210a      	movs	r1, #10
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <fsmTunning+0x80>)
 8000926:	f000 fe03 	bl	8001530 <SCH_AddTask>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <fsmTunning+0x84>)
 8000930:	701a      	strb	r2, [r3, #0]
	// Initialize for Tunning Mode
	fsmTunningState = TRAFFIC_RED;
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <fsmTunning+0x88>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
	SCH_AddTask(lcd_tunning_red, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	481a      	ldr	r0, [pc, #104]	@ (80009a8 <fsmTunning+0x8c>)
 800093e:	f000 fdf7 	bl	8001530 <SCH_AddTask>
	fsmTunningIDs[1] = SCH_AddTask(traffic0Red, 0, 1000);
 8000942:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000946:	2100      	movs	r1, #0
 8000948:	4818      	ldr	r0, [pc, #96]	@ (80009ac <fsmTunning+0x90>)
 800094a:	f000 fdf1 	bl	8001530 <SCH_AddTask>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <fsmTunning+0x84>)
 8000954:	705a      	strb	r2, [r3, #1]
	fsmTunningIDs[2] = SCH_AddTask(traffic1Red, 0, 1000);
 8000956:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800095a:	2100      	movs	r1, #0
 800095c:	4814      	ldr	r0, [pc, #80]	@ (80009b0 <fsmTunning+0x94>)
 800095e:	f000 fde7 	bl	8001530 <SCH_AddTask>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <fsmTunning+0x84>)
 8000968:	709a      	strb	r2, [r3, #2]
	fsmTunningIDs[3] = SCH_AddTask(traffic0Off, 500, 1000);
 800096a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800096e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000972:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <fsmTunning+0x98>)
 8000974:	f000 fddc 	bl	8001530 <SCH_AddTask>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <fsmTunning+0x84>)
 800097e:	70da      	strb	r2, [r3, #3]
	fsmTunningIDs[4] = SCH_AddTask(traffic1Off, 500, 1000);
 8000980:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000984:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000988:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <fsmTunning+0x9c>)
 800098a:	f000 fdd1 	bl	8001530 <SCH_AddTask>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b03      	ldr	r3, [pc, #12]	@ (80009a0 <fsmTunning+0x84>)
 8000994:	711a      	strb	r2, [r3, #4]
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	080005cd 	.word	0x080005cd
 80009a0:	20000100 	.word	0x20000100
 80009a4:	200000e9 	.word	0x200000e9
 80009a8:	08000dfd 	.word	0x08000dfd
 80009ac:	08001f49 	.word	0x08001f49
 80009b0:	08001f89 	.word	0x08001f89
 80009b4:	08001f39 	.word	0x08001f39
 80009b8:	08001f79 	.word	0x08001f79

080009bc <fsmInit>:

void fsmInit(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	fsmState = FSM_INIT;
 80009c0:	4b04      	ldr	r3, [pc, #16]	@ (80009d4 <fsmInit+0x18>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
	SCH_AddTask(lcd_init_display, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <fsmInit+0x1c>)
 80009cc:	f000 fdb0 	bl	8001530 <SCH_AddTask>
//	fsmIDs[0] = SCH_AddTask(testLED, 0, 0);
//	SCH_AddTask(testButton, 0, TIMER_TICK);
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000e8 	.word	0x200000e8
 80009d8:	08000d41 	.word	0x08000d41

080009dc <fsmProcessing>:

void fsmProcessing(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
	if (buttonPressed(0) || server_button_pressed(0)) {
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fc44 	bl	8000270 <buttonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d106      	bne.n	80009fc <fsmProcessing+0x20>
 80009ee:	2000      	movs	r0, #0
 80009f0:	f001 f8ac 	bl	8001b4c <server_button_pressed>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 8097 	beq.w	8000b2a <fsmProcessing+0x14e>
		switch (fsmState) {
 80009fc:	4b4d      	ldr	r3, [pc, #308]	@ (8000b34 <fsmProcessing+0x158>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	f200 808f 	bhi.w	8000b24 <fsmProcessing+0x148>
 8000a06:	a201      	add	r2, pc, #4	@ (adr r2, 8000a0c <fsmProcessing+0x30>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a1d 	.word	0x08000a1d
 8000a10:	08000a4d 	.word	0x08000a4d
 8000a14:	08000a87 	.word	0x08000a87
 8000a18:	08000ac1 	.word	0x08000ac1
			case FSM_INIT:
				for (uint8_t i = 0; i < FSM_TASK; i ++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	e008      	b.n	8000a34 <fsmProcessing+0x58>
					SCH_DeleteTask(fsmIDs[i]);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4a44      	ldr	r2, [pc, #272]	@ (8000b38 <fsmProcessing+0x15c>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fe87 	bl	800173c <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_TASK; i ++) {
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	3301      	adds	r3, #1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0f3      	beq.n	8000a22 <fsmProcessing+0x46>
				}
				SCH_AddTask(fsmAuto, 10, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210a      	movs	r1, #10
 8000a3e:	483f      	ldr	r0, [pc, #252]	@ (8000b3c <fsmProcessing+0x160>)
 8000a40:	f000 fd76 	bl	8001530 <SCH_AddTask>
				fsmState = FSM_AUTO;
 8000a44:	4b3b      	ldr	r3, [pc, #236]	@ (8000b34 <fsmProcessing+0x158>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
				break;
 8000a4a:	e06e      	b.n	8000b2a <fsmProcessing+0x14e>
			case FSM_AUTO:
				for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	71bb      	strb	r3, [r7, #6]
 8000a50:	e008      	b.n	8000a64 <fsmProcessing+0x88>
					SCH_DeleteTask(fsmAutoIDs[i]);
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	4a3a      	ldr	r2, [pc, #232]	@ (8000b40 <fsmProcessing+0x164>)
 8000a56:	5cd3      	ldrb	r3, [r2, r3]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fe6f 	bl	800173c <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000a5e:	79bb      	ldrb	r3, [r7, #6]
 8000a60:	3301      	adds	r3, #1
 8000a62:	71bb      	strb	r3, [r7, #6]
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	2b0a      	cmp	r3, #10
 8000a68:	d9f3      	bls.n	8000a52 <fsmProcessing+0x76>
				}
				SCH_AddTask(fsmAutoStop, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4835      	ldr	r0, [pc, #212]	@ (8000b44 <fsmProcessing+0x168>)
 8000a70:	f000 fd5e 	bl	8001530 <SCH_AddTask>
				SCH_AddTask(fsmManual, 10, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	210a      	movs	r1, #10
 8000a78:	4833      	ldr	r0, [pc, #204]	@ (8000b48 <fsmProcessing+0x16c>)
 8000a7a:	f000 fd59 	bl	8001530 <SCH_AddTask>
				fsmState = FSM_MANUAL;
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b34 <fsmProcessing+0x158>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	701a      	strb	r2, [r3, #0]
				break;
 8000a84:	e051      	b.n	8000b2a <fsmProcessing+0x14e>
			case FSM_MANUAL:
				for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	717b      	strb	r3, [r7, #5]
 8000a8a:	e008      	b.n	8000a9e <fsmProcessing+0xc2>
					SCH_DeleteTask(fsmManualIDs[i]);
 8000a8c:	797b      	ldrb	r3, [r7, #5]
 8000a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8000b4c <fsmProcessing+0x170>)
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fe52 	bl	800173c <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000a98:	797b      	ldrb	r3, [r7, #5]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	717b      	strb	r3, [r7, #5]
 8000a9e:	797b      	ldrb	r3, [r7, #5]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d9f3      	bls.n	8000a8c <fsmProcessing+0xb0>
				}
				SCH_AddTask(fsmManualStop, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4829      	ldr	r0, [pc, #164]	@ (8000b50 <fsmProcessing+0x174>)
 8000aaa:	f000 fd41 	bl	8001530 <SCH_AddTask>
				SCH_AddTask(fsmTunning, 10, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	210a      	movs	r1, #10
 8000ab2:	4828      	ldr	r0, [pc, #160]	@ (8000b54 <fsmProcessing+0x178>)
 8000ab4:	f000 fd3c 	bl	8001530 <SCH_AddTask>
				fsmState = FSM_TUNNING;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <fsmProcessing+0x158>)
 8000aba:	2203      	movs	r2, #3
 8000abc:	701a      	strb	r2, [r3, #0]
				break;
 8000abe:	e034      	b.n	8000b2a <fsmProcessing+0x14e>
			case FSM_TUNNING:
				for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	713b      	strb	r3, [r7, #4]
 8000ac4:	e008      	b.n	8000ad8 <fsmProcessing+0xfc>
					SCH_DeleteTask(fsmTunningIDs[i]);
 8000ac6:	793b      	ldrb	r3, [r7, #4]
 8000ac8:	4a23      	ldr	r2, [pc, #140]	@ (8000b58 <fsmProcessing+0x17c>)
 8000aca:	5cd3      	ldrb	r3, [r2, r3]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fe35 	bl	800173c <SCH_DeleteTask>
				for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	713b      	strb	r3, [r7, #4]
 8000ad8:	793b      	ldrb	r3, [r7, #4]
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d9f3      	bls.n	8000ac6 <fsmProcessing+0xea>
				}
				SCH_AddTask(fsmTunningStop, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	481e      	ldr	r0, [pc, #120]	@ (8000b5c <fsmProcessing+0x180>)
 8000ae4:	f000 fd24 	bl	8001530 <SCH_AddTask>
				SCH_AddTask(fsmAuto, 10, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	210a      	movs	r1, #10
 8000aec:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <fsmProcessing+0x160>)
 8000aee:	f000 fd1f 	bl	8001530 <SCH_AddTask>
				fsmState = FSM_AUTO;
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <fsmProcessing+0x158>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]

				// If the time between red, green, light isn't correct
				if (trafficRedDuration != (trafficGreenDuration + trafficYellowDuration)) {
 8000af8:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <fsmProcessing+0x184>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <fsmProcessing+0x188>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	441a      	add	r2, r3
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <fsmProcessing+0x18c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d00e      	beq.n	8000b28 <fsmProcessing+0x14c>
					// Set it to default
					trafficRedDuration = 5000;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <fsmProcessing+0x18c>)
 8000b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b10:	601a      	str	r2, [r3, #0]
					trafficGreenDuration = 3000;
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <fsmProcessing+0x184>)
 8000b14:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000b18:	601a      	str	r2, [r3, #0]
					trafficYellowDuration = 2000;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <fsmProcessing+0x188>)
 8000b1c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b20:	601a      	str	r2, [r3, #0]
				}
				break;
 8000b22:	e001      	b.n	8000b28 <fsmProcessing+0x14c>
			default:
				break;
 8000b24:	bf00      	nop
 8000b26:	e000      	b.n	8000b2a <fsmProcessing+0x14e>
				break;
 8000b28:	bf00      	nop
		}
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000e8 	.word	0x200000e8
 8000b38:	200000ec 	.word	0x200000ec
 8000b3c:	08000331 	.word	0x08000331
 8000b40:	200000f0 	.word	0x200000f0
 8000b44:	0800030d 	.word	0x0800030d
 8000b48:	08000575 	.word	0x08000575
 8000b4c:	200000fc 	.word	0x200000fc
 8000b50:	08000485 	.word	0x08000485
 8000b54:	0800091d 	.word	0x0800091d
 8000b58:	20000100 	.word	0x20000100
 8000b5c:	080005c1 	.word	0x080005c1
 8000b60:	20000050 	.word	0x20000050
 8000b64:	20000054 	.word	0x20000054
 8000b68:	2000004c 	.word	0x2000004c

08000b6c <LCD_I2C_Write_CMD>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define addr_pcf8574 0x21<<1

void LCD_I2C_Write_CMD(uint8_t cmd)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];

    data_u = (cmd & 0xF0);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f023 030f 	bic.w	r3, r3, #15
 8000b7c:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_u | 0x0C;  // EN=1, RS=0
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	f043 030c 	orr.w	r3, r3, #12
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // EN=0, RS=0
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;  // EN=1, RS=0
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	f043 030c 	orr.w	r3, r3, #12
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // EN=0, RS=0
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, addr_pcf8574, data_t, 4, HAL_MAX_DELAY);
 8000bac:	f107 0208 	add.w	r2, r7, #8
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	2142      	movs	r1, #66	@ 0x42
 8000bba:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <LCD_I2C_Write_CMD+0x5c>)
 8000bbc:	f001 fee8 	bl	8002990 <HAL_I2C_Master_Transmit>
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000108 	.word	0x20000108

08000bcc <LCD_I2C_Write_DATA>:

void LCD_I2C_Write_DATA(uint8_t data)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];

    data_u = (data & 0xF0);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f023 030f 	bic.w	r3, r3, #15
 8000bdc:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xF0);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	73bb      	strb	r3, [r7, #14]

    data_t[0] = data_u | 0x0D;  // EN=1, RS=1
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	f043 030d 	orr.w	r3, r3, #13
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // EN=0, RS=1
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	f043 0309 	orr.w	r3, r3, #9
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  // EN=1, RS=1
 8000bf8:	7bbb      	ldrb	r3, [r7, #14]
 8000bfa:	f043 030d 	orr.w	r3, r3, #13
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // EN=0, RS=1
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	f043 0309 	orr.w	r3, r3, #9
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(&hi2c1, addr_pcf8574, data_t, 4, HAL_MAX_DELAY);
 8000c0c:	f107 0208 	add.w	r2, r7, #8
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2304      	movs	r3, #4
 8000c18:	2142      	movs	r1, #66	@ 0x42
 8000c1a:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <LCD_I2C_Write_DATA+0x5c>)
 8000c1c:	f001 feb8 	bl	8002990 <HAL_I2C_Master_Transmit>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000108 	.word	0x20000108

08000c2c <LCD_I2C_Init>:
void LCD_I2C_Init()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	LCD_I2C_Write_CMD(0x33);
 8000c30:	2033      	movs	r0, #51	@ 0x33
 8000c32:	f7ff ff9b 	bl	8000b6c <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x32);
 8000c36:	2032      	movs	r0, #50	@ 0x32
 8000c38:	f7ff ff98 	bl	8000b6c <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c3c:	2032      	movs	r0, #50	@ 0x32
 8000c3e:	f001 fa43 	bl	80020c8 <HAL_Delay>
	LCD_I2C_Write_CMD(0x28);
 8000c42:	2028      	movs	r0, #40	@ 0x28
 8000c44:	f7ff ff92 	bl	8000b6c <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c48:	2032      	movs	r0, #50	@ 0x32
 8000c4a:	f001 fa3d 	bl	80020c8 <HAL_Delay>
	LCD_I2C_Write_CMD(0x01);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff ff8c 	bl	8000b6c <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c54:	2032      	movs	r0, #50	@ 0x32
 8000c56:	f001 fa37 	bl	80020c8 <HAL_Delay>
	LCD_I2C_Write_CMD(0x06);
 8000c5a:	2006      	movs	r0, #6
 8000c5c:	f7ff ff86 	bl	8000b6c <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c60:	2032      	movs	r0, #50	@ 0x32
 8000c62:	f001 fa31 	bl	80020c8 <HAL_Delay>
	LCD_I2C_Write_CMD(0x0C);
 8000c66:	200c      	movs	r0, #12
 8000c68:	f7ff ff80 	bl	8000b6c <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c6c:	2032      	movs	r0, #50	@ 0x32
 8000c6e:	f001 fa2b 	bl	80020c8 <HAL_Delay>
	LCD_I2C_Write_CMD (0x02); /* move cursor to home and set data address to 0 */
 8000c72:	2002      	movs	r0, #2
 8000c74:	f7ff ff7a 	bl	8000b6c <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c78:	2032      	movs	r0, #50	@ 0x32
 8000c7a:	f001 fa25 	bl	80020c8 <HAL_Delay>
	LCD_I2C_Write_CMD (0x80);
 8000c7e:	2080      	movs	r0, #128	@ 0x80
 8000c80:	f7ff ff74 	bl	8000b6c <LCD_I2C_Write_CMD>

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <LCD_I2C_Clear>:
void LCD_I2C_Clear()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	LCD_I2C_Write_CMD(0x01);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ff6d 	bl	8000b6c <LCD_I2C_Write_CMD>
	HAL_Delay(50);
 8000c92:	2032      	movs	r0, #50	@ 0x32
 8000c94:	f001 fa18 	bl	80020c8 <HAL_Delay>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <LCD_I2C_Location>:
void LCD_I2C_Location(uint8_t x, uint8_t y)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	71bb      	strb	r3, [r7, #6]
	if(x==0)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d106      	bne.n	8000cc0 <LCD_I2C_Location+0x24>
	{
		LCD_I2C_Write_CMD(0x80+y);
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	3b80      	subs	r3, #128	@ 0x80
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff57 	bl	8000b6c <LCD_I2C_Write_CMD>
	}
	else if(x==1)
	{
		LCD_I2C_Write_CMD(0xC0+y);
	}
}
 8000cbe:	e008      	b.n	8000cd2 <LCD_I2C_Location+0x36>
	else if(x==1)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d105      	bne.n	8000cd2 <LCD_I2C_Location+0x36>
		LCD_I2C_Write_CMD(0xC0+y);
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	3b40      	subs	r3, #64	@ 0x40
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff4d 	bl	8000b6c <LCD_I2C_Write_CMD>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <LCD_I2C_Write_String>:
void LCD_I2C_Write_String(char* string)
{
 8000cda:	b590      	push	{r4, r7, lr}
 8000cdc:	b085      	sub	sp, #20
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<strlen(string); i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e009      	b.n	8000cfc <LCD_I2C_Write_String+0x22>
	{
		LCD_I2C_Write_DATA(string[i]);
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff6b 	bl	8000bcc <LCD_I2C_Write_DATA>
	for(uint8_t i=0;i<strlen(string); i++)
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	7bfc      	ldrb	r4, [r7, #15]
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fa24 	bl	800014c <strlen>
 8000d04:	4603      	mov	r3, r0
 8000d06:	429c      	cmp	r4, r3
 8000d08:	d3ee      	bcc.n	8000ce8 <LCD_I2C_Write_String+0xe>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd90      	pop	{r4, r7, pc}

08000d14 <LCD_I2C_Write_Number>:
void LCD_I2C_Write_Number(int number)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	char buffer[8];
    sprintf(buffer,"%d",number);
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4906      	ldr	r1, [pc, #24]	@ (8000d3c <LCD_I2C_Write_Number+0x28>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fa6b 	bl	8004200 <siprintf>
    LCD_I2C_Write_String(buffer);
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ffd3 	bl	8000cda <LCD_I2C_Write_String>
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	08004b78 	.word	0x08004b78

08000d40 <lcd_init_display>:
// Application layer
void lcd_init_display() {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000d44:	f7ff ffa0 	bl	8000c88 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 2);
 8000d48:	2102      	movs	r1, #2
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff ffa6 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("TRAFFIC LIGHT");
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <lcd_init_display+0x28>)
 8000d52:	f7ff ffc2 	bl	8000cda <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 5);
 8000d56:	2105      	movs	r1, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff ff9f 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("SYSTEM");
 8000d5e:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <lcd_init_display+0x2c>)
 8000d60:	f7ff ffbb 	bl	8000cda <LCD_I2C_Write_String>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	08004b7c 	.word	0x08004b7c
 8000d6c:	08004b8c 	.word	0x08004b8c

08000d70 <lcd_auto_display>:

void lcd_auto_display() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000d74:	f7ff ff88 	bl	8000c88 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 0);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff ff8e 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("TRAFFIC1: ");
 8000d80:	4812      	ldr	r0, [pc, #72]	@ (8000dcc <lcd_auto_display+0x5c>)
 8000d82:	f7ff ffaa 	bl	8000cda <LCD_I2C_Write_String>
	LCD_I2C_Location(0, 11);
 8000d86:	210b      	movs	r1, #11
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ff87 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_Number(trafficCounters[0]/1000);
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <lcd_auto_display+0x60>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a10      	ldr	r2, [pc, #64]	@ (8000dd4 <lcd_auto_display+0x64>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	099b      	lsrs	r3, r3, #6
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ffba 	bl	8000d14 <LCD_I2C_Write_Number>
	LCD_I2C_Location(1, 0);
 8000da0:	2100      	movs	r1, #0
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff ff7a 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("TRAFFIC2: ");
 8000da8:	480b      	ldr	r0, [pc, #44]	@ (8000dd8 <lcd_auto_display+0x68>)
 8000daa:	f7ff ff96 	bl	8000cda <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 11);
 8000dae:	210b      	movs	r1, #11
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff ff73 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_Number(trafficCounters[1]/1000);
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <lcd_auto_display+0x60>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	4a06      	ldr	r2, [pc, #24]	@ (8000dd4 <lcd_auto_display+0x64>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	099b      	lsrs	r3, r3, #6
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ffa6 	bl	8000d14 <LCD_I2C_Write_Number>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	08004b94 	.word	0x08004b94
 8000dd0:	2000038c 	.word	0x2000038c
 8000dd4:	10624dd3 	.word	0x10624dd3
 8000dd8:	08004ba0 	.word	0x08004ba0

08000ddc <lcd_manual_display>:

void lcd_manual_display() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000de0:	f7ff ff52 	bl	8000c88 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 0);
 8000de4:	2100      	movs	r1, #0
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff ff58 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("MANUAL MODE");
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <lcd_manual_display+0x1c>)
 8000dee:	f7ff ff74 	bl	8000cda <LCD_I2C_Write_String>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	08004bac 	.word	0x08004bac

08000dfc <lcd_tunning_red>:
	LCD_I2C_Clear();
	LCD_I2C_Location(0, 2);
	LCD_I2C_Write_String("TUNNING MODE");
}

void lcd_tunning_red() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000e00:	f7ff ff42 	bl	8000c88 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 0);
 8000e04:	2100      	movs	r1, #0
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ff48 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("TUNNING MODE");
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <lcd_tunning_red+0x44>)
 8000e0e:	f7ff ff64 	bl	8000cda <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 0);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff ff41 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("RED: ");
 8000e1a:	480a      	ldr	r0, [pc, #40]	@ (8000e44 <lcd_tunning_red+0x48>)
 8000e1c:	f7ff ff5d 	bl	8000cda <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 6);
 8000e20:	2106      	movs	r1, #6
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff ff3a 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_Number(trafficRedDuration / 1000);
 8000e28:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <lcd_tunning_red+0x4c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	@ (8000e4c <lcd_tunning_red+0x50>)
 8000e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e32:	099b      	lsrs	r3, r3, #6
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff6d 	bl	8000d14 <LCD_I2C_Write_Number>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08004bb8 	.word	0x08004bb8
 8000e44:	08004bc8 	.word	0x08004bc8
 8000e48:	2000004c 	.word	0x2000004c
 8000e4c:	10624dd3 	.word	0x10624dd3

08000e50 <lcd_tunning_green>:
void lcd_tunning_green() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000e54:	f7ff ff18 	bl	8000c88 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 0);
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff ff1e 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("TUNNING MODE");
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <lcd_tunning_green+0x44>)
 8000e62:	f7ff ff3a 	bl	8000cda <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 0);
 8000e66:	2100      	movs	r1, #0
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff ff17 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("GREEN: ");
 8000e6e:	480a      	ldr	r0, [pc, #40]	@ (8000e98 <lcd_tunning_green+0x48>)
 8000e70:	f7ff ff33 	bl	8000cda <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 8);
 8000e74:	2108      	movs	r1, #8
 8000e76:	2001      	movs	r0, #1
 8000e78:	f7ff ff10 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_Number(trafficGreenDuration/ 1000);
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <lcd_tunning_green+0x4c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <lcd_tunning_green+0x50>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	099b      	lsrs	r3, r3, #6
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff43 	bl	8000d14 <LCD_I2C_Write_Number>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	08004bb8 	.word	0x08004bb8
 8000e98:	08004bd0 	.word	0x08004bd0
 8000e9c:	20000050 	.word	0x20000050
 8000ea0:	10624dd3 	.word	0x10624dd3

08000ea4 <lcd_tunning_yellow>:
void lcd_tunning_yellow() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	LCD_I2C_Clear();
 8000ea8:	f7ff feee 	bl	8000c88 <LCD_I2C_Clear>
	LCD_I2C_Location(0, 0);
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fef4 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("TUNNING MODE");
 8000eb4:	480c      	ldr	r0, [pc, #48]	@ (8000ee8 <lcd_tunning_yellow+0x44>)
 8000eb6:	f7ff ff10 	bl	8000cda <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 0);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff feed 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_String("YELLOW: ");
 8000ec2:	480a      	ldr	r0, [pc, #40]	@ (8000eec <lcd_tunning_yellow+0x48>)
 8000ec4:	f7ff ff09 	bl	8000cda <LCD_I2C_Write_String>
	LCD_I2C_Location(1, 9);
 8000ec8:	2109      	movs	r1, #9
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff fee6 	bl	8000c9c <LCD_I2C_Location>
	LCD_I2C_Write_Number(trafficYellowDuration / 1000);
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <lcd_tunning_yellow+0x4c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <lcd_tunning_yellow+0x50>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	099b      	lsrs	r3, r3, #6
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff19 	bl	8000d14 <LCD_I2C_Write_Number>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	08004bb8 	.word	0x08004bb8
 8000eec:	08004bd8 	.word	0x08004bd8
 8000ef0:	20000054 	.word	0x20000054
 8000ef4:	10624dd3 	.word	0x10624dd3

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efc:	f001 f882 	bl	8002004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f00:	f000 f83e 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f000 f922 	bl	800114c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f08:	f000 f8f6 	bl	80010f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f0c:	f000 f8a8 	bl	8001060 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f10:	f000 f878 	bl	8001004 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f14:	4813      	ldr	r0, [pc, #76]	@ (8000f64 <main+0x6c>)
 8000f16:	f002 fcf3 	bl	8003900 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000f1a:	f000 fa7f 	bl	800141c <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(testMCU, 0, 500);
 8000f1e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f22:	2100      	movs	r1, #0
 8000f24:	4810      	ldr	r0, [pc, #64]	@ (8000f68 <main+0x70>)
 8000f26:	f000 fb03 	bl	8001530 <SCH_AddTask>
  SCH_AddTask(buttonReading, 0, TIMER_TICK);
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	480f      	ldr	r0, [pc, #60]	@ (8000f6c <main+0x74>)
 8000f30:	f000 fafe 	bl	8001530 <SCH_AddTask>
  SCH_AddTask(server_button_reading, 0, TIMER_TICK);
 8000f34:	220a      	movs	r2, #10
 8000f36:	2100      	movs	r1, #0
 8000f38:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <main+0x78>)
 8000f3a:	f000 faf9 	bl	8001530 <SCH_AddTask>
  SCH_AddTask(fsmInit, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <main+0x7c>)
 8000f44:	f000 faf4 	bl	8001530 <SCH_AddTask>
  SCH_AddTask(LCD_I2C_Init, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	480a      	ldr	r0, [pc, #40]	@ (8000f78 <main+0x80>)
 8000f4e:	f000 faef 	bl	8001530 <SCH_AddTask>
  SCH_AddTask(fsmProcessing, 10, TIMER_TICK);
 8000f52:	220a      	movs	r2, #10
 8000f54:	210a      	movs	r1, #10
 8000f56:	4809      	ldr	r0, [pc, #36]	@ (8000f7c <main+0x84>)
 8000f58:	f000 faea 	bl	8001530 <SCH_AddTask>

  while (1)
  {
	  SCH_Dispatch();
 8000f5c:	f000 face 	bl	80014fc <SCH_Dispatch>
 8000f60:	e7fc      	b.n	8000f5c <main+0x64>
 8000f62:	bf00      	nop
 8000f64:	2000015c 	.word	0x2000015c
 8000f68:	08001e45 	.word	0x08001e45
 8000f6c:	0800015d 	.word	0x0800015d
 8000f70:	08001add 	.word	0x08001add
 8000f74:	080009bd 	.word	0x080009bd
 8000f78:	08000c2d 	.word	0x08000c2d
 8000f7c:	080009dd 	.word	0x080009dd

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b090      	sub	sp, #64	@ 0x40
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0318 	add.w	r3, r7, #24
 8000f8a:	2228      	movs	r2, #40	@ 0x28
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 f956 	bl	8004240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000faa:	2310      	movs	r3, #16
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fb6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 f83d 	bl	8003040 <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fcc:	f000 f977 	bl	80012be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 faaa 	bl	8003544 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ff6:	f000 f962 	bl	80012be <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3740      	adds	r7, #64	@ 0x40
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <MX_I2C1_Init+0x50>)
 800100a:	4a13      	ldr	r2, [pc, #76]	@ (8001058 <MX_I2C1_Init+0x54>)
 800100c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_I2C1_Init+0x50>)
 8001010:	4a12      	ldr	r2, [pc, #72]	@ (800105c <MX_I2C1_Init+0x58>)
 8001012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_I2C1_Init+0x50>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_I2C1_Init+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_I2C1_Init+0x50>)
 8001022:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001026:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <MX_I2C1_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_I2C1_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <MX_I2C1_Init+0x50>)
 8001042:	f001 fb61 	bl	8002708 <HAL_I2C_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800104c:	f000 f937 	bl	80012be <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000108 	.word	0x20000108
 8001058:	40005400 	.word	0x40005400
 800105c:	000186a0 	.word	0x000186a0

08001060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_TIM2_Init+0x94>)
 800107e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_TIM2_Init+0x94>)
 8001086:	2209      	movs	r2, #9
 8001088:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_TIM2_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_TIM2_Init+0x94>)
 8001092:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_TIM2_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_TIM2_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a4:	4813      	ldr	r0, [pc, #76]	@ (80010f4 <MX_TIM2_Init+0x94>)
 80010a6:	f002 fbdb 	bl	8003860 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b0:	f000 f905 	bl	80012be <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <MX_TIM2_Init+0x94>)
 80010c2:	f002 fd5f 	bl	8003b84 <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 f8f7 	bl	80012be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_TIM2_Init+0x94>)
 80010de:	f002 ff41 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010e8:	f000 f8e9 	bl	80012be <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000015c 	.word	0x2000015c

080010f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <MX_USART2_UART_Init+0x50>)
 8001100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_USART2_UART_Init+0x4c>)
 8001130:	f002 ff88 	bl	8004044 <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800113a:	f000 f8c0 	bl	80012be <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200001a4 	.word	0x200001a4
 8001148:	40004400 	.word	0x40004400

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001160:	4b4a      	ldr	r3, [pc, #296]	@ (800128c <MX_GPIO_Init+0x140>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a49      	ldr	r2, [pc, #292]	@ (800128c <MX_GPIO_Init+0x140>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b47      	ldr	r3, [pc, #284]	@ (800128c <MX_GPIO_Init+0x140>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001178:	4b44      	ldr	r3, [pc, #272]	@ (800128c <MX_GPIO_Init+0x140>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a43      	ldr	r2, [pc, #268]	@ (800128c <MX_GPIO_Init+0x140>)
 800117e:	f043 0320 	orr.w	r3, r3, #32
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b41      	ldr	r3, [pc, #260]	@ (800128c <MX_GPIO_Init+0x140>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <MX_GPIO_Init+0x140>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a3d      	ldr	r2, [pc, #244]	@ (800128c <MX_GPIO_Init+0x140>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <MX_GPIO_Init+0x140>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b38      	ldr	r3, [pc, #224]	@ (800128c <MX_GPIO_Init+0x140>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a37      	ldr	r2, [pc, #220]	@ (800128c <MX_GPIO_Init+0x140>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b35      	ldr	r3, [pc, #212]	@ (800128c <MX_GPIO_Init+0x140>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CONTROL_TRAFFIC0_0_Pin|CONTROL_TRAFFIC0_1_Pin|CONTROL_TRAFFIC1_0_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2133      	movs	r1, #51	@ 0x33
 80011c4:	4832      	ldr	r0, [pc, #200]	@ (8001290 <MX_GPIO_Init+0x144>)
 80011c6:	f001 fa4c 	bl	8002662 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONTROL_TRAFFIC1_1_GPIO_Port, CONTROL_TRAFFIC1_1_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2101      	movs	r1, #1
 80011ce:	4831      	ldr	r0, [pc, #196]	@ (8001294 <MX_GPIO_Init+0x148>)
 80011d0:	f001 fa47 	bl	8002662 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <MX_GPIO_Init+0x14c>)
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	4619      	mov	r1, r3
 80011e8:	482c      	ldr	r0, [pc, #176]	@ (800129c <MX_GPIO_Init+0x150>)
 80011ea:	f001 f89f 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONTROL_TRAFFIC0_0_Pin CONTROL_TRAFFIC0_1_Pin CONTROL_TRAFFIC1_0_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = CONTROL_TRAFFIC0_0_Pin|CONTROL_TRAFFIC0_1_Pin|CONTROL_TRAFFIC1_0_Pin|LED_RED_Pin;
 80011ee:	2333      	movs	r3, #51	@ 0x33
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	4822      	ldr	r0, [pc, #136]	@ (8001290 <MX_GPIO_Init+0x144>)
 8001206:	f001 f891 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONTROL_TRAFFIC1_1_Pin */
  GPIO_InitStruct.Pin = CONTROL_TRAFFIC1_1_Pin;
 800120a:	2301      	movs	r3, #1
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2302      	movs	r3, #2
 8001218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CONTROL_TRAFFIC1_1_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4619      	mov	r1, r3
 8001220:	481c      	ldr	r0, [pc, #112]	@ (8001294 <MX_GPIO_Init+0x148>)
 8001222:	f001 f883 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin;
 8001226:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 800122a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001230:	2301      	movs	r3, #1
 8001232:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	4816      	ldr	r0, [pc, #88]	@ (8001294 <MX_GPIO_Init+0x148>)
 800123c:	f001 f876 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVER_BUTTON2_Pin SERVER_BUTTON3_Pin SERVER_BUTTON0_Pin SERVER_BUTTON1_Pin */
  GPIO_InitStruct.Pin = SERVER_BUTTON2_Pin|SERVER_BUTTON3_Pin|SERVER_BUTTON0_Pin|SERVER_BUTTON1_Pin;
 8001240:	f44f 6354 	mov.w	r3, #3392	@ 0xd40
 8001244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4619      	mov	r1, r3
 8001254:	4811      	ldr	r0, [pc, #68]	@ (800129c <MX_GPIO_Init+0x150>)
 8001256:	f001 f869 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 800125a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	4808      	ldr	r0, [pc, #32]	@ (8001290 <MX_GPIO_Init+0x144>)
 8001270:	f001 f85c 	bl	800232c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2028      	movs	r0, #40	@ 0x28
 800127a:	f001 f820 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800127e:	2028      	movs	r0, #40	@ 0x28
 8001280:	f001 f839 	bl	80022f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800
 8001294:	40010c00 	.word	0x40010c00
 8001298:	10110000 	.word	0x10110000
 800129c:	40011000 	.word	0x40011000

080012a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012b0:	d101      	bne.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 80012b2:	f000 f8fd 	bl	80014b0 <SCH_Update>
	}
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c2:	b672      	cpsid	i
}
 80012c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c6:	bf00      	nop
 80012c8:	e7fd      	b.n	80012c6 <Error_Handler+0x8>
	...

080012cc <turnOffLed>:
static uint16_t controlTraffic0Pins[TRAFFIC_NUMBER] = {CONTROL_TRAFFIC0_0_Pin, CONTROL_TRAFFIC1_0_Pin};

static GPIO_TypeDef* controlTraffic1Ports[TRAFFIC_NUMBER] = {CONTROL_TRAFFIC0_1_GPIO_Port, CONTROL_TRAFFIC1_1_GPIO_Port};
static uint16_t controlTraffic1Pins[TRAFFIC_NUMBER] = {CONTROL_TRAFFIC0_1_Pin, CONTROL_TRAFFIC1_1_Pin};

void turnOffLed(uint8_t index) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_RESET);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001310 <turnOffLed+0x44>)
 80012da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <turnOffLed+0x48>)
 80012e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	f001 f9ba 	bl	8002662 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_RESET);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4a09      	ldr	r2, [pc, #36]	@ (8001318 <turnOffLed+0x4c>)
 80012f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4a08      	ldr	r2, [pc, #32]	@ (800131c <turnOffLed+0x50>)
 80012fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	f001 f9ae 	bl	8002662 <HAL_GPIO_WritePin>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000018 	.word	0x20000018
 8001314:	20000020 	.word	0x20000020
 8001318:	20000024 	.word	0x20000024
 800131c:	2000002c 	.word	0x2000002c

08001320 <turnOnRed>:
void turnOnRed(uint8_t index) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_SET);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <turnOnRed+0x44>)
 800132e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4a0c      	ldr	r2, [pc, #48]	@ (8001368 <turnOnRed+0x48>)
 8001336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	f001 f990 	bl	8002662 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_SET);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4a09      	ldr	r2, [pc, #36]	@ (800136c <turnOnRed+0x4c>)
 8001346:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <turnOnRed+0x50>)
 800134e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001352:	2201      	movs	r2, #1
 8001354:	4619      	mov	r1, r3
 8001356:	f001 f984 	bl	8002662 <HAL_GPIO_WritePin>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000018 	.word	0x20000018
 8001368:	20000020 	.word	0x20000020
 800136c:	20000024 	.word	0x20000024
 8001370:	2000002c 	.word	0x2000002c

08001374 <turnOnGreen>:
void turnOnGreen(uint8_t index) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_SET);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <turnOnGreen+0x44>)
 8001382:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <turnOnGreen+0x48>)
 800138a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	f001 f966 	bl	8002662 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_RESET);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4a09      	ldr	r2, [pc, #36]	@ (80013c0 <turnOnGreen+0x4c>)
 800139a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4a08      	ldr	r2, [pc, #32]	@ (80013c4 <turnOnGreen+0x50>)
 80013a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	f001 f95a 	bl	8002662 <HAL_GPIO_WritePin>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000018 	.word	0x20000018
 80013bc:	20000020 	.word	0x20000020
 80013c0:	20000024 	.word	0x20000024
 80013c4:	2000002c 	.word	0x2000002c

080013c8 <turnOnYellow>:
void turnOnYellow(uint8_t index) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlTraffic0Ports[index], controlTraffic0Pins[index], GPIO_PIN_RESET);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <turnOnYellow+0x44>)
 80013d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001410 <turnOnYellow+0x48>)
 80013de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	f001 f93c 	bl	8002662 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlTraffic1Ports[index], controlTraffic1Pins[index], GPIO_PIN_SET);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4a09      	ldr	r2, [pc, #36]	@ (8001414 <turnOnYellow+0x4c>)
 80013ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <turnOnYellow+0x50>)
 80013f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4619      	mov	r1, r3
 80013fe:	f001 f930 	bl	8002662 <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000018 	.word	0x20000018
 8001410:	20000020 	.word	0x20000020
 8001414:	20000024 	.word	0x20000024
 8001418:	2000002c 	.word	0x2000002c

0800141c <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001422:	2300      	movs	r3, #0
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	e037      	b.n	8001498 <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 8001428:	79fa      	ldrb	r2, [r7, #7]
 800142a:	4920      	ldr	r1, [pc, #128]	@ (80014ac <SCH_Init+0x90>)
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i;
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f1c3 0314 	rsb	r3, r3, #20
 8001442:	b2d8      	uxtb	r0, r3
 8001444:	4919      	ldr	r1, [pc, #100]	@ (80014ac <SCH_Init+0x90>)
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3304      	adds	r3, #4
 8001452:	4602      	mov	r2, r0
 8001454:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	4914      	ldr	r1, [pc, #80]	@ (80014ac <SCH_Init+0x90>)
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3308      	adds	r3, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 800146a:	79fa      	ldrb	r2, [r7, #7]
 800146c:	490f      	ldr	r1, [pc, #60]	@ (80014ac <SCH_Init+0x90>)
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	330c      	adds	r3, #12
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	490a      	ldr	r1, [pc, #40]	@ (80014ac <SCH_Init+0x90>)
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	3310      	adds	r3, #16
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	3301      	adds	r3, #1
 8001496:	71fb      	strb	r3, [r7, #7]
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b13      	cmp	r3, #19
 800149c:	d9c4      	bls.n	8001428 <SCH_Init+0xc>
    }
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200001ec 	.word	0x200001ec

080014b0 <SCH_Update>:

void SCH_Update(void) {
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 80014b4:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <SCH_Update+0x48>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d018      	beq.n	80014ee <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 80014bc:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <SCH_Update+0x48>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00c      	beq.n	80014de <SCH_Update+0x2e>
		if (tasks[0].delay > TIMER_TICK) {
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <SCH_Update+0x48>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b0a      	cmp	r3, #10
 80014ca:	d905      	bls.n	80014d8 <SCH_Update+0x28>
			tasks[0].delay -= TIMER_TICK;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <SCH_Update+0x48>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	3b0a      	subs	r3, #10
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <SCH_Update+0x48>)
 80014d4:	6093      	str	r3, [r2, #8]
 80014d6:	e002      	b.n	80014de <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <SCH_Update+0x48>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 80014de:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <SCH_Update+0x48>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d104      	bne.n	80014f0 <SCH_Update+0x40>
		tasks[0].flag = 1;
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <SCH_Update+0x48>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	741a      	strb	r2, [r3, #16]
 80014ec:	e000      	b.n	80014f0 <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 80014ee:	bf00      	nop
	}
}
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200001ec 	.word	0x200001ec

080014fc <SCH_Dispatch>:

void SCH_Dispatch(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 8001500:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <SCH_Dispatch+0x30>)
 8001502:	7c1b      	ldrb	r3, [r3, #16]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00f      	beq.n	8001528 <SCH_Dispatch+0x2c>
    (*tasks[0].functionPointer)();
 8001508:	4b08      	ldr	r3, [pc, #32]	@ (800152c <SCH_Dispatch+0x30>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4798      	blx	r3
    if (tasks[0].period > 0) {
 800150e:	4b07      	ldr	r3, [pc, #28]	@ (800152c <SCH_Dispatch+0x30>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <SCH_Dispatch+0x20>
        SCH_RefreshTask();
 8001516:	f000 f9af 	bl	8001878 <SCH_RefreshTask>
 800151a:	e006      	b.n	800152a <SCH_Dispatch+0x2e>
    }
    else {
        SCH_DeleteTask(tasks[0].id);
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <SCH_Dispatch+0x30>)
 800151e:	791b      	ldrb	r3, [r3, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f90b 	bl	800173c <SCH_DeleteTask>
 8001526:	e000      	b.n	800152a <SCH_Dispatch+0x2e>
    if (tasks[0].flag == 0) return;
 8001528:	bf00      	nop
    }
}
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200001ec 	.word	0x200001ec

08001530 <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 8001530:	b4b0      	push	{r4, r5, r7}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return 0;
 800153c:	4b7e      	ldr	r3, [pc, #504]	@ (8001738 <SCH_AddTask+0x208>)
 800153e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SCH_AddTask+0x1a>
 8001546:	2300      	movs	r3, #0
 8001548:	e0f1      	b.n	800172e <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 800154a:	4b7b      	ldr	r3, [pc, #492]	@ (8001738 <SCH_AddTask+0x208>)
 800154c:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 8001550:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001556:	2300      	movs	r3, #0
 8001558:	76fb      	strb	r3, [r7, #27]
 800155a:	e0e3      	b.n	8001724 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 800155c:	7efa      	ldrb	r2, [r7, #27]
 800155e:	4976      	ldr	r1, [pc, #472]	@ (8001738 <SCH_AddTask+0x208>)
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3308      	adds	r3, #8
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	4413      	add	r3, r2
 8001572:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	429a      	cmp	r2, r3
 800157a:	d80a      	bhi.n	8001592 <SCH_AddTask+0x62>
 800157c:	7efa      	ldrb	r2, [r7, #27]
 800157e:	496e      	ldr	r1, [pc, #440]	@ (8001738 <SCH_AddTask+0x208>)
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f040 80c6 	bne.w	800171e <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8001592:	2313      	movs	r3, #19
 8001594:	76bb      	strb	r3, [r7, #26]
 8001596:	e017      	b.n	80015c8 <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 8001598:	7ebb      	ldrb	r3, [r7, #26]
 800159a:	1e5a      	subs	r2, r3, #1
 800159c:	7eb9      	ldrb	r1, [r7, #26]
 800159e:	4866      	ldr	r0, [pc, #408]	@ (8001738 <SCH_AddTask+0x208>)
 80015a0:	460b      	mov	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4418      	add	r0, r3
 80015aa:	4963      	ldr	r1, [pc, #396]	@ (8001738 <SCH_AddTask+0x208>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	4604      	mov	r4, r0
 80015b8:	461d      	mov	r5, r3
 80015ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 80015c2:	7ebb      	ldrb	r3, [r7, #26]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	76bb      	strb	r3, [r7, #26]
 80015c8:	7eba      	ldrb	r2, [r7, #26]
 80015ca:	7efb      	ldrb	r3, [r7, #27]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8e3      	bhi.n	8001598 <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 80015d0:	7efa      	ldrb	r2, [r7, #27]
 80015d2:	4959      	ldr	r1, [pc, #356]	@ (8001738 <SCH_AddTask+0x208>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 80015e2:	7efa      	ldrb	r2, [r7, #27]
 80015e4:	4954      	ldr	r1, [pc, #336]	@ (8001738 <SCH_AddTask+0x208>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3304      	adds	r3, #4
 80015f2:	7e7a      	ldrb	r2, [r7, #25]
 80015f4:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 80015f6:	7efa      	ldrb	r2, [r7, #27]
 80015f8:	494f      	ldr	r1, [pc, #316]	@ (8001738 <SCH_AddTask+0x208>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	330c      	adds	r3, #12
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 800160a:	7efa      	ldrb	r2, [r7, #27]
 800160c:	494a      	ldr	r1, [pc, #296]	@ (8001738 <SCH_AddTask+0x208>)
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	3310      	adds	r3, #16
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	429a      	cmp	r2, r3
 8001624:	d950      	bls.n	80016c8 <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 800162e:	7efb      	ldrb	r3, [r7, #27]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	4941      	ldr	r1, [pc, #260]	@ (8001738 <SCH_AddTask+0x208>)
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	3308      	adds	r3, #8
 8001640:	6819      	ldr	r1, [r3, #0]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	7efa      	ldrb	r2, [r7, #27]
 8001646:	1ac9      	subs	r1, r1, r3
 8001648:	483b      	ldr	r0, [pc, #236]	@ (8001738 <SCH_AddTask+0x208>)
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4403      	add	r3, r0
 8001654:	3308      	adds	r3, #8
 8001656:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8001658:	7efa      	ldrb	r2, [r7, #27]
 800165a:	4937      	ldr	r1, [pc, #220]	@ (8001738 <SCH_AddTask+0x208>)
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3308      	adds	r3, #8
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 800166e:	7efa      	ldrb	r2, [r7, #27]
 8001670:	4931      	ldr	r1, [pc, #196]	@ (8001738 <SCH_AddTask+0x208>)
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	3310      	adds	r3, #16
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8001682:	7efb      	ldrb	r3, [r7, #27]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	6979      	ldr	r1, [r7, #20]
 8001688:	482b      	ldr	r0, [pc, #172]	@ (8001738 <SCH_AddTask+0x208>)
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4403      	add	r3, r0
 8001694:	3308      	adds	r3, #8
 8001696:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 8001698:	7efb      	ldrb	r3, [r7, #27]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	4926      	ldr	r1, [pc, #152]	@ (8001738 <SCH_AddTask+0x208>)
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3308      	adds	r3, #8
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d12c      	bne.n	800170a <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 80016b0:	7efb      	ldrb	r3, [r7, #27]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	4920      	ldr	r1, [pc, #128]	@ (8001738 <SCH_AddTask+0x208>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	3310      	adds	r3, #16
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e020      	b.n	800170a <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 80016c8:	7efa      	ldrb	r2, [r7, #27]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	1ac9      	subs	r1, r1, r3
 80016d0:	4819      	ldr	r0, [pc, #100]	@ (8001738 <SCH_AddTask+0x208>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4403      	add	r3, r0
 80016dc:	3308      	adds	r3, #8
 80016de:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 80016e0:	7efa      	ldrb	r2, [r7, #27]
 80016e2:	4915      	ldr	r1, [pc, #84]	@ (8001738 <SCH_AddTask+0x208>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3308      	adds	r3, #8
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 80016f6:	7efa      	ldrb	r2, [r7, #27]
 80016f8:	490f      	ldr	r1, [pc, #60]	@ (8001738 <SCH_AddTask+0x208>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3310      	adds	r3, #16
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 800170a:	7efa      	ldrb	r2, [r7, #27]
 800170c:	490a      	ldr	r1, [pc, #40]	@ (8001738 <SCH_AddTask+0x208>)
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3304      	adds	r3, #4
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	e007      	b.n	800172e <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800171e:	7efb      	ldrb	r3, [r7, #27]
 8001720:	3301      	adds	r3, #1
 8001722:	76fb      	strb	r3, [r7, #27]
 8001724:	7efb      	ldrb	r3, [r7, #27]
 8001726:	2b13      	cmp	r3, #19
 8001728:	f67f af18 	bls.w	800155c <SCH_AddTask+0x2c>
        }
    }
    return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	bcb0      	pop	{r4, r5, r7}
 8001736:	4770      	bx	lr
 8001738:	200001ec 	.word	0x200001ec

0800173c <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 800173c:	b4b0      	push	{r4, r5, r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e088      	b.n	800185e <SCH_DeleteTask+0x122>
    	if (tasks[i].functionPointer == 0) return 0;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	4949      	ldr	r1, [pc, #292]	@ (8001874 <SCH_DeleteTask+0x138>)
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <SCH_DeleteTask+0x28>
 8001760:	2300      	movs	r3, #0
 8001762:	e081      	b.n	8001868 <SCH_DeleteTask+0x12c>
        if (tasks[i].id == id) {
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	4943      	ldr	r1, [pc, #268]	@ (8001874 <SCH_DeleteTask+0x138>)
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	3304      	adds	r3, #4
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	79fa      	ldrb	r2, [r7, #7]
 8001778:	429a      	cmp	r2, r3
 800177a:	d16d      	bne.n	8001858 <SCH_DeleteTask+0x11c>
            uint8_t currentID = tasks[i].id;
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	493d      	ldr	r1, [pc, #244]	@ (8001874 <SCH_DeleteTask+0x138>)
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	3304      	adds	r3, #4
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	4937      	ldr	r1, [pc, #220]	@ (8001874 <SCH_DeleteTask+0x138>)
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01d      	beq.n	80017e2 <SCH_DeleteTask+0xa6>
                tasks[i + 1].delay += tasks[i].delay;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	4932      	ldr	r1, [pc, #200]	@ (8001874 <SCH_DeleteTask+0x138>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3308      	adds	r3, #8
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	482d      	ldr	r0, [pc, #180]	@ (8001874 <SCH_DeleteTask+0x138>)
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4403      	add	r3, r0
 80017c8:	3308      	adds	r3, #8
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	3201      	adds	r2, #1
 80017d0:	4419      	add	r1, r3
 80017d2:	4828      	ldr	r0, [pc, #160]	@ (8001874 <SCH_DeleteTask+0x138>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4403      	add	r3, r0
 80017de:	3308      	adds	r3, #8
 80017e0:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	73bb      	strb	r3, [r7, #14]
 80017e6:	e017      	b.n	8001818 <SCH_DeleteTask+0xdc>
                tasks[j] = tasks[j + 1];
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	7bb9      	ldrb	r1, [r7, #14]
 80017ee:	4821      	ldr	r0, [pc, #132]	@ (8001874 <SCH_DeleteTask+0x138>)
 80017f0:	460b      	mov	r3, r1
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4418      	add	r0, r3
 80017fa:	491e      	ldr	r1, [pc, #120]	@ (8001874 <SCH_DeleteTask+0x138>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	4604      	mov	r4, r0
 8001808:	461d      	mov	r5, r3
 800180a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180e:	682b      	ldr	r3, [r5, #0]
 8001810:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	3301      	adds	r3, #1
 8001816:	73bb      	strb	r3, [r7, #14]
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	2b12      	cmp	r3, #18
 800181c:	d9e4      	bls.n	80017e8 <SCH_DeleteTask+0xac>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <SCH_DeleteTask+0x138>)
 8001820:	2200      	movs	r2, #0
 8001822:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 8001826:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <SCH_DeleteTask+0x138>)
 8001828:	7b7b      	ldrb	r3, [r7, #13]
 800182a:	f882 3180 	strb.w	r3, [r2, #384]	@ 0x180
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <SCH_DeleteTask+0x138>)
 8001830:	2200      	movs	r2, #0
 8001832:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            tasks[SCH_TASKNUMBER - 1].period = 0;
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <SCH_DeleteTask+0x138>)
 8001838:	2200      	movs	r2, #0
 800183a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <SCH_DeleteTask+0x138>)
 8001840:	2200      	movs	r2, #0
 8001842:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 8001846:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <SCH_DeleteTask+0x138>)
 8001848:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e007      	b.n	8001868 <SCH_DeleteTask+0x12c>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	3301      	adds	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b13      	cmp	r3, #19
 8001862:	f67f af73 	bls.w	800174c <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bcb0      	pop	{r4, r5, r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	200001ec 	.word	0x200001ec

08001878 <SCH_RefreshTask>:

unsigned char SCH_RefreshTask(void) {
 8001878:	b4b0      	push	{r4, r5, r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return 0;
 800187e:	4b96      	ldr	r3, [pc, #600]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <SCH_RefreshTask+0x12>
 8001886:	2300      	movs	r3, #0
 8001888:	e120      	b.n	8001acc <SCH_RefreshTask+0x254>
    SCH_Task currentTask = tasks[0];
 800188a:	4b93      	ldr	r3, [pc, #588]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 800188c:	463c      	mov	r4, r7
 800188e:	461d      	mov	r5, r3
 8001890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	6023      	str	r3, [r4, #0]
    uint32_t currentDelay = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800189c:	2300      	movs	r3, #0
 800189e:	76fb      	strb	r3, [r7, #27]
 80018a0:	e10f      	b.n	8001ac2 <SCH_RefreshTask+0x24a>
        if (i + 1 == SCH_TASKNUMBER || tasks[i + 1].functionPointer == NULL) {
 80018a2:	7efb      	ldrb	r3, [r7, #27]
 80018a4:	2b13      	cmp	r3, #19
 80018a6:	d00a      	beq.n	80018be <SCH_RefreshTask+0x46>
 80018a8:	7efb      	ldrb	r3, [r7, #27]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	498a      	ldr	r1, [pc, #552]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d14a      	bne.n	8001954 <SCH_RefreshTask+0xdc>
            tasks[i].functionPointer = currentTask.functionPointer;
 80018be:	7efa      	ldrb	r2, [r7, #27]
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	4885      	ldr	r0, [pc, #532]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4403      	add	r3, r0
 80018ce:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 80018d0:	7efa      	ldrb	r2, [r7, #27]
 80018d2:	7938      	ldrb	r0, [r7, #4]
 80018d4:	4980      	ldr	r1, [pc, #512]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3304      	adds	r3, #4
 80018e2:	4602      	mov	r2, r0
 80018e4:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 80018e6:	7efa      	ldrb	r2, [r7, #27]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	487b      	ldr	r0, [pc, #492]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4403      	add	r3, r0
 80018f6:	330c      	adds	r3, #12
 80018f8:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 80018fa:	7efa      	ldrb	r2, [r7, #27]
 80018fc:	4976      	ldr	r1, [pc, #472]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	3310      	adds	r3, #16
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	7efa      	ldrb	r2, [r7, #27]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	1ac9      	subs	r1, r1, r3
 8001916:	4870      	ldr	r0, [pc, #448]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4403      	add	r3, r0
 8001922:	3308      	adds	r3, #8
 8001924:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8001926:	7efa      	ldrb	r2, [r7, #27]
 8001928:	496b      	ldr	r1, [pc, #428]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	3308      	adds	r3, #8
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <SCH_RefreshTask+0xd8>
                tasks[i].flag = 1;
 800193c:	7efa      	ldrb	r2, [r7, #27]
 800193e:	4966      	ldr	r1, [pc, #408]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3310      	adds	r3, #16
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001950:	2301      	movs	r3, #1
 8001952:	e0bb      	b.n	8001acc <SCH_RefreshTask+0x254>
        }
        currentDelay += tasks[i + 1].delay;
 8001954:	7efb      	ldrb	r3, [r7, #27]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	495f      	ldr	r1, [pc, #380]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	3308      	adds	r3, #8
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	61fb      	str	r3, [r7, #28]
        if (currentDelay > currentTask.period) {
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	429a      	cmp	r2, r3
 8001974:	f240 808d 	bls.w	8001a92 <SCH_RefreshTask+0x21a>
            tasks[i].functionPointer = currentTask.functionPointer;
 8001978:	7efa      	ldrb	r2, [r7, #27]
 800197a:	6839      	ldr	r1, [r7, #0]
 800197c:	4856      	ldr	r0, [pc, #344]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4403      	add	r3, r0
 8001988:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 800198a:	7efa      	ldrb	r2, [r7, #27]
 800198c:	7938      	ldrb	r0, [r7, #4]
 800198e:	4952      	ldr	r1, [pc, #328]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	3304      	adds	r3, #4
 800199c:	4602      	mov	r2, r0
 800199e:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 80019a0:	7efa      	ldrb	r2, [r7, #27]
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	484c      	ldr	r0, [pc, #304]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4403      	add	r3, r0
 80019b0:	330c      	adds	r3, #12
 80019b2:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 80019b4:	7efa      	ldrb	r2, [r7, #27]
 80019b6:	4948      	ldr	r1, [pc, #288]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	3310      	adds	r3, #16
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 80019d0:	7efb      	ldrb	r3, [r7, #27]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	4940      	ldr	r1, [pc, #256]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	3308      	adds	r3, #8
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	7efa      	ldrb	r2, [r7, #27]
 80019e8:	1ac9      	subs	r1, r1, r3
 80019ea:	483b      	ldr	r0, [pc, #236]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4403      	add	r3, r0
 80019f6:	3308      	adds	r3, #8
 80019f8:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 80019fa:	7efa      	ldrb	r2, [r7, #27]
 80019fc:	4936      	ldr	r1, [pc, #216]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3308      	adds	r3, #8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <SCH_RefreshTask+0x1ac>
                tasks[i].flag = 1;
 8001a10:	7efa      	ldrb	r2, [r7, #27]
 8001a12:	4931      	ldr	r1, [pc, #196]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3310      	adds	r3, #16
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 8001a24:	7efb      	ldrb	r3, [r7, #27]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	492b      	ldr	r1, [pc, #172]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	3308      	adds	r3, #8
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	7efa      	ldrb	r2, [r7, #27]
 8001a3a:	4827      	ldr	r0, [pc, #156]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4403      	add	r3, r0
 8001a46:	3308      	adds	r3, #8
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	7efa      	ldrb	r2, [r7, #27]
 8001a4c:	3201      	adds	r2, #1
 8001a4e:	1ac9      	subs	r1, r1, r3
 8001a50:	4821      	ldr	r0, [pc, #132]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4403      	add	r3, r0
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 8001a60:	7efb      	ldrb	r3, [r7, #27]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	491c      	ldr	r1, [pc, #112]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	3308      	adds	r3, #8
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10a      	bne.n	8001a8e <SCH_RefreshTask+0x216>
                tasks[i + 1].flag = 1;
 8001a78:	7efb      	ldrb	r3, [r7, #27]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	4916      	ldr	r1, [pc, #88]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	3310      	adds	r3, #16
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e01c      	b.n	8001acc <SCH_RefreshTask+0x254>
        }
        else {
            tasks[i] = tasks[i + 1];
 8001a92:	7efb      	ldrb	r3, [r7, #27]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	7ef9      	ldrb	r1, [r7, #27]
 8001a98:	480f      	ldr	r0, [pc, #60]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4418      	add	r0, r3
 8001aa4:	490c      	ldr	r1, [pc, #48]	@ (8001ad8 <SCH_RefreshTask+0x260>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001abc:	7efb      	ldrb	r3, [r7, #27]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	76fb      	strb	r3, [r7, #27]
 8001ac2:	7efb      	ldrb	r3, [r7, #27]
 8001ac4:	2b13      	cmp	r3, #19
 8001ac6:	f67f aeec 	bls.w	80018a2 <SCH_RefreshTask+0x2a>
        }
    }
    return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3724      	adds	r7, #36	@ 0x24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bcb0      	pop	{r4, r5, r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200001ec 	.word	0x200001ec

08001adc <server_button_reading>:
static uint16_t sv_buttonPins[SERVER_BUTTON_NUMBER] = {SERVER_BUTTON0_Pin, SERVER_BUTTON1_Pin, SERVER_BUTTON2_Pin, SERVER_BUTTON3_Pin};

static uint8_t sv_button_flags[SERVER_BUTTON_NUMBER] = {0};
static uint8_t sv_button_previous_states[SERVER_BUTTON_NUMBER] = {0};

void server_button_reading() {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < SERVER_BUTTON_NUMBER; i++) {
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	e020      	b.n	8001b2a <server_button_reading+0x4e>
		uint8_t current_state = HAL_GPIO_ReadPin(sv_buttonPorts[i], sv_buttonPins[i]);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <server_button_reading+0x60>)
 8001aec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4913      	ldr	r1, [pc, #76]	@ (8001b40 <server_button_reading+0x64>)
 8001af4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f000 fd9a 	bl	8002634 <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	71bb      	strb	r3, [r7, #6]

		if (current_state && (sv_button_previous_states[i] == 0)) {
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <server_button_reading+0x40>
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <server_button_reading+0x68>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d103      	bne.n	8001b1c <server_button_reading+0x40>
			// Detect transition from OFF to ON
			sv_button_flags[i] = 1;
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <server_button_reading+0x6c>)
 8001b18:	2101      	movs	r1, #1
 8001b1a:	54d1      	strb	r1, [r2, r3]
		}

		// Update the previous state
		sv_button_previous_states[i] = current_state;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4909      	ldr	r1, [pc, #36]	@ (8001b44 <server_button_reading+0x68>)
 8001b20:	79ba      	ldrb	r2, [r7, #6]
 8001b22:	54ca      	strb	r2, [r1, r3]
	for (uint8_t i = 0; i < SERVER_BUTTON_NUMBER; i++) {
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	3301      	adds	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d9db      	bls.n	8001ae8 <server_button_reading+0xc>
	}
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000030 	.word	0x20000030
 8001b40:	20000040 	.word	0x20000040
 8001b44:	20000380 	.word	0x20000380
 8001b48:	2000037c 	.word	0x2000037c

08001b4c <server_button_pressed>:

unsigned char server_button_pressed(uint8_t index) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= SERVER_BUTTON_NUMBER) return 0;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d901      	bls.n	8001b60 <server_button_pressed+0x14>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e00b      	b.n	8001b78 <server_button_pressed+0x2c>
	if (sv_button_flags[index] == 1) {
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <server_button_pressed+0x38>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d105      	bne.n	8001b76 <server_button_pressed+0x2a>
		sv_button_flags[index] = 0;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4a05      	ldr	r2, [pc, #20]	@ (8001b84 <server_button_pressed+0x38>)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	54d1      	strb	r1, [r2, r3]
		return 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <server_button_pressed+0x2c>
	}
	return 0;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	2000037c 	.word	0x2000037c

08001b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_MspInit+0x5c>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4a14      	ldr	r2, [pc, #80]	@ (8001be4 <HAL_MspInit+0x5c>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6193      	str	r3, [r2, #24]
 8001b9a:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_MspInit+0x5c>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <HAL_MspInit+0x5c>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a0e      	ldr	r2, [pc, #56]	@ (8001be4 <HAL_MspInit+0x5c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <HAL_MspInit+0x5c>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <HAL_MspInit+0x60>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_MspInit+0x60>)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000

08001bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1d      	ldr	r2, [pc, #116]	@ (8001c7c <HAL_I2C_MspInit+0x90>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d132      	bne.n	8001c72 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <HAL_I2C_MspInit+0x94>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a1b      	ldr	r2, [pc, #108]	@ (8001c80 <HAL_I2C_MspInit+0x94>)
 8001c12:	f043 0308 	orr.w	r3, r3, #8
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <HAL_I2C_MspInit+0x94>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2a:	2312      	movs	r3, #18
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	4812      	ldr	r0, [pc, #72]	@ (8001c84 <HAL_I2C_MspInit+0x98>)
 8001c3a:	f000 fb77 	bl	800232c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_I2C_MspInit+0x9c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c54:	4a0c      	ldr	r2, [pc, #48]	@ (8001c88 <HAL_I2C_MspInit+0x9c>)
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_I2C_MspInit+0x94>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <HAL_I2C_MspInit+0x94>)
 8001c60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c64:	61d3      	str	r3, [r2, #28]
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_I2C_MspInit+0x94>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	@ 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40005400 	.word	0x40005400
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010c00 	.word	0x40010c00
 8001c88:	40010000 	.word	0x40010000

08001c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c9c:	d113      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x44>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x44>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <HAL_TIM_Base_MspInit+0x44>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	201c      	movs	r0, #28
 8001cbc:	f000 faff 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cc0:	201c      	movs	r0, #28
 8001cc2:	f000 fb18 	bl	80022f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a15      	ldr	r2, [pc, #84]	@ (8001d44 <HAL_UART_MspInit+0x70>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d123      	bne.n	8001d3c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf4:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <HAL_UART_MspInit+0x74>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4a13      	ldr	r2, [pc, #76]	@ (8001d48 <HAL_UART_MspInit+0x74>)
 8001cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cfe:	61d3      	str	r3, [r2, #28]
 8001d00:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <HAL_UART_MspInit+0x74>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <HAL_UART_MspInit+0x74>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	@ (8001d48 <HAL_UART_MspInit+0x74>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <HAL_UART_MspInit+0x74>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d24:	230c      	movs	r3, #12
 8001d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4619      	mov	r1, r3
 8001d36:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <HAL_UART_MspInit+0x78>)
 8001d38:	f000 faf8 	bl	800232c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40004400 	.word	0x40004400
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010800 	.word	0x40010800

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <NMI_Handler+0x4>

08001d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <HardFault_Handler+0x4>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <MemManage_Handler+0x4>

08001d68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da0:	f000 f976 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <TIM2_IRQHandler+0x10>)
 8001dae:	f001 fdf9 	bl	80039a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000015c 	.word	0x2000015c

08001dbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001dc0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001dc4:	f000 fc7e 	bl	80026c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <_sbrk+0x5c>)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <_sbrk+0x60>)
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de0:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de8:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <_sbrk+0x64>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <_sbrk+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dee:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d207      	bcs.n	8001e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dfc:	f002 fa28 	bl	8004250 <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	220c      	movs	r2, #12
 8001e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e009      	b.n	8001e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e12:	4b07      	ldr	r3, [pc, #28]	@ (8001e30 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	@ (8001e30 <_sbrk+0x64>)
 8001e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20005000 	.word	0x20005000
 8001e2c:	00000400 	.word	0x00000400
 8001e30:	20000384 	.word	0x20000384
 8001e34:	200004e0 	.word	0x200004e0

08001e38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <testMCU>:
 *  Created on: Nov 22, 2024
 *      Author: DELL
 */
#include "test_module.h"

void testMCU(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001e48:	2120      	movs	r1, #32
 8001e4a:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <testMCU+0x10>)
 8001e4c:	f000 fc21 	bl	8002692 <HAL_GPIO_TogglePin>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40010800 	.word	0x40010800

08001e58 <trafficToggle>:
uint32_t trafficGreenDuration = 3000;
uint32_t trafficYellowDuration = 2000;
enum TRAFFIC_STATE trafficStates[TRAFFIC_NUMBER] = {};
uint32_t trafficCounters[TRAFFIC_NUMBER];

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	460a      	mov	r2, r1
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	4613      	mov	r3, r2
 8001e66:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d84c      	bhi.n	8001f08 <trafficToggle+0xb0>
 8001e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e74 <trafficToggle+0x1c>)
 8001e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e74:	08001e85 	.word	0x08001e85
 8001e78:	08001e97 	.word	0x08001e97
 8001e7c:	08001ebd 	.word	0x08001ebd
 8001e80:	08001ee3 	.word	0x08001ee3
	case TRAFFIC_OFF:
		turnOffLed(index);
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fa20 	bl	80012cc <turnOffLed>
		trafficStates[index] = TRAFFIC_OFF;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	4a24      	ldr	r2, [pc, #144]	@ (8001f20 <trafficToggle+0xc8>)
 8001e90:	2100      	movs	r1, #0
 8001e92:	54d1      	strb	r1, [r2, r3]
		break;
 8001e94:	e03f      	b.n	8001f16 <trafficToggle+0xbe>
	case TRAFFIC_RED:
		turnOnRed(index);
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fa41 	bl	8001320 <turnOnRed>
		trafficStates[index] = TRAFFIC_RED;
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f20 <trafficToggle+0xc8>)
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f24 <trafficToggle+0xcc>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d12e      	bne.n	8001f0c <trafficToggle+0xb4>
			trafficCounters[index] = trafficRedDuration;
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f28 <trafficToggle+0xd0>)
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	491d      	ldr	r1, [pc, #116]	@ (8001f2c <trafficToggle+0xd4>)
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001eba:	e027      	b.n	8001f0c <trafficToggle+0xb4>
	case TRAFFIC_GREEN:
		turnOnGreen(index);
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fa58 	bl	8001374 <turnOnGreen>
		trafficStates[index] = TRAFFIC_GREEN;
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	4a16      	ldr	r2, [pc, #88]	@ (8001f20 <trafficToggle+0xc8>)
 8001ec8:	2102      	movs	r1, #2
 8001eca:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001ecc:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <trafficToggle+0xcc>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d11d      	bne.n	8001f10 <trafficToggle+0xb8>
			trafficCounters[index] = trafficGreenDuration;
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4a16      	ldr	r2, [pc, #88]	@ (8001f30 <trafficToggle+0xd8>)
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	4914      	ldr	r1, [pc, #80]	@ (8001f2c <trafficToggle+0xd4>)
 8001edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001ee0:	e016      	b.n	8001f10 <trafficToggle+0xb8>
	case TRAFFIC_YELLOW:
		turnOnYellow(index);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fa6f 	bl	80013c8 <turnOnYellow>
		trafficStates[index] = TRAFFIC_YELLOW;
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	4a0c      	ldr	r2, [pc, #48]	@ (8001f20 <trafficToggle+0xc8>)
 8001eee:	2103      	movs	r1, #3
 8001ef0:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <trafficToggle+0xcc>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d10c      	bne.n	8001f14 <trafficToggle+0xbc>
			trafficCounters[index] = trafficYellowDuration;
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <trafficToggle+0xdc>)
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	490a      	ldr	r1, [pc, #40]	@ (8001f2c <trafficToggle+0xd4>)
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001f06:	e005      	b.n	8001f14 <trafficToggle+0xbc>
	default:
		break;
 8001f08:	bf00      	nop
 8001f0a:	e004      	b.n	8001f16 <trafficToggle+0xbe>
		break;
 8001f0c:	bf00      	nop
 8001f0e:	e002      	b.n	8001f16 <trafficToggle+0xbe>
		break;
 8001f10:	bf00      	nop
 8001f12:	e000      	b.n	8001f16 <trafficToggle+0xbe>
		break;
 8001f14:	bf00      	nop
	}
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000388 	.word	0x20000388
 8001f24:	200000e8 	.word	0x200000e8
 8001f28:	2000004c 	.word	0x2000004c
 8001f2c:	2000038c 	.word	0x2000038c
 8001f30:	20000050 	.word	0x20000050
 8001f34:	20000054 	.word	0x20000054

08001f38 <traffic0Off>:

void traffic0Off(void) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_OFF);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff ff8a 	bl	8001e58 <trafficToggle>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <traffic0Red>:
void traffic0Red(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff ff82 	bl	8001e58 <trafficToggle>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <traffic0Green>:
void traffic0Green(void) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff ff7a 	bl	8001e58 <trafficToggle>
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <traffic0Yellow>:
void traffic0Yellow(void) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 8001f6c:	2103      	movs	r1, #3
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff ff72 	bl	8001e58 <trafficToggle>
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <traffic1Off>:

void traffic1Off(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_OFF);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7ff ff6a 	bl	8001e58 <trafficToggle>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <traffic1Red>:
void traffic1Red(void) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7ff ff62 	bl	8001e58 <trafficToggle>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <traffic1Green>:
void traffic1Green(void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff ff5a 	bl	8001e58 <trafficToggle>
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <traffic1Yellow>:
void traffic1Yellow(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 8001fac:	2103      	movs	r1, #3
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff ff52 	bl	8001e58 <trafficToggle>
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb8:	f7ff ff3e 	bl	8001e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fbc:	480b      	ldr	r0, [pc, #44]	@ (8001fec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fbe:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fd4:	4c09      	ldr	r4, [pc, #36]	@ (8001ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f002 f93b 	bl	800425c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fe6:	f7fe ff87 	bl	8000ef8 <main>
  bx lr
 8001fea:	4770      	bx	lr
  ldr r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001ff4:	08004c54 	.word	0x08004c54
  ldr r2, =_sbss
 8001ff8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001ffc:	200004e0 	.word	0x200004e0

08002000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002000:	e7fe      	b.n	8002000 <ADC1_2_IRQHandler>
	...

08002004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <HAL_Init+0x28>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a07      	ldr	r2, [pc, #28]	@ (800202c <HAL_Init+0x28>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002014:	2003      	movs	r0, #3
 8002016:	f000 f947 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201a:	2000      	movs	r0, #0
 800201c:	f000 f808 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002020:	f7ff fdb2 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40022000 	.word	0x40022000

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_InitTick+0x54>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_InitTick+0x58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f95f 	bl	8002312 <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f000 f927 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	@ (800208c <HAL_InitTick+0x5c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000048 	.word	0x20000048
 8002088:	2000005c 	.word	0x2000005c
 800208c:	20000058 	.word	0x20000058

08002090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b05      	ldr	r3, [pc, #20]	@ (80020ac <HAL_IncTick+0x1c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_IncTick+0x20>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a03      	ldr	r2, [pc, #12]	@ (80020b0 <HAL_IncTick+0x20>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	2000005c 	.word	0x2000005c
 80020b0:	20000394 	.word	0x20000394

080020b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b02      	ldr	r3, [pc, #8]	@ (80020c4 <HAL_GetTick+0x10>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	20000394 	.word	0x20000394

080020c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff fff0 	bl	80020b4 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffe0 	bl	80020b4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000005c 	.word	0x2000005c

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db0b      	blt.n	800219e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	4906      	ldr	r1, [pc, #24]	@ (80021a8 <__NVIC_EnableIRQ+0x34>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	@ (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	@ (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	@ 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	@ 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff90 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff2d 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff42 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff90 	bl	8002200 <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5f 	bl	80021ac <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff35 	bl	8002174 <__NVIC_EnableIRQ>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffa2 	bl	8002264 <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b480      	push	{r7}
 800232e:	b08b      	sub	sp, #44	@ 0x2c
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	e169      	b.n	8002614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002340:	2201      	movs	r2, #1
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8158 	bne.w	800260e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a9a      	ldr	r2, [pc, #616]	@ (80025cc <HAL_GPIO_Init+0x2a0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d05e      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002368:	4a98      	ldr	r2, [pc, #608]	@ (80025cc <HAL_GPIO_Init+0x2a0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d875      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800236e:	4a98      	ldr	r2, [pc, #608]	@ (80025d0 <HAL_GPIO_Init+0x2a4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d058      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002374:	4a96      	ldr	r2, [pc, #600]	@ (80025d0 <HAL_GPIO_Init+0x2a4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d86f      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800237a:	4a96      	ldr	r2, [pc, #600]	@ (80025d4 <HAL_GPIO_Init+0x2a8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d052      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002380:	4a94      	ldr	r2, [pc, #592]	@ (80025d4 <HAL_GPIO_Init+0x2a8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d869      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 8002386:	4a94      	ldr	r2, [pc, #592]	@ (80025d8 <HAL_GPIO_Init+0x2ac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d04c      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 800238c:	4a92      	ldr	r2, [pc, #584]	@ (80025d8 <HAL_GPIO_Init+0x2ac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d863      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 8002392:	4a92      	ldr	r2, [pc, #584]	@ (80025dc <HAL_GPIO_Init+0x2b0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d046      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
 8002398:	4a90      	ldr	r2, [pc, #576]	@ (80025dc <HAL_GPIO_Init+0x2b0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d85d      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 800239e:	2b12      	cmp	r3, #18
 80023a0:	d82a      	bhi.n	80023f8 <HAL_GPIO_Init+0xcc>
 80023a2:	2b12      	cmp	r3, #18
 80023a4:	d859      	bhi.n	800245a <HAL_GPIO_Init+0x12e>
 80023a6:	a201      	add	r2, pc, #4	@ (adr r2, 80023ac <HAL_GPIO_Init+0x80>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	08002427 	.word	0x08002427
 80023b0:	08002401 	.word	0x08002401
 80023b4:	08002413 	.word	0x08002413
 80023b8:	08002455 	.word	0x08002455
 80023bc:	0800245b 	.word	0x0800245b
 80023c0:	0800245b 	.word	0x0800245b
 80023c4:	0800245b 	.word	0x0800245b
 80023c8:	0800245b 	.word	0x0800245b
 80023cc:	0800245b 	.word	0x0800245b
 80023d0:	0800245b 	.word	0x0800245b
 80023d4:	0800245b 	.word	0x0800245b
 80023d8:	0800245b 	.word	0x0800245b
 80023dc:	0800245b 	.word	0x0800245b
 80023e0:	0800245b 	.word	0x0800245b
 80023e4:	0800245b 	.word	0x0800245b
 80023e8:	0800245b 	.word	0x0800245b
 80023ec:	0800245b 	.word	0x0800245b
 80023f0:	08002409 	.word	0x08002409
 80023f4:	0800241d 	.word	0x0800241d
 80023f8:	4a79      	ldr	r2, [pc, #484]	@ (80025e0 <HAL_GPIO_Init+0x2b4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023fe:	e02c      	b.n	800245a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	623b      	str	r3, [r7, #32]
          break;
 8002406:	e029      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	3304      	adds	r3, #4
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e024      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	3308      	adds	r3, #8
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e01f      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	330c      	adds	r3, #12
 8002422:	623b      	str	r3, [r7, #32]
          break;
 8002424:	e01a      	b.n	800245c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800242e:	2304      	movs	r3, #4
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e013      	b.n	800245c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800243c:	2308      	movs	r3, #8
 800243e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	611a      	str	r2, [r3, #16]
          break;
 8002446:	e009      	b.n	800245c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002448:	2308      	movs	r3, #8
 800244a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	615a      	str	r2, [r3, #20]
          break;
 8002452:	e003      	b.n	800245c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
          break;
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x130>
          break;
 800245a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2bff      	cmp	r3, #255	@ 0xff
 8002460:	d801      	bhi.n	8002466 <HAL_GPIO_Init+0x13a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	e001      	b.n	800246a <HAL_GPIO_Init+0x13e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2bff      	cmp	r3, #255	@ 0xff
 8002470:	d802      	bhi.n	8002478 <HAL_GPIO_Init+0x14c>
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x152>
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	3b08      	subs	r3, #8
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	210f      	movs	r1, #15
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	401a      	ands	r2, r3
 8002490:	6a39      	ldr	r1, [r7, #32]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80b1 	beq.w	800260e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024ac:	4b4d      	ldr	r3, [pc, #308]	@ (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a4c      	ldr	r2, [pc, #304]	@ (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <HAL_GPIO_Init+0x2b8>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024c4:	4a48      	ldr	r2, [pc, #288]	@ (80025e8 <HAL_GPIO_Init+0x2bc>)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a40      	ldr	r2, [pc, #256]	@ (80025ec <HAL_GPIO_Init+0x2c0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <HAL_GPIO_Init+0x1ec>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3f      	ldr	r2, [pc, #252]	@ (80025f0 <HAL_GPIO_Init+0x2c4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00d      	beq.n	8002514 <HAL_GPIO_Init+0x1e8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3e      	ldr	r2, [pc, #248]	@ (80025f4 <HAL_GPIO_Init+0x2c8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <HAL_GPIO_Init+0x1e4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3d      	ldr	r2, [pc, #244]	@ (80025f8 <HAL_GPIO_Init+0x2cc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_GPIO_Init+0x1e0>
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 800250c:	2304      	movs	r3, #4
 800250e:	e004      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 8002510:	2302      	movs	r3, #2
 8002512:	e002      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_GPIO_Init+0x1ee>
 8002518:	2300      	movs	r3, #0
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	f002 0203 	and.w	r2, r2, #3
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	4093      	lsls	r3, r2
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800252a:	492f      	ldr	r1, [pc, #188]	@ (80025e8 <HAL_GPIO_Init+0x2bc>)
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002544:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	492c      	ldr	r1, [pc, #176]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002552:	4b2a      	ldr	r3, [pc, #168]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	43db      	mvns	r3, r3
 800255a:	4928      	ldr	r1, [pc, #160]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 800255c:	4013      	ands	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800256c:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	4922      	ldr	r1, [pc, #136]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	60cb      	str	r3, [r1, #12]
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800257a:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	43db      	mvns	r3, r3
 8002582:	491e      	ldr	r1, [pc, #120]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 8002584:	4013      	ands	r3, r2
 8002586:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4918      	ldr	r1, [pc, #96]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025a2:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4914      	ldr	r1, [pc, #80]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d021      	beq.n	8002600 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025bc:	4b0f      	ldr	r3, [pc, #60]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	490e      	ldr	r1, [pc, #56]	@ (80025fc <HAL_GPIO_Init+0x2d0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e021      	b.n	800260e <HAL_GPIO_Init+0x2e2>
 80025ca:	bf00      	nop
 80025cc:	10320000 	.word	0x10320000
 80025d0:	10310000 	.word	0x10310000
 80025d4:	10220000 	.word	0x10220000
 80025d8:	10210000 	.word	0x10210000
 80025dc:	10120000 	.word	0x10120000
 80025e0:	10110000 	.word	0x10110000
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40010800 	.word	0x40010800
 80025f0:	40010c00 	.word	0x40010c00
 80025f4:	40011000 	.word	0x40011000
 80025f8:	40011400 	.word	0x40011400
 80025fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_GPIO_Init+0x304>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	43db      	mvns	r3, r3
 8002608:	4909      	ldr	r1, [pc, #36]	@ (8002630 <HAL_GPIO_Init+0x304>)
 800260a:	4013      	ands	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	f47f ae8e 	bne.w	8002340 <HAL_GPIO_Init+0x14>
  }
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	372c      	adds	r7, #44	@ 0x2c
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	40010400 	.word	0x40010400

08002634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	887b      	ldrh	r3, [r7, #2]
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	e001      	b.n	8002656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	807b      	strh	r3, [r7, #2]
 800266e:	4613      	mov	r3, r2
 8002670:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002672:	787b      	ldrb	r3, [r7, #1]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002678:	887a      	ldrh	r2, [r7, #2]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800267e:	e003      	b.n	8002688 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002680:	887b      	ldrh	r3, [r7, #2]
 8002682:	041a      	lsls	r2, r3, #16
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	611a      	str	r2, [r3, #16]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002692:	b480      	push	{r7}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026a4:	887a      	ldrh	r2, [r7, #2]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4013      	ands	r3, r2
 80026aa:	041a      	lsls	r2, r3, #16
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	400b      	ands	r3, r1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	611a      	str	r2, [r3, #16]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ce:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d006      	beq.n	80026e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026da:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f806 	bl	80026f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40010400 	.word	0x40010400

080026f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e12b      	b.n	8002972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff fa5c 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2224      	movs	r2, #36	@ 0x24
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800275a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800276a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800276c:	f001 f832 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8002770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a81      	ldr	r2, [pc, #516]	@ (800297c <HAL_I2C_Init+0x274>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d807      	bhi.n	800278c <HAL_I2C_Init+0x84>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a80      	ldr	r2, [pc, #512]	@ (8002980 <HAL_I2C_Init+0x278>)
 8002780:	4293      	cmp	r3, r2
 8002782:	bf94      	ite	ls
 8002784:	2301      	movls	r3, #1
 8002786:	2300      	movhi	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e006      	b.n	800279a <HAL_I2C_Init+0x92>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a7d      	ldr	r2, [pc, #500]	@ (8002984 <HAL_I2C_Init+0x27c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	bf94      	ite	ls
 8002794:	2301      	movls	r3, #1
 8002796:	2300      	movhi	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0e7      	b.n	8002972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a78      	ldr	r2, [pc, #480]	@ (8002988 <HAL_I2C_Init+0x280>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0c9b      	lsrs	r3, r3, #18
 80027ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a6a      	ldr	r2, [pc, #424]	@ (800297c <HAL_I2C_Init+0x274>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d802      	bhi.n	80027dc <HAL_I2C_Init+0xd4>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3301      	adds	r3, #1
 80027da:	e009      	b.n	80027f0 <HAL_I2C_Init+0xe8>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	4a69      	ldr	r2, [pc, #420]	@ (800298c <HAL_I2C_Init+0x284>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	3301      	adds	r3, #1
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002802:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	495c      	ldr	r1, [pc, #368]	@ (800297c <HAL_I2C_Init+0x274>)
 800280c:	428b      	cmp	r3, r1
 800280e:	d819      	bhi.n	8002844 <HAL_I2C_Init+0x13c>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e59      	subs	r1, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fbb1 f3f3 	udiv	r3, r1, r3
 800281e:	1c59      	adds	r1, r3, #1
 8002820:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002824:	400b      	ands	r3, r1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_I2C_Init+0x138>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1e59      	subs	r1, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fbb1 f3f3 	udiv	r3, r1, r3
 8002838:	3301      	adds	r3, #1
 800283a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283e:	e051      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 8002840:	2304      	movs	r3, #4
 8002842:	e04f      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d111      	bne.n	8002870 <HAL_I2C_Init+0x168>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	440b      	add	r3, r1
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e012      	b.n	8002896 <HAL_I2C_Init+0x18e>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e58      	subs	r0, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	0099      	lsls	r1, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	fbb0 f3f3 	udiv	r3, r0, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Init+0x196>
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10e      	bne.n	80028c4 <HAL_I2C_Init+0x1bc>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1e58      	subs	r0, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	440b      	add	r3, r1
 80028b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c2:	e00f      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	0099      	lsls	r1, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	6809      	ldr	r1, [r1, #0]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002912:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6911      	ldr	r1, [r2, #16]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	4311      	orrs	r1, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	000186a0 	.word	0x000186a0
 8002980:	001e847f 	.word	0x001e847f
 8002984:	003d08ff 	.word	0x003d08ff
 8002988:	431bde83 	.word	0x431bde83
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	461a      	mov	r2, r3
 800299c:	460b      	mov	r3, r1
 800299e:	817b      	strh	r3, [r7, #10]
 80029a0:	4613      	mov	r3, r2
 80029a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff fb86 	bl	80020b4 <HAL_GetTick>
 80029a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	f040 80e0 	bne.w	8002b78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2319      	movs	r3, #25
 80029be:	2201      	movs	r2, #1
 80029c0:	4970      	ldr	r1, [pc, #448]	@ (8002b84 <HAL_I2C_Master_Transmit+0x1f4>)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f964 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
 80029d0:	e0d3      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_I2C_Master_Transmit+0x50>
 80029dc:	2302      	movs	r3, #2
 80029de:	e0cc      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d007      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2221      	movs	r2, #33	@ 0x21
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2210      	movs	r2, #16
 8002a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	893a      	ldrh	r2, [r7, #8]
 8002a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a50      	ldr	r2, [pc, #320]	@ (8002b88 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a48:	8979      	ldrh	r1, [r7, #10]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f89c 	bl	8002b8c <I2C_MasterRequestWrite>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e08d      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a74:	e066      	b.n	8002b44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fa22 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d107      	bne.n	8002a9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e06b      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d11b      	bne.n	8002b18 <HAL_I2C_Master_Transmit+0x188>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d017      	beq.n	8002b18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	6a39      	ldr	r1, [r7, #32]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fa19 	bl	8002f54 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d107      	bne.n	8002b40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e01a      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d194      	bne.n	8002a76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
  }
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	00100002 	.word	0x00100002
 8002b88:	ffff0000 	.word	0xffff0000

08002b8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d006      	beq.n	8002bb6 <I2C_MasterRequestWrite+0x2a>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d003      	beq.n	8002bb6 <I2C_MasterRequestWrite+0x2a>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bb4:	d108      	bne.n	8002bc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e00b      	b.n	8002be0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	2b12      	cmp	r3, #18
 8002bce:	d107      	bne.n	8002be0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f84f 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00d      	beq.n	8002c14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c06:	d103      	bne.n	8002c10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e035      	b.n	8002c80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c1c:	d108      	bne.n	8002c30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c1e:	897b      	ldrh	r3, [r7, #10]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c2c:	611a      	str	r2, [r3, #16]
 8002c2e:	e01b      	b.n	8002c68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c30:	897b      	ldrh	r3, [r7, #10]
 8002c32:	11db      	asrs	r3, r3, #7
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f003 0306 	and.w	r3, r3, #6
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f063 030f 	orn	r3, r3, #15
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	490e      	ldr	r1, [pc, #56]	@ (8002c88 <I2C_MasterRequestWrite+0xfc>)
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f898 	bl	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e010      	b.n	8002c80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4907      	ldr	r1, [pc, #28]	@ (8002c8c <I2C_MasterRequestWrite+0x100>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f888 	bl	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	00010008 	.word	0x00010008
 8002c8c:	00010002 	.word	0x00010002

08002c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca0:	e048      	b.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d044      	beq.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002caa:	f7ff fa03 	bl	80020b4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d302      	bcc.n	8002cc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d139      	bne.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	0c1b      	lsrs	r3, r3, #16
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d10d      	bne.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	43da      	mvns	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	e00c      	b.n	8002d00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	43da      	mvns	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d116      	bne.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e023      	b.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10d      	bne.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	e00c      	b.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	43da      	mvns	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4013      	ands	r3, r2
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d093      	beq.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d92:	e071      	b.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da2:	d123      	bne.n	8002dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e067      	b.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d041      	beq.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df4:	f7ff f95e 	bl	80020b4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d302      	bcc.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d136      	bne.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10c      	bne.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	e00b      	b.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e021      	b.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10c      	bne.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf14      	ite	ne
 8002e94:	2301      	movne	r3, #1
 8002e96:	2300      	moveq	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e00b      	b.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f47f af6d 	bne.w	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed0:	e034      	b.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f886 	bl	8002fe4 <I2C_IsAcknowledgeFailed>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e034      	b.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d028      	beq.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7ff f8e3 	bl	80020b4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d11d      	bne.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d016      	beq.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e007      	b.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d1c3      	bne.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f60:	e034      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f83e 	bl	8002fe4 <I2C_IsAcknowledgeFailed>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e034      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d028      	beq.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7ff f89b 	bl	80020b4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11d      	bne.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d016      	beq.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e007      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d1c3      	bne.n	8002f62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffa:	d11b      	bne.n	8003034 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003004:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	f043 0204 	orr.w	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e272      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8087 	beq.w	800316e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003060:	4b92      	ldr	r3, [pc, #584]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b04      	cmp	r3, #4
 800306a:	d00c      	beq.n	8003086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800306c:	4b8f      	ldr	r3, [pc, #572]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d112      	bne.n	800309e <HAL_RCC_OscConfig+0x5e>
 8003078:	4b8c      	ldr	r3, [pc, #560]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003084:	d10b      	bne.n	800309e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003086:	4b89      	ldr	r3, [pc, #548]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d06c      	beq.n	800316c <HAL_RCC_OscConfig+0x12c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d168      	bne.n	800316c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e24c      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x76>
 80030a8:	4b80      	ldr	r3, [pc, #512]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a7f      	ldr	r2, [pc, #508]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e02e      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b7b      	ldr	r3, [pc, #492]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7a      	ldr	r2, [pc, #488]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b78      	ldr	r3, [pc, #480]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a77      	ldr	r2, [pc, #476]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e01d      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0xbc>
 80030e2:	4b72      	ldr	r3, [pc, #456]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a71      	ldr	r2, [pc, #452]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b6f      	ldr	r3, [pc, #444]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6e      	ldr	r2, [pc, #440]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_OscConfig+0xd4>
 80030fc:	4b6b      	ldr	r3, [pc, #428]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6a      	ldr	r2, [pc, #424]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b68      	ldr	r3, [pc, #416]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a67      	ldr	r2, [pc, #412]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 800310e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe ffca 	bl	80020b4 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003124:	f7fe ffc6 	bl	80020b4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	@ 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e200      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b5d      	ldr	r3, [pc, #372]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0xe4>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe ffb6 	bl	80020b4 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7fe ffb2 	bl	80020b4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	@ 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1ec      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x10c>
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d063      	beq.n	8003242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800317a:	4b4c      	ldr	r3, [pc, #304]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003186:	4b49      	ldr	r3, [pc, #292]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b08      	cmp	r3, #8
 8003190:	d11c      	bne.n	80031cc <HAL_RCC_OscConfig+0x18c>
 8003192:	4b46      	ldr	r3, [pc, #280]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	4b43      	ldr	r3, [pc, #268]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x176>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e1c0      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4939      	ldr	r1, [pc, #228]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	e03a      	b.n	8003242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d4:	4b36      	ldr	r3, [pc, #216]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7fe ff6b 	bl	80020b4 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e2:	f7fe ff67 	bl	80020b4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e1a1      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f4:	4b2d      	ldr	r3, [pc, #180]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003200:	4b2a      	ldr	r3, [pc, #168]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4927      	ldr	r1, [pc, #156]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
 8003214:	e015      	b.n	8003242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003216:	4b26      	ldr	r3, [pc, #152]	@ (80032b0 <HAL_RCC_OscConfig+0x270>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe ff4a 	bl	80020b4 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003224:	f7fe ff46 	bl	80020b4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e180      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d03a      	beq.n	80032c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d019      	beq.n	800328a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003256:	4b17      	ldr	r3, [pc, #92]	@ (80032b4 <HAL_RCC_OscConfig+0x274>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325c:	f7fe ff2a 	bl	80020b4 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003264:	f7fe ff26 	bl	80020b4 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e160      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <HAL_RCC_OscConfig+0x26c>)
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003282:	2001      	movs	r0, #1
 8003284:	f000 face 	bl	8003824 <RCC_Delay>
 8003288:	e01c      	b.n	80032c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <HAL_RCC_OscConfig+0x274>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fe ff10 	bl	80020b4 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003296:	e00f      	b.n	80032b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7fe ff0c 	bl	80020b4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d908      	bls.n	80032b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e146      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	42420000 	.word	0x42420000
 80032b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	4b92      	ldr	r3, [pc, #584]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e9      	bne.n	8003298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a6 	beq.w	800341e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10d      	bne.n	80032fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b88      	ldr	r3, [pc, #544]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a87      	ldr	r2, [pc, #540]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]
 80032ee:	4b85      	ldr	r3, [pc, #532]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b82      	ldr	r3, [pc, #520]	@ (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330a:	4b7f      	ldr	r3, [pc, #508]	@ (8003508 <HAL_RCC_OscConfig+0x4c8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7e      	ldr	r2, [pc, #504]	@ (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fe fecd 	bl	80020b4 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fe fec9 	bl	80020b4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b64      	cmp	r3, #100	@ 0x64
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e103      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b75      	ldr	r3, [pc, #468]	@ (8003508 <HAL_RCC_OscConfig+0x4c8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x312>
 8003344:	4b6f      	ldr	r3, [pc, #444]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a6e      	ldr	r2, [pc, #440]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6213      	str	r3, [r2, #32]
 8003350:	e02d      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x334>
 800335a:	4b6a      	ldr	r3, [pc, #424]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a69      	ldr	r2, [pc, #420]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	4b67      	ldr	r3, [pc, #412]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a66      	ldr	r2, [pc, #408]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6213      	str	r3, [r2, #32]
 8003372:	e01c      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d10c      	bne.n	8003396 <HAL_RCC_OscConfig+0x356>
 800337c:	4b61      	ldr	r3, [pc, #388]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	4a60      	ldr	r2, [pc, #384]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	f043 0304 	orr.w	r3, r3, #4
 8003386:	6213      	str	r3, [r2, #32]
 8003388:	4b5e      	ldr	r3, [pc, #376]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a5d      	ldr	r2, [pc, #372]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6213      	str	r3, [r2, #32]
 8003394:	e00b      	b.n	80033ae <HAL_RCC_OscConfig+0x36e>
 8003396:	4b5b      	ldr	r3, [pc, #364]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a5a      	ldr	r2, [pc, #360]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6213      	str	r3, [r2, #32]
 80033a2:	4b58      	ldr	r3, [pc, #352]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a57      	ldr	r2, [pc, #348]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d015      	beq.n	80033e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fe7d 	bl	80020b4 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe fe79 	bl	80020b4 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0b1      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ee      	beq.n	80033be <HAL_RCC_OscConfig+0x37e>
 80033e0:	e014      	b.n	800340c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fe67 	bl	80020b4 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe fe63 	bl	80020b4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e09b      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	4b40      	ldr	r3, [pc, #256]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ee      	bne.n	80033ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003412:	4b3c      	ldr	r3, [pc, #240]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4a3b      	ldr	r2, [pc, #236]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800341c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8087 	beq.w	8003536 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	4b36      	ldr	r3, [pc, #216]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d061      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d146      	bne.n	80034ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343c:	4b33      	ldr	r3, [pc, #204]	@ (800350c <HAL_RCC_OscConfig+0x4cc>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe fe37 	bl	80020b4 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe fe33 	bl	80020b4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e06d      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345c:	4b29      	ldr	r3, [pc, #164]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003470:	d108      	bne.n	8003484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003472:	4b24      	ldr	r3, [pc, #144]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4921      	ldr	r1, [pc, #132]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003484:	4b1f      	ldr	r3, [pc, #124]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a19      	ldr	r1, [r3, #32]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	430b      	orrs	r3, r1
 8003496:	491b      	ldr	r1, [pc, #108]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349c:	4b1b      	ldr	r3, [pc, #108]	@ (800350c <HAL_RCC_OscConfig+0x4cc>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7fe fe07 	bl	80020b4 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe fe03 	bl	80020b4 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e03d      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034bc:	4b11      	ldr	r3, [pc, #68]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x46a>
 80034c8:	e035      	b.n	8003536 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ca:	4b10      	ldr	r3, [pc, #64]	@ (800350c <HAL_RCC_OscConfig+0x4cc>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fe fdf0 	bl	80020b4 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe fdec 	bl	80020b4 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e026      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ea:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x498>
 80034f6:	e01e      	b.n	8003536 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e019      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
 800350c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_RCC_OscConfig+0x500>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	429a      	cmp	r2, r3
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000

08003544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0d0      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b6a      	ldr	r3, [pc, #424]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d910      	bls.n	8003588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b67      	ldr	r3, [pc, #412]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	4965      	ldr	r1, [pc, #404]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b63      	ldr	r3, [pc, #396]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b8      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a0:	4b59      	ldr	r3, [pc, #356]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a58      	ldr	r2, [pc, #352]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b8:	4b53      	ldr	r3, [pc, #332]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a52      	ldr	r2, [pc, #328]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80035c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b50      	ldr	r3, [pc, #320]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	494d      	ldr	r1, [pc, #308]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d040      	beq.n	8003664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d115      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e07f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e073      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4b3d      	ldr	r3, [pc, #244]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06b      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003622:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f023 0203 	bic.w	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4936      	ldr	r1, [pc, #216]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003634:	f7fe fd3e 	bl	80020b4 <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	e00a      	b.n	8003652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363c:	f7fe fd3a 	bl	80020b4 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e053      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	4b2d      	ldr	r3, [pc, #180]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 020c 	and.w	r2, r3, #12
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	429a      	cmp	r2, r3
 8003662:	d1eb      	bne.n	800363c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003664:	4b27      	ldr	r3, [pc, #156]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d210      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b24      	ldr	r3, [pc, #144]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 0207 	bic.w	r2, r3, #7
 800367a:	4922      	ldr	r1, [pc, #136]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b20      	ldr	r3, [pc, #128]	@ (8003704 <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e032      	b.n	80036fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4916      	ldr	r1, [pc, #88]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036be:	4b12      	ldr	r3, [pc, #72]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	490e      	ldr	r1, [pc, #56]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d2:	f000 f821 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	490a      	ldr	r1, [pc, #40]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	5ccb      	ldrb	r3, [r1, r3]
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	4a09      	ldr	r2, [pc, #36]	@ (8003710 <HAL_RCC_ClockConfig+0x1cc>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ee:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_ClockConfig+0x1d0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fc9c 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	08004be4 	.word	0x08004be4
 8003710:	20000048 	.word	0x20000048
 8003714:	20000058 	.word	0x20000058

08003718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d002      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x30>
 8003742:	2b08      	cmp	r3, #8
 8003744:	d003      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x36>
 8003746:	e027      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003748:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800374a:	613b      	str	r3, [r7, #16]
      break;
 800374c:	e027      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	0c9b      	lsrs	r3, r3, #18
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	4a17      	ldr	r2, [pc, #92]	@ (80037b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003758:	5cd3      	ldrb	r3, [r2, r3]
 800375a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d010      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003766:	4b11      	ldr	r3, [pc, #68]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	0c5b      	lsrs	r3, r3, #17
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	4a11      	ldr	r2, [pc, #68]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a0d      	ldr	r2, [pc, #52]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800377a:	fb03 f202 	mul.w	r2, r3, r2
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e004      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a0c      	ldr	r2, [pc, #48]	@ (80037bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	613b      	str	r3, [r7, #16]
      break;
 8003796:	e002      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800379a:	613b      	str	r3, [r7, #16]
      break;
 800379c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379e:	693b      	ldr	r3, [r7, #16]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	007a1200 	.word	0x007a1200
 80037b4:	08004bfc 	.word	0x08004bfc
 80037b8:	08004c0c 	.word	0x08004c0c
 80037bc:	003d0900 	.word	0x003d0900

080037c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c4:	4b02      	ldr	r3, [pc, #8]	@ (80037d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	20000048 	.word	0x20000048

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037d8:	f7ff fff2 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4903      	ldr	r1, [pc, #12]	@ (80037f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ea:	5ccb      	ldrb	r3, [r1, r3]
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	08004bf4 	.word	0x08004bf4

080037fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003800:	f7ff ffde 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	0adb      	lsrs	r3, r3, #11
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4903      	ldr	r1, [pc, #12]	@ (8003820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	08004bf4 	.word	0x08004bf4

08003824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800382c:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <RCC_Delay+0x34>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0a      	ldr	r2, [pc, #40]	@ (800385c <RCC_Delay+0x38>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	0a5b      	lsrs	r3, r3, #9
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003840:	bf00      	nop
  }
  while (Delay --);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1e5a      	subs	r2, r3, #1
 8003846:	60fa      	str	r2, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f9      	bne.n	8003840 <RCC_Delay+0x1c>
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	20000048 	.word	0x20000048
 800385c:	10624dd3 	.word	0x10624dd3

08003860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e041      	b.n	80038f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe fa00 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f000 fa5c 	bl	8003d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d001      	beq.n	8003918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e03a      	b.n	800398e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a18      	ldr	r2, [pc, #96]	@ (8003998 <HAL_TIM_Base_Start_IT+0x98>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00e      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x58>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003942:	d009      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x58>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a14      	ldr	r2, [pc, #80]	@ (800399c <HAL_TIM_Base_Start_IT+0x9c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x58>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a13      	ldr	r2, [pc, #76]	@ (80039a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d111      	bne.n	800397c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b06      	cmp	r3, #6
 8003968:	d010      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0201 	orr.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397a:	e007      	b.n	800398c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800

080039a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d020      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0202 	mvn.w	r2, #2
 80039d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f998 	bl	8003d24 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f98b 	bl	8003d12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f99a 	bl	8003d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d020      	beq.n	8003a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01b      	beq.n	8003a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0204 	mvn.w	r2, #4
 8003a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f972 	bl	8003d24 <HAL_TIM_IC_CaptureCallback>
 8003a40:	e005      	b.n	8003a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f965 	bl	8003d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f974 	bl	8003d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d020      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01b      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0208 	mvn.w	r2, #8
 8003a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2204      	movs	r2, #4
 8003a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f94c 	bl	8003d24 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f93f 	bl	8003d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f94e 	bl	8003d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d020      	beq.n	8003aec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01b      	beq.n	8003aec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0210 	mvn.w	r2, #16
 8003abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f926 	bl	8003d24 <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f919 	bl	8003d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f928 	bl	8003d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00c      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0201 	mvn.w	r2, #1
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fd fbc8 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa7f 	bl	8004032 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8f8 	bl	8003d48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00c      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0220 	mvn.w	r2, #32
 8003b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa52 	bl	8004020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIM_ConfigClockSource+0x1c>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e0b4      	b.n	8003d0a <HAL_TIM_ConfigClockSource+0x186>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bd8:	d03e      	beq.n	8003c58 <HAL_TIM_ConfigClockSource+0xd4>
 8003bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bde:	f200 8087 	bhi.w	8003cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be6:	f000 8086 	beq.w	8003cf6 <HAL_TIM_ConfigClockSource+0x172>
 8003bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bee:	d87f      	bhi.n	8003cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b70      	cmp	r3, #112	@ 0x70
 8003bf2:	d01a      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0xa6>
 8003bf4:	2b70      	cmp	r3, #112	@ 0x70
 8003bf6:	d87b      	bhi.n	8003cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf8:	2b60      	cmp	r3, #96	@ 0x60
 8003bfa:	d050      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x11a>
 8003bfc:	2b60      	cmp	r3, #96	@ 0x60
 8003bfe:	d877      	bhi.n	8003cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c00:	2b50      	cmp	r3, #80	@ 0x50
 8003c02:	d03c      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0xfa>
 8003c04:	2b50      	cmp	r3, #80	@ 0x50
 8003c06:	d873      	bhi.n	8003cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c08:	2b40      	cmp	r3, #64	@ 0x40
 8003c0a:	d058      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x13a>
 8003c0c:	2b40      	cmp	r3, #64	@ 0x40
 8003c0e:	d86f      	bhi.n	8003cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c10:	2b30      	cmp	r3, #48	@ 0x30
 8003c12:	d064      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x15a>
 8003c14:	2b30      	cmp	r3, #48	@ 0x30
 8003c16:	d86b      	bhi.n	8003cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d060      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x15a>
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d867      	bhi.n	8003cf0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d05c      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x15a>
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d05a      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x15a>
 8003c28:	e062      	b.n	8003cf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c3a:	f000 f974 	bl	8003f26 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	609a      	str	r2, [r3, #8]
      break;
 8003c56:	e04f      	b.n	8003cf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c68:	f000 f95d 	bl	8003f26 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c7a:	609a      	str	r2, [r3, #8]
      break;
 8003c7c:	e03c      	b.n	8003cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f000 f8d4 	bl	8003e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2150      	movs	r1, #80	@ 0x50
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f92b 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003c9c:	e02c      	b.n	8003cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003caa:	461a      	mov	r2, r3
 8003cac:	f000 f8f2 	bl	8003e94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2160      	movs	r1, #96	@ 0x60
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f91b 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003cbc:	e01c      	b.n	8003cf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f000 f8b4 	bl	8003e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2140      	movs	r1, #64	@ 0x40
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f90b 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003cdc:	e00c      	b.n	8003cf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f000 f902 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003cee:	e003      	b.n	8003cf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf4:	e000      	b.n	8003cf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr
	...

08003d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003e2c <TIM_Base_SetConfig+0xd0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <TIM_Base_SetConfig+0x30>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7a:	d007      	beq.n	8003d8c <TIM_Base_SetConfig+0x30>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e30 <TIM_Base_SetConfig+0xd4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x30>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	@ (8003e34 <TIM_Base_SetConfig+0xd8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a22      	ldr	r2, [pc, #136]	@ (8003e2c <TIM_Base_SetConfig+0xd0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <TIM_Base_SetConfig+0x62>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dac:	d007      	beq.n	8003dbe <TIM_Base_SetConfig+0x62>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e30 <TIM_Base_SetConfig+0xd4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_Base_SetConfig+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e34 <TIM_Base_SetConfig+0xd8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d108      	bne.n	8003dd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a0d      	ldr	r2, [pc, #52]	@ (8003e2c <TIM_Base_SetConfig+0xd0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d103      	bne.n	8003e04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f023 0201 	bic.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	611a      	str	r2, [r3, #16]
  }
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800

08003e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f023 0201 	bic.w	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f023 030a 	bic.w	r3, r3, #10
 8003e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0210 	bic.w	r2, r3, #16
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	031b      	lsls	r3, r3, #12
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	621a      	str	r2, [r3, #32]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f043 0307 	orr.w	r3, r3, #7
 8003f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	021a      	lsls	r2, r3, #8
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	609a      	str	r2, [r3, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e046      	b.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a16      	ldr	r2, [pc, #88]	@ (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc8:	d009      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a12      	ldr	r2, [pc, #72]	@ (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a10      	ldr	r2, [pc, #64]	@ (800401c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800

08004020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e042      	b.n	80040dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd fe32 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2224      	movs	r2, #36	@ 0x24
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f82b 	bl	80040e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800409c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800411e:	f023 030c 	bic.w	r3, r3, #12
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	430b      	orrs	r3, r1
 800412a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2c      	ldr	r2, [pc, #176]	@ (80041f8 <UART_SetConfig+0x114>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d103      	bne.n	8004154 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7ff fb56 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	e002      	b.n	800415a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004154:	f7ff fb3e 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8004158:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009a      	lsls	r2, r3, #2
 8004164:	441a      	add	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	4a22      	ldr	r2, [pc, #136]	@ (80041fc <UART_SetConfig+0x118>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	0119      	lsls	r1, r3, #4
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	009a      	lsls	r2, r3, #2
 8004184:	441a      	add	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004190:	4b1a      	ldr	r3, [pc, #104]	@ (80041fc <UART_SetConfig+0x118>)
 8004192:	fba3 0302 	umull	r0, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	2064      	movs	r0, #100	@ 0x64
 800419a:	fb00 f303 	mul.w	r3, r0, r3
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	3332      	adds	r3, #50	@ 0x32
 80041a4:	4a15      	ldr	r2, [pc, #84]	@ (80041fc <UART_SetConfig+0x118>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b0:	4419      	add	r1, r3
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009a      	lsls	r2, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c8:	4b0c      	ldr	r3, [pc, #48]	@ (80041fc <UART_SetConfig+0x118>)
 80041ca:	fba3 0302 	umull	r0, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2064      	movs	r0, #100	@ 0x64
 80041d2:	fb00 f303 	mul.w	r3, r0, r3
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	3332      	adds	r3, #50	@ 0x32
 80041dc:	4a07      	ldr	r2, [pc, #28]	@ (80041fc <UART_SetConfig+0x118>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	f003 020f 	and.w	r2, r3, #15
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	440a      	add	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40013800 	.word	0x40013800
 80041fc:	51eb851f 	.word	0x51eb851f

08004200 <siprintf>:
 8004200:	b40e      	push	{r1, r2, r3}
 8004202:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004206:	b500      	push	{lr}
 8004208:	b09c      	sub	sp, #112	@ 0x70
 800420a:	ab1d      	add	r3, sp, #116	@ 0x74
 800420c:	9002      	str	r0, [sp, #8]
 800420e:	9006      	str	r0, [sp, #24]
 8004210:	9107      	str	r1, [sp, #28]
 8004212:	9104      	str	r1, [sp, #16]
 8004214:	4808      	ldr	r0, [pc, #32]	@ (8004238 <siprintf+0x38>)
 8004216:	4909      	ldr	r1, [pc, #36]	@ (800423c <siprintf+0x3c>)
 8004218:	f853 2b04 	ldr.w	r2, [r3], #4
 800421c:	9105      	str	r1, [sp, #20]
 800421e:	6800      	ldr	r0, [r0, #0]
 8004220:	a902      	add	r1, sp, #8
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	f000 f992 	bl	800454c <_svfiprintf_r>
 8004228:	2200      	movs	r2, #0
 800422a:	9b02      	ldr	r3, [sp, #8]
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	b01c      	add	sp, #112	@ 0x70
 8004230:	f85d eb04 	ldr.w	lr, [sp], #4
 8004234:	b003      	add	sp, #12
 8004236:	4770      	bx	lr
 8004238:	20000060 	.word	0x20000060
 800423c:	ffff0208 	.word	0xffff0208

08004240 <memset>:
 8004240:	4603      	mov	r3, r0
 8004242:	4402      	add	r2, r0
 8004244:	4293      	cmp	r3, r2
 8004246:	d100      	bne.n	800424a <memset+0xa>
 8004248:	4770      	bx	lr
 800424a:	f803 1b01 	strb.w	r1, [r3], #1
 800424e:	e7f9      	b.n	8004244 <memset+0x4>

08004250 <__errno>:
 8004250:	4b01      	ldr	r3, [pc, #4]	@ (8004258 <__errno+0x8>)
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000060 	.word	0x20000060

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	2600      	movs	r6, #0
 8004260:	4d0c      	ldr	r5, [pc, #48]	@ (8004294 <__libc_init_array+0x38>)
 8004262:	4c0d      	ldr	r4, [pc, #52]	@ (8004298 <__libc_init_array+0x3c>)
 8004264:	1b64      	subs	r4, r4, r5
 8004266:	10a4      	asrs	r4, r4, #2
 8004268:	42a6      	cmp	r6, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	f000 fc78 	bl	8004b60 <_init>
 8004270:	2600      	movs	r6, #0
 8004272:	4d0a      	ldr	r5, [pc, #40]	@ (800429c <__libc_init_array+0x40>)
 8004274:	4c0a      	ldr	r4, [pc, #40]	@ (80042a0 <__libc_init_array+0x44>)
 8004276:	1b64      	subs	r4, r4, r5
 8004278:	10a4      	asrs	r4, r4, #2
 800427a:	42a6      	cmp	r6, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	f855 3b04 	ldr.w	r3, [r5], #4
 8004284:	4798      	blx	r3
 8004286:	3601      	adds	r6, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	f855 3b04 	ldr.w	r3, [r5], #4
 800428e:	4798      	blx	r3
 8004290:	3601      	adds	r6, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	08004c4c 	.word	0x08004c4c
 8004298:	08004c4c 	.word	0x08004c4c
 800429c:	08004c4c 	.word	0x08004c4c
 80042a0:	08004c50 	.word	0x08004c50

080042a4 <__retarget_lock_acquire_recursive>:
 80042a4:	4770      	bx	lr

080042a6 <__retarget_lock_release_recursive>:
 80042a6:	4770      	bx	lr

080042a8 <_free_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	4605      	mov	r5, r0
 80042ac:	2900      	cmp	r1, #0
 80042ae:	d040      	beq.n	8004332 <_free_r+0x8a>
 80042b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042b4:	1f0c      	subs	r4, r1, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bfb8      	it	lt
 80042ba:	18e4      	addlt	r4, r4, r3
 80042bc:	f000 f8de 	bl	800447c <__malloc_lock>
 80042c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004334 <_free_r+0x8c>)
 80042c2:	6813      	ldr	r3, [r2, #0]
 80042c4:	b933      	cbnz	r3, 80042d4 <_free_r+0x2c>
 80042c6:	6063      	str	r3, [r4, #4]
 80042c8:	6014      	str	r4, [r2, #0]
 80042ca:	4628      	mov	r0, r5
 80042cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042d0:	f000 b8da 	b.w	8004488 <__malloc_unlock>
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	d908      	bls.n	80042ea <_free_r+0x42>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	1821      	adds	r1, r4, r0
 80042dc:	428b      	cmp	r3, r1
 80042de:	bf01      	itttt	eq
 80042e0:	6819      	ldreq	r1, [r3, #0]
 80042e2:	685b      	ldreq	r3, [r3, #4]
 80042e4:	1809      	addeq	r1, r1, r0
 80042e6:	6021      	streq	r1, [r4, #0]
 80042e8:	e7ed      	b.n	80042c6 <_free_r+0x1e>
 80042ea:	461a      	mov	r2, r3
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	b10b      	cbz	r3, 80042f4 <_free_r+0x4c>
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	d9fa      	bls.n	80042ea <_free_r+0x42>
 80042f4:	6811      	ldr	r1, [r2, #0]
 80042f6:	1850      	adds	r0, r2, r1
 80042f8:	42a0      	cmp	r0, r4
 80042fa:	d10b      	bne.n	8004314 <_free_r+0x6c>
 80042fc:	6820      	ldr	r0, [r4, #0]
 80042fe:	4401      	add	r1, r0
 8004300:	1850      	adds	r0, r2, r1
 8004302:	4283      	cmp	r3, r0
 8004304:	6011      	str	r1, [r2, #0]
 8004306:	d1e0      	bne.n	80042ca <_free_r+0x22>
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4408      	add	r0, r1
 800430e:	6010      	str	r0, [r2, #0]
 8004310:	6053      	str	r3, [r2, #4]
 8004312:	e7da      	b.n	80042ca <_free_r+0x22>
 8004314:	d902      	bls.n	800431c <_free_r+0x74>
 8004316:	230c      	movs	r3, #12
 8004318:	602b      	str	r3, [r5, #0]
 800431a:	e7d6      	b.n	80042ca <_free_r+0x22>
 800431c:	6820      	ldr	r0, [r4, #0]
 800431e:	1821      	adds	r1, r4, r0
 8004320:	428b      	cmp	r3, r1
 8004322:	bf01      	itttt	eq
 8004324:	6819      	ldreq	r1, [r3, #0]
 8004326:	685b      	ldreq	r3, [r3, #4]
 8004328:	1809      	addeq	r1, r1, r0
 800432a:	6021      	streq	r1, [r4, #0]
 800432c:	6063      	str	r3, [r4, #4]
 800432e:	6054      	str	r4, [r2, #4]
 8004330:	e7cb      	b.n	80042ca <_free_r+0x22>
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	200004dc 	.word	0x200004dc

08004338 <sbrk_aligned>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	4e0f      	ldr	r6, [pc, #60]	@ (8004378 <sbrk_aligned+0x40>)
 800433c:	460c      	mov	r4, r1
 800433e:	6831      	ldr	r1, [r6, #0]
 8004340:	4605      	mov	r5, r0
 8004342:	b911      	cbnz	r1, 800434a <sbrk_aligned+0x12>
 8004344:	f000 fbaa 	bl	8004a9c <_sbrk_r>
 8004348:	6030      	str	r0, [r6, #0]
 800434a:	4621      	mov	r1, r4
 800434c:	4628      	mov	r0, r5
 800434e:	f000 fba5 	bl	8004a9c <_sbrk_r>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	d103      	bne.n	800435e <sbrk_aligned+0x26>
 8004356:	f04f 34ff 	mov.w	r4, #4294967295
 800435a:	4620      	mov	r0, r4
 800435c:	bd70      	pop	{r4, r5, r6, pc}
 800435e:	1cc4      	adds	r4, r0, #3
 8004360:	f024 0403 	bic.w	r4, r4, #3
 8004364:	42a0      	cmp	r0, r4
 8004366:	d0f8      	beq.n	800435a <sbrk_aligned+0x22>
 8004368:	1a21      	subs	r1, r4, r0
 800436a:	4628      	mov	r0, r5
 800436c:	f000 fb96 	bl	8004a9c <_sbrk_r>
 8004370:	3001      	adds	r0, #1
 8004372:	d1f2      	bne.n	800435a <sbrk_aligned+0x22>
 8004374:	e7ef      	b.n	8004356 <sbrk_aligned+0x1e>
 8004376:	bf00      	nop
 8004378:	200004d8 	.word	0x200004d8

0800437c <_malloc_r>:
 800437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004380:	1ccd      	adds	r5, r1, #3
 8004382:	f025 0503 	bic.w	r5, r5, #3
 8004386:	3508      	adds	r5, #8
 8004388:	2d0c      	cmp	r5, #12
 800438a:	bf38      	it	cc
 800438c:	250c      	movcc	r5, #12
 800438e:	2d00      	cmp	r5, #0
 8004390:	4606      	mov	r6, r0
 8004392:	db01      	blt.n	8004398 <_malloc_r+0x1c>
 8004394:	42a9      	cmp	r1, r5
 8004396:	d904      	bls.n	80043a2 <_malloc_r+0x26>
 8004398:	230c      	movs	r3, #12
 800439a:	6033      	str	r3, [r6, #0]
 800439c:	2000      	movs	r0, #0
 800439e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004478 <_malloc_r+0xfc>
 80043a6:	f000 f869 	bl	800447c <__malloc_lock>
 80043aa:	f8d8 3000 	ldr.w	r3, [r8]
 80043ae:	461c      	mov	r4, r3
 80043b0:	bb44      	cbnz	r4, 8004404 <_malloc_r+0x88>
 80043b2:	4629      	mov	r1, r5
 80043b4:	4630      	mov	r0, r6
 80043b6:	f7ff ffbf 	bl	8004338 <sbrk_aligned>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	4604      	mov	r4, r0
 80043be:	d158      	bne.n	8004472 <_malloc_r+0xf6>
 80043c0:	f8d8 4000 	ldr.w	r4, [r8]
 80043c4:	4627      	mov	r7, r4
 80043c6:	2f00      	cmp	r7, #0
 80043c8:	d143      	bne.n	8004452 <_malloc_r+0xd6>
 80043ca:	2c00      	cmp	r4, #0
 80043cc:	d04b      	beq.n	8004466 <_malloc_r+0xea>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	4639      	mov	r1, r7
 80043d2:	4630      	mov	r0, r6
 80043d4:	eb04 0903 	add.w	r9, r4, r3
 80043d8:	f000 fb60 	bl	8004a9c <_sbrk_r>
 80043dc:	4581      	cmp	r9, r0
 80043de:	d142      	bne.n	8004466 <_malloc_r+0xea>
 80043e0:	6821      	ldr	r1, [r4, #0]
 80043e2:	4630      	mov	r0, r6
 80043e4:	1a6d      	subs	r5, r5, r1
 80043e6:	4629      	mov	r1, r5
 80043e8:	f7ff ffa6 	bl	8004338 <sbrk_aligned>
 80043ec:	3001      	adds	r0, #1
 80043ee:	d03a      	beq.n	8004466 <_malloc_r+0xea>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	442b      	add	r3, r5
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	f8d8 3000 	ldr.w	r3, [r8]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	bb62      	cbnz	r2, 8004458 <_malloc_r+0xdc>
 80043fe:	f8c8 7000 	str.w	r7, [r8]
 8004402:	e00f      	b.n	8004424 <_malloc_r+0xa8>
 8004404:	6822      	ldr	r2, [r4, #0]
 8004406:	1b52      	subs	r2, r2, r5
 8004408:	d420      	bmi.n	800444c <_malloc_r+0xd0>
 800440a:	2a0b      	cmp	r2, #11
 800440c:	d917      	bls.n	800443e <_malloc_r+0xc2>
 800440e:	1961      	adds	r1, r4, r5
 8004410:	42a3      	cmp	r3, r4
 8004412:	6025      	str	r5, [r4, #0]
 8004414:	bf18      	it	ne
 8004416:	6059      	strne	r1, [r3, #4]
 8004418:	6863      	ldr	r3, [r4, #4]
 800441a:	bf08      	it	eq
 800441c:	f8c8 1000 	streq.w	r1, [r8]
 8004420:	5162      	str	r2, [r4, r5]
 8004422:	604b      	str	r3, [r1, #4]
 8004424:	4630      	mov	r0, r6
 8004426:	f000 f82f 	bl	8004488 <__malloc_unlock>
 800442a:	f104 000b 	add.w	r0, r4, #11
 800442e:	1d23      	adds	r3, r4, #4
 8004430:	f020 0007 	bic.w	r0, r0, #7
 8004434:	1ac2      	subs	r2, r0, r3
 8004436:	bf1c      	itt	ne
 8004438:	1a1b      	subne	r3, r3, r0
 800443a:	50a3      	strne	r3, [r4, r2]
 800443c:	e7af      	b.n	800439e <_malloc_r+0x22>
 800443e:	6862      	ldr	r2, [r4, #4]
 8004440:	42a3      	cmp	r3, r4
 8004442:	bf0c      	ite	eq
 8004444:	f8c8 2000 	streq.w	r2, [r8]
 8004448:	605a      	strne	r2, [r3, #4]
 800444a:	e7eb      	b.n	8004424 <_malloc_r+0xa8>
 800444c:	4623      	mov	r3, r4
 800444e:	6864      	ldr	r4, [r4, #4]
 8004450:	e7ae      	b.n	80043b0 <_malloc_r+0x34>
 8004452:	463c      	mov	r4, r7
 8004454:	687f      	ldr	r7, [r7, #4]
 8004456:	e7b6      	b.n	80043c6 <_malloc_r+0x4a>
 8004458:	461a      	mov	r2, r3
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	42a3      	cmp	r3, r4
 800445e:	d1fb      	bne.n	8004458 <_malloc_r+0xdc>
 8004460:	2300      	movs	r3, #0
 8004462:	6053      	str	r3, [r2, #4]
 8004464:	e7de      	b.n	8004424 <_malloc_r+0xa8>
 8004466:	230c      	movs	r3, #12
 8004468:	4630      	mov	r0, r6
 800446a:	6033      	str	r3, [r6, #0]
 800446c:	f000 f80c 	bl	8004488 <__malloc_unlock>
 8004470:	e794      	b.n	800439c <_malloc_r+0x20>
 8004472:	6005      	str	r5, [r0, #0]
 8004474:	e7d6      	b.n	8004424 <_malloc_r+0xa8>
 8004476:	bf00      	nop
 8004478:	200004dc 	.word	0x200004dc

0800447c <__malloc_lock>:
 800447c:	4801      	ldr	r0, [pc, #4]	@ (8004484 <__malloc_lock+0x8>)
 800447e:	f7ff bf11 	b.w	80042a4 <__retarget_lock_acquire_recursive>
 8004482:	bf00      	nop
 8004484:	200004d4 	.word	0x200004d4

08004488 <__malloc_unlock>:
 8004488:	4801      	ldr	r0, [pc, #4]	@ (8004490 <__malloc_unlock+0x8>)
 800448a:	f7ff bf0c 	b.w	80042a6 <__retarget_lock_release_recursive>
 800448e:	bf00      	nop
 8004490:	200004d4 	.word	0x200004d4

08004494 <__ssputs_r>:
 8004494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004498:	461f      	mov	r7, r3
 800449a:	688e      	ldr	r6, [r1, #8]
 800449c:	4682      	mov	sl, r0
 800449e:	42be      	cmp	r6, r7
 80044a0:	460c      	mov	r4, r1
 80044a2:	4690      	mov	r8, r2
 80044a4:	680b      	ldr	r3, [r1, #0]
 80044a6:	d82d      	bhi.n	8004504 <__ssputs_r+0x70>
 80044a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044b0:	d026      	beq.n	8004500 <__ssputs_r+0x6c>
 80044b2:	6965      	ldr	r5, [r4, #20]
 80044b4:	6909      	ldr	r1, [r1, #16]
 80044b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044ba:	eba3 0901 	sub.w	r9, r3, r1
 80044be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044c2:	1c7b      	adds	r3, r7, #1
 80044c4:	444b      	add	r3, r9
 80044c6:	106d      	asrs	r5, r5, #1
 80044c8:	429d      	cmp	r5, r3
 80044ca:	bf38      	it	cc
 80044cc:	461d      	movcc	r5, r3
 80044ce:	0553      	lsls	r3, r2, #21
 80044d0:	d527      	bpl.n	8004522 <__ssputs_r+0x8e>
 80044d2:	4629      	mov	r1, r5
 80044d4:	f7ff ff52 	bl	800437c <_malloc_r>
 80044d8:	4606      	mov	r6, r0
 80044da:	b360      	cbz	r0, 8004536 <__ssputs_r+0xa2>
 80044dc:	464a      	mov	r2, r9
 80044de:	6921      	ldr	r1, [r4, #16]
 80044e0:	f000 fafa 	bl	8004ad8 <memcpy>
 80044e4:	89a3      	ldrh	r3, [r4, #12]
 80044e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	6126      	str	r6, [r4, #16]
 80044f2:	444e      	add	r6, r9
 80044f4:	6026      	str	r6, [r4, #0]
 80044f6:	463e      	mov	r6, r7
 80044f8:	6165      	str	r5, [r4, #20]
 80044fa:	eba5 0509 	sub.w	r5, r5, r9
 80044fe:	60a5      	str	r5, [r4, #8]
 8004500:	42be      	cmp	r6, r7
 8004502:	d900      	bls.n	8004506 <__ssputs_r+0x72>
 8004504:	463e      	mov	r6, r7
 8004506:	4632      	mov	r2, r6
 8004508:	4641      	mov	r1, r8
 800450a:	6820      	ldr	r0, [r4, #0]
 800450c:	f000 faac 	bl	8004a68 <memmove>
 8004510:	2000      	movs	r0, #0
 8004512:	68a3      	ldr	r3, [r4, #8]
 8004514:	1b9b      	subs	r3, r3, r6
 8004516:	60a3      	str	r3, [r4, #8]
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	4433      	add	r3, r6
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004522:	462a      	mov	r2, r5
 8004524:	f000 fae6 	bl	8004af4 <_realloc_r>
 8004528:	4606      	mov	r6, r0
 800452a:	2800      	cmp	r0, #0
 800452c:	d1e0      	bne.n	80044f0 <__ssputs_r+0x5c>
 800452e:	4650      	mov	r0, sl
 8004530:	6921      	ldr	r1, [r4, #16]
 8004532:	f7ff feb9 	bl	80042a8 <_free_r>
 8004536:	230c      	movs	r3, #12
 8004538:	f8ca 3000 	str.w	r3, [sl]
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	f04f 30ff 	mov.w	r0, #4294967295
 8004542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	e7e9      	b.n	800451e <__ssputs_r+0x8a>
	...

0800454c <_svfiprintf_r>:
 800454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004550:	4698      	mov	r8, r3
 8004552:	898b      	ldrh	r3, [r1, #12]
 8004554:	4607      	mov	r7, r0
 8004556:	061b      	lsls	r3, r3, #24
 8004558:	460d      	mov	r5, r1
 800455a:	4614      	mov	r4, r2
 800455c:	b09d      	sub	sp, #116	@ 0x74
 800455e:	d510      	bpl.n	8004582 <_svfiprintf_r+0x36>
 8004560:	690b      	ldr	r3, [r1, #16]
 8004562:	b973      	cbnz	r3, 8004582 <_svfiprintf_r+0x36>
 8004564:	2140      	movs	r1, #64	@ 0x40
 8004566:	f7ff ff09 	bl	800437c <_malloc_r>
 800456a:	6028      	str	r0, [r5, #0]
 800456c:	6128      	str	r0, [r5, #16]
 800456e:	b930      	cbnz	r0, 800457e <_svfiprintf_r+0x32>
 8004570:	230c      	movs	r3, #12
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	b01d      	add	sp, #116	@ 0x74
 800457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457e:	2340      	movs	r3, #64	@ 0x40
 8004580:	616b      	str	r3, [r5, #20]
 8004582:	2300      	movs	r3, #0
 8004584:	9309      	str	r3, [sp, #36]	@ 0x24
 8004586:	2320      	movs	r3, #32
 8004588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800458c:	2330      	movs	r3, #48	@ 0x30
 800458e:	f04f 0901 	mov.w	r9, #1
 8004592:	f8cd 800c 	str.w	r8, [sp, #12]
 8004596:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004730 <_svfiprintf_r+0x1e4>
 800459a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800459e:	4623      	mov	r3, r4
 80045a0:	469a      	mov	sl, r3
 80045a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045a6:	b10a      	cbz	r2, 80045ac <_svfiprintf_r+0x60>
 80045a8:	2a25      	cmp	r2, #37	@ 0x25
 80045aa:	d1f9      	bne.n	80045a0 <_svfiprintf_r+0x54>
 80045ac:	ebba 0b04 	subs.w	fp, sl, r4
 80045b0:	d00b      	beq.n	80045ca <_svfiprintf_r+0x7e>
 80045b2:	465b      	mov	r3, fp
 80045b4:	4622      	mov	r2, r4
 80045b6:	4629      	mov	r1, r5
 80045b8:	4638      	mov	r0, r7
 80045ba:	f7ff ff6b 	bl	8004494 <__ssputs_r>
 80045be:	3001      	adds	r0, #1
 80045c0:	f000 80a7 	beq.w	8004712 <_svfiprintf_r+0x1c6>
 80045c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045c6:	445a      	add	r2, fp
 80045c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80045ca:	f89a 3000 	ldrb.w	r3, [sl]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 809f 	beq.w	8004712 <_svfiprintf_r+0x1c6>
 80045d4:	2300      	movs	r3, #0
 80045d6:	f04f 32ff 	mov.w	r2, #4294967295
 80045da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045de:	f10a 0a01 	add.w	sl, sl, #1
 80045e2:	9304      	str	r3, [sp, #16]
 80045e4:	9307      	str	r3, [sp, #28]
 80045e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80045ec:	4654      	mov	r4, sl
 80045ee:	2205      	movs	r2, #5
 80045f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f4:	484e      	ldr	r0, [pc, #312]	@ (8004730 <_svfiprintf_r+0x1e4>)
 80045f6:	f000 fa61 	bl	8004abc <memchr>
 80045fa:	9a04      	ldr	r2, [sp, #16]
 80045fc:	b9d8      	cbnz	r0, 8004636 <_svfiprintf_r+0xea>
 80045fe:	06d0      	lsls	r0, r2, #27
 8004600:	bf44      	itt	mi
 8004602:	2320      	movmi	r3, #32
 8004604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004608:	0711      	lsls	r1, r2, #28
 800460a:	bf44      	itt	mi
 800460c:	232b      	movmi	r3, #43	@ 0x2b
 800460e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004612:	f89a 3000 	ldrb.w	r3, [sl]
 8004616:	2b2a      	cmp	r3, #42	@ 0x2a
 8004618:	d015      	beq.n	8004646 <_svfiprintf_r+0xfa>
 800461a:	4654      	mov	r4, sl
 800461c:	2000      	movs	r0, #0
 800461e:	f04f 0c0a 	mov.w	ip, #10
 8004622:	9a07      	ldr	r2, [sp, #28]
 8004624:	4621      	mov	r1, r4
 8004626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800462a:	3b30      	subs	r3, #48	@ 0x30
 800462c:	2b09      	cmp	r3, #9
 800462e:	d94b      	bls.n	80046c8 <_svfiprintf_r+0x17c>
 8004630:	b1b0      	cbz	r0, 8004660 <_svfiprintf_r+0x114>
 8004632:	9207      	str	r2, [sp, #28]
 8004634:	e014      	b.n	8004660 <_svfiprintf_r+0x114>
 8004636:	eba0 0308 	sub.w	r3, r0, r8
 800463a:	fa09 f303 	lsl.w	r3, r9, r3
 800463e:	4313      	orrs	r3, r2
 8004640:	46a2      	mov	sl, r4
 8004642:	9304      	str	r3, [sp, #16]
 8004644:	e7d2      	b.n	80045ec <_svfiprintf_r+0xa0>
 8004646:	9b03      	ldr	r3, [sp, #12]
 8004648:	1d19      	adds	r1, r3, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	9103      	str	r1, [sp, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	bfbb      	ittet	lt
 8004652:	425b      	neglt	r3, r3
 8004654:	f042 0202 	orrlt.w	r2, r2, #2
 8004658:	9307      	strge	r3, [sp, #28]
 800465a:	9307      	strlt	r3, [sp, #28]
 800465c:	bfb8      	it	lt
 800465e:	9204      	strlt	r2, [sp, #16]
 8004660:	7823      	ldrb	r3, [r4, #0]
 8004662:	2b2e      	cmp	r3, #46	@ 0x2e
 8004664:	d10a      	bne.n	800467c <_svfiprintf_r+0x130>
 8004666:	7863      	ldrb	r3, [r4, #1]
 8004668:	2b2a      	cmp	r3, #42	@ 0x2a
 800466a:	d132      	bne.n	80046d2 <_svfiprintf_r+0x186>
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	3402      	adds	r4, #2
 8004670:	1d1a      	adds	r2, r3, #4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	9203      	str	r2, [sp, #12]
 8004676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800467a:	9305      	str	r3, [sp, #20]
 800467c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004734 <_svfiprintf_r+0x1e8>
 8004680:	2203      	movs	r2, #3
 8004682:	4650      	mov	r0, sl
 8004684:	7821      	ldrb	r1, [r4, #0]
 8004686:	f000 fa19 	bl	8004abc <memchr>
 800468a:	b138      	cbz	r0, 800469c <_svfiprintf_r+0x150>
 800468c:	2240      	movs	r2, #64	@ 0x40
 800468e:	9b04      	ldr	r3, [sp, #16]
 8004690:	eba0 000a 	sub.w	r0, r0, sl
 8004694:	4082      	lsls	r2, r0
 8004696:	4313      	orrs	r3, r2
 8004698:	3401      	adds	r4, #1
 800469a:	9304      	str	r3, [sp, #16]
 800469c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a0:	2206      	movs	r2, #6
 80046a2:	4825      	ldr	r0, [pc, #148]	@ (8004738 <_svfiprintf_r+0x1ec>)
 80046a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046a8:	f000 fa08 	bl	8004abc <memchr>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d036      	beq.n	800471e <_svfiprintf_r+0x1d2>
 80046b0:	4b22      	ldr	r3, [pc, #136]	@ (800473c <_svfiprintf_r+0x1f0>)
 80046b2:	bb1b      	cbnz	r3, 80046fc <_svfiprintf_r+0x1b0>
 80046b4:	9b03      	ldr	r3, [sp, #12]
 80046b6:	3307      	adds	r3, #7
 80046b8:	f023 0307 	bic.w	r3, r3, #7
 80046bc:	3308      	adds	r3, #8
 80046be:	9303      	str	r3, [sp, #12]
 80046c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046c2:	4433      	add	r3, r6
 80046c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046c6:	e76a      	b.n	800459e <_svfiprintf_r+0x52>
 80046c8:	460c      	mov	r4, r1
 80046ca:	2001      	movs	r0, #1
 80046cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80046d0:	e7a8      	b.n	8004624 <_svfiprintf_r+0xd8>
 80046d2:	2300      	movs	r3, #0
 80046d4:	f04f 0c0a 	mov.w	ip, #10
 80046d8:	4619      	mov	r1, r3
 80046da:	3401      	adds	r4, #1
 80046dc:	9305      	str	r3, [sp, #20]
 80046de:	4620      	mov	r0, r4
 80046e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046e4:	3a30      	subs	r2, #48	@ 0x30
 80046e6:	2a09      	cmp	r2, #9
 80046e8:	d903      	bls.n	80046f2 <_svfiprintf_r+0x1a6>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0c6      	beq.n	800467c <_svfiprintf_r+0x130>
 80046ee:	9105      	str	r1, [sp, #20]
 80046f0:	e7c4      	b.n	800467c <_svfiprintf_r+0x130>
 80046f2:	4604      	mov	r4, r0
 80046f4:	2301      	movs	r3, #1
 80046f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80046fa:	e7f0      	b.n	80046de <_svfiprintf_r+0x192>
 80046fc:	ab03      	add	r3, sp, #12
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	462a      	mov	r2, r5
 8004702:	4638      	mov	r0, r7
 8004704:	4b0e      	ldr	r3, [pc, #56]	@ (8004740 <_svfiprintf_r+0x1f4>)
 8004706:	a904      	add	r1, sp, #16
 8004708:	f3af 8000 	nop.w
 800470c:	1c42      	adds	r2, r0, #1
 800470e:	4606      	mov	r6, r0
 8004710:	d1d6      	bne.n	80046c0 <_svfiprintf_r+0x174>
 8004712:	89ab      	ldrh	r3, [r5, #12]
 8004714:	065b      	lsls	r3, r3, #25
 8004716:	f53f af2d 	bmi.w	8004574 <_svfiprintf_r+0x28>
 800471a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800471c:	e72c      	b.n	8004578 <_svfiprintf_r+0x2c>
 800471e:	ab03      	add	r3, sp, #12
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	462a      	mov	r2, r5
 8004724:	4638      	mov	r0, r7
 8004726:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <_svfiprintf_r+0x1f4>)
 8004728:	a904      	add	r1, sp, #16
 800472a:	f000 f87d 	bl	8004828 <_printf_i>
 800472e:	e7ed      	b.n	800470c <_svfiprintf_r+0x1c0>
 8004730:	08004c0e 	.word	0x08004c0e
 8004734:	08004c14 	.word	0x08004c14
 8004738:	08004c18 	.word	0x08004c18
 800473c:	00000000 	.word	0x00000000
 8004740:	08004495 	.word	0x08004495

08004744 <_printf_common>:
 8004744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004748:	4616      	mov	r6, r2
 800474a:	4698      	mov	r8, r3
 800474c:	688a      	ldr	r2, [r1, #8]
 800474e:	690b      	ldr	r3, [r1, #16]
 8004750:	4607      	mov	r7, r0
 8004752:	4293      	cmp	r3, r2
 8004754:	bfb8      	it	lt
 8004756:	4613      	movlt	r3, r2
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800475e:	460c      	mov	r4, r1
 8004760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004764:	b10a      	cbz	r2, 800476a <_printf_common+0x26>
 8004766:	3301      	adds	r3, #1
 8004768:	6033      	str	r3, [r6, #0]
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	0699      	lsls	r1, r3, #26
 800476e:	bf42      	ittt	mi
 8004770:	6833      	ldrmi	r3, [r6, #0]
 8004772:	3302      	addmi	r3, #2
 8004774:	6033      	strmi	r3, [r6, #0]
 8004776:	6825      	ldr	r5, [r4, #0]
 8004778:	f015 0506 	ands.w	r5, r5, #6
 800477c:	d106      	bne.n	800478c <_printf_common+0x48>
 800477e:	f104 0a19 	add.w	sl, r4, #25
 8004782:	68e3      	ldr	r3, [r4, #12]
 8004784:	6832      	ldr	r2, [r6, #0]
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	42ab      	cmp	r3, r5
 800478a:	dc2b      	bgt.n	80047e4 <_printf_common+0xa0>
 800478c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004790:	6822      	ldr	r2, [r4, #0]
 8004792:	3b00      	subs	r3, #0
 8004794:	bf18      	it	ne
 8004796:	2301      	movne	r3, #1
 8004798:	0692      	lsls	r2, r2, #26
 800479a:	d430      	bmi.n	80047fe <_printf_common+0xba>
 800479c:	4641      	mov	r1, r8
 800479e:	4638      	mov	r0, r7
 80047a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047a4:	47c8      	blx	r9
 80047a6:	3001      	adds	r0, #1
 80047a8:	d023      	beq.n	80047f2 <_printf_common+0xae>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	6922      	ldr	r2, [r4, #16]
 80047ae:	f003 0306 	and.w	r3, r3, #6
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	bf14      	ite	ne
 80047b6:	2500      	movne	r5, #0
 80047b8:	6833      	ldreq	r3, [r6, #0]
 80047ba:	f04f 0600 	mov.w	r6, #0
 80047be:	bf08      	it	eq
 80047c0:	68e5      	ldreq	r5, [r4, #12]
 80047c2:	f104 041a 	add.w	r4, r4, #26
 80047c6:	bf08      	it	eq
 80047c8:	1aed      	subeq	r5, r5, r3
 80047ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80047ce:	bf08      	it	eq
 80047d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bfc4      	itt	gt
 80047d8:	1a9b      	subgt	r3, r3, r2
 80047da:	18ed      	addgt	r5, r5, r3
 80047dc:	42b5      	cmp	r5, r6
 80047de:	d11a      	bne.n	8004816 <_printf_common+0xd2>
 80047e0:	2000      	movs	r0, #0
 80047e2:	e008      	b.n	80047f6 <_printf_common+0xb2>
 80047e4:	2301      	movs	r3, #1
 80047e6:	4652      	mov	r2, sl
 80047e8:	4641      	mov	r1, r8
 80047ea:	4638      	mov	r0, r7
 80047ec:	47c8      	blx	r9
 80047ee:	3001      	adds	r0, #1
 80047f0:	d103      	bne.n	80047fa <_printf_common+0xb6>
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295
 80047f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fa:	3501      	adds	r5, #1
 80047fc:	e7c1      	b.n	8004782 <_printf_common+0x3e>
 80047fe:	2030      	movs	r0, #48	@ 0x30
 8004800:	18e1      	adds	r1, r4, r3
 8004802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800480c:	4422      	add	r2, r4
 800480e:	3302      	adds	r3, #2
 8004810:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004814:	e7c2      	b.n	800479c <_printf_common+0x58>
 8004816:	2301      	movs	r3, #1
 8004818:	4622      	mov	r2, r4
 800481a:	4641      	mov	r1, r8
 800481c:	4638      	mov	r0, r7
 800481e:	47c8      	blx	r9
 8004820:	3001      	adds	r0, #1
 8004822:	d0e6      	beq.n	80047f2 <_printf_common+0xae>
 8004824:	3601      	adds	r6, #1
 8004826:	e7d9      	b.n	80047dc <_printf_common+0x98>

08004828 <_printf_i>:
 8004828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	7e0f      	ldrb	r7, [r1, #24]
 800482e:	4691      	mov	r9, r2
 8004830:	2f78      	cmp	r7, #120	@ 0x78
 8004832:	4680      	mov	r8, r0
 8004834:	460c      	mov	r4, r1
 8004836:	469a      	mov	sl, r3
 8004838:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800483a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800483e:	d807      	bhi.n	8004850 <_printf_i+0x28>
 8004840:	2f62      	cmp	r7, #98	@ 0x62
 8004842:	d80a      	bhi.n	800485a <_printf_i+0x32>
 8004844:	2f00      	cmp	r7, #0
 8004846:	f000 80d3 	beq.w	80049f0 <_printf_i+0x1c8>
 800484a:	2f58      	cmp	r7, #88	@ 0x58
 800484c:	f000 80ba 	beq.w	80049c4 <_printf_i+0x19c>
 8004850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004858:	e03a      	b.n	80048d0 <_printf_i+0xa8>
 800485a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800485e:	2b15      	cmp	r3, #21
 8004860:	d8f6      	bhi.n	8004850 <_printf_i+0x28>
 8004862:	a101      	add	r1, pc, #4	@ (adr r1, 8004868 <_printf_i+0x40>)
 8004864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004868:	080048c1 	.word	0x080048c1
 800486c:	080048d5 	.word	0x080048d5
 8004870:	08004851 	.word	0x08004851
 8004874:	08004851 	.word	0x08004851
 8004878:	08004851 	.word	0x08004851
 800487c:	08004851 	.word	0x08004851
 8004880:	080048d5 	.word	0x080048d5
 8004884:	08004851 	.word	0x08004851
 8004888:	08004851 	.word	0x08004851
 800488c:	08004851 	.word	0x08004851
 8004890:	08004851 	.word	0x08004851
 8004894:	080049d7 	.word	0x080049d7
 8004898:	080048ff 	.word	0x080048ff
 800489c:	08004991 	.word	0x08004991
 80048a0:	08004851 	.word	0x08004851
 80048a4:	08004851 	.word	0x08004851
 80048a8:	080049f9 	.word	0x080049f9
 80048ac:	08004851 	.word	0x08004851
 80048b0:	080048ff 	.word	0x080048ff
 80048b4:	08004851 	.word	0x08004851
 80048b8:	08004851 	.word	0x08004851
 80048bc:	08004999 	.word	0x08004999
 80048c0:	6833      	ldr	r3, [r6, #0]
 80048c2:	1d1a      	adds	r2, r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6032      	str	r2, [r6, #0]
 80048c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048d0:	2301      	movs	r3, #1
 80048d2:	e09e      	b.n	8004a12 <_printf_i+0x1ea>
 80048d4:	6833      	ldr	r3, [r6, #0]
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	1d19      	adds	r1, r3, #4
 80048da:	6031      	str	r1, [r6, #0]
 80048dc:	0606      	lsls	r6, r0, #24
 80048de:	d501      	bpl.n	80048e4 <_printf_i+0xbc>
 80048e0:	681d      	ldr	r5, [r3, #0]
 80048e2:	e003      	b.n	80048ec <_printf_i+0xc4>
 80048e4:	0645      	lsls	r5, r0, #25
 80048e6:	d5fb      	bpl.n	80048e0 <_printf_i+0xb8>
 80048e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048ec:	2d00      	cmp	r5, #0
 80048ee:	da03      	bge.n	80048f8 <_printf_i+0xd0>
 80048f0:	232d      	movs	r3, #45	@ 0x2d
 80048f2:	426d      	negs	r5, r5
 80048f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048f8:	230a      	movs	r3, #10
 80048fa:	4859      	ldr	r0, [pc, #356]	@ (8004a60 <_printf_i+0x238>)
 80048fc:	e011      	b.n	8004922 <_printf_i+0xfa>
 80048fe:	6821      	ldr	r1, [r4, #0]
 8004900:	6833      	ldr	r3, [r6, #0]
 8004902:	0608      	lsls	r0, r1, #24
 8004904:	f853 5b04 	ldr.w	r5, [r3], #4
 8004908:	d402      	bmi.n	8004910 <_printf_i+0xe8>
 800490a:	0649      	lsls	r1, r1, #25
 800490c:	bf48      	it	mi
 800490e:	b2ad      	uxthmi	r5, r5
 8004910:	2f6f      	cmp	r7, #111	@ 0x6f
 8004912:	6033      	str	r3, [r6, #0]
 8004914:	bf14      	ite	ne
 8004916:	230a      	movne	r3, #10
 8004918:	2308      	moveq	r3, #8
 800491a:	4851      	ldr	r0, [pc, #324]	@ (8004a60 <_printf_i+0x238>)
 800491c:	2100      	movs	r1, #0
 800491e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004922:	6866      	ldr	r6, [r4, #4]
 8004924:	2e00      	cmp	r6, #0
 8004926:	bfa8      	it	ge
 8004928:	6821      	ldrge	r1, [r4, #0]
 800492a:	60a6      	str	r6, [r4, #8]
 800492c:	bfa4      	itt	ge
 800492e:	f021 0104 	bicge.w	r1, r1, #4
 8004932:	6021      	strge	r1, [r4, #0]
 8004934:	b90d      	cbnz	r5, 800493a <_printf_i+0x112>
 8004936:	2e00      	cmp	r6, #0
 8004938:	d04b      	beq.n	80049d2 <_printf_i+0x1aa>
 800493a:	4616      	mov	r6, r2
 800493c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004940:	fb03 5711 	mls	r7, r3, r1, r5
 8004944:	5dc7      	ldrb	r7, [r0, r7]
 8004946:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800494a:	462f      	mov	r7, r5
 800494c:	42bb      	cmp	r3, r7
 800494e:	460d      	mov	r5, r1
 8004950:	d9f4      	bls.n	800493c <_printf_i+0x114>
 8004952:	2b08      	cmp	r3, #8
 8004954:	d10b      	bne.n	800496e <_printf_i+0x146>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	07df      	lsls	r7, r3, #31
 800495a:	d508      	bpl.n	800496e <_printf_i+0x146>
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	6861      	ldr	r1, [r4, #4]
 8004960:	4299      	cmp	r1, r3
 8004962:	bfde      	ittt	le
 8004964:	2330      	movle	r3, #48	@ 0x30
 8004966:	f806 3c01 	strble.w	r3, [r6, #-1]
 800496a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800496e:	1b92      	subs	r2, r2, r6
 8004970:	6122      	str	r2, [r4, #16]
 8004972:	464b      	mov	r3, r9
 8004974:	4621      	mov	r1, r4
 8004976:	4640      	mov	r0, r8
 8004978:	f8cd a000 	str.w	sl, [sp]
 800497c:	aa03      	add	r2, sp, #12
 800497e:	f7ff fee1 	bl	8004744 <_printf_common>
 8004982:	3001      	adds	r0, #1
 8004984:	d14a      	bne.n	8004a1c <_printf_i+0x1f4>
 8004986:	f04f 30ff 	mov.w	r0, #4294967295
 800498a:	b004      	add	sp, #16
 800498c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	f043 0320 	orr.w	r3, r3, #32
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	2778      	movs	r7, #120	@ 0x78
 800499a:	4832      	ldr	r0, [pc, #200]	@ (8004a64 <_printf_i+0x23c>)
 800499c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	6831      	ldr	r1, [r6, #0]
 80049a4:	061f      	lsls	r7, r3, #24
 80049a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80049aa:	d402      	bmi.n	80049b2 <_printf_i+0x18a>
 80049ac:	065f      	lsls	r7, r3, #25
 80049ae:	bf48      	it	mi
 80049b0:	b2ad      	uxthmi	r5, r5
 80049b2:	6031      	str	r1, [r6, #0]
 80049b4:	07d9      	lsls	r1, r3, #31
 80049b6:	bf44      	itt	mi
 80049b8:	f043 0320 	orrmi.w	r3, r3, #32
 80049bc:	6023      	strmi	r3, [r4, #0]
 80049be:	b11d      	cbz	r5, 80049c8 <_printf_i+0x1a0>
 80049c0:	2310      	movs	r3, #16
 80049c2:	e7ab      	b.n	800491c <_printf_i+0xf4>
 80049c4:	4826      	ldr	r0, [pc, #152]	@ (8004a60 <_printf_i+0x238>)
 80049c6:	e7e9      	b.n	800499c <_printf_i+0x174>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	f023 0320 	bic.w	r3, r3, #32
 80049ce:	6023      	str	r3, [r4, #0]
 80049d0:	e7f6      	b.n	80049c0 <_printf_i+0x198>
 80049d2:	4616      	mov	r6, r2
 80049d4:	e7bd      	b.n	8004952 <_printf_i+0x12a>
 80049d6:	6833      	ldr	r3, [r6, #0]
 80049d8:	6825      	ldr	r5, [r4, #0]
 80049da:	1d18      	adds	r0, r3, #4
 80049dc:	6961      	ldr	r1, [r4, #20]
 80049de:	6030      	str	r0, [r6, #0]
 80049e0:	062e      	lsls	r6, r5, #24
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	d501      	bpl.n	80049ea <_printf_i+0x1c2>
 80049e6:	6019      	str	r1, [r3, #0]
 80049e8:	e002      	b.n	80049f0 <_printf_i+0x1c8>
 80049ea:	0668      	lsls	r0, r5, #25
 80049ec:	d5fb      	bpl.n	80049e6 <_printf_i+0x1be>
 80049ee:	8019      	strh	r1, [r3, #0]
 80049f0:	2300      	movs	r3, #0
 80049f2:	4616      	mov	r6, r2
 80049f4:	6123      	str	r3, [r4, #16]
 80049f6:	e7bc      	b.n	8004972 <_printf_i+0x14a>
 80049f8:	6833      	ldr	r3, [r6, #0]
 80049fa:	2100      	movs	r1, #0
 80049fc:	1d1a      	adds	r2, r3, #4
 80049fe:	6032      	str	r2, [r6, #0]
 8004a00:	681e      	ldr	r6, [r3, #0]
 8004a02:	6862      	ldr	r2, [r4, #4]
 8004a04:	4630      	mov	r0, r6
 8004a06:	f000 f859 	bl	8004abc <memchr>
 8004a0a:	b108      	cbz	r0, 8004a10 <_printf_i+0x1e8>
 8004a0c:	1b80      	subs	r0, r0, r6
 8004a0e:	6060      	str	r0, [r4, #4]
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	6123      	str	r3, [r4, #16]
 8004a14:	2300      	movs	r3, #0
 8004a16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a1a:	e7aa      	b.n	8004972 <_printf_i+0x14a>
 8004a1c:	4632      	mov	r2, r6
 8004a1e:	4649      	mov	r1, r9
 8004a20:	4640      	mov	r0, r8
 8004a22:	6923      	ldr	r3, [r4, #16]
 8004a24:	47d0      	blx	sl
 8004a26:	3001      	adds	r0, #1
 8004a28:	d0ad      	beq.n	8004986 <_printf_i+0x15e>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	079b      	lsls	r3, r3, #30
 8004a2e:	d413      	bmi.n	8004a58 <_printf_i+0x230>
 8004a30:	68e0      	ldr	r0, [r4, #12]
 8004a32:	9b03      	ldr	r3, [sp, #12]
 8004a34:	4298      	cmp	r0, r3
 8004a36:	bfb8      	it	lt
 8004a38:	4618      	movlt	r0, r3
 8004a3a:	e7a6      	b.n	800498a <_printf_i+0x162>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4632      	mov	r2, r6
 8004a40:	4649      	mov	r1, r9
 8004a42:	4640      	mov	r0, r8
 8004a44:	47d0      	blx	sl
 8004a46:	3001      	adds	r0, #1
 8004a48:	d09d      	beq.n	8004986 <_printf_i+0x15e>
 8004a4a:	3501      	adds	r5, #1
 8004a4c:	68e3      	ldr	r3, [r4, #12]
 8004a4e:	9903      	ldr	r1, [sp, #12]
 8004a50:	1a5b      	subs	r3, r3, r1
 8004a52:	42ab      	cmp	r3, r5
 8004a54:	dcf2      	bgt.n	8004a3c <_printf_i+0x214>
 8004a56:	e7eb      	b.n	8004a30 <_printf_i+0x208>
 8004a58:	2500      	movs	r5, #0
 8004a5a:	f104 0619 	add.w	r6, r4, #25
 8004a5e:	e7f5      	b.n	8004a4c <_printf_i+0x224>
 8004a60:	08004c1f 	.word	0x08004c1f
 8004a64:	08004c30 	.word	0x08004c30

08004a68 <memmove>:
 8004a68:	4288      	cmp	r0, r1
 8004a6a:	b510      	push	{r4, lr}
 8004a6c:	eb01 0402 	add.w	r4, r1, r2
 8004a70:	d902      	bls.n	8004a78 <memmove+0x10>
 8004a72:	4284      	cmp	r4, r0
 8004a74:	4623      	mov	r3, r4
 8004a76:	d807      	bhi.n	8004a88 <memmove+0x20>
 8004a78:	1e43      	subs	r3, r0, #1
 8004a7a:	42a1      	cmp	r1, r4
 8004a7c:	d008      	beq.n	8004a90 <memmove+0x28>
 8004a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a86:	e7f8      	b.n	8004a7a <memmove+0x12>
 8004a88:	4601      	mov	r1, r0
 8004a8a:	4402      	add	r2, r0
 8004a8c:	428a      	cmp	r2, r1
 8004a8e:	d100      	bne.n	8004a92 <memmove+0x2a>
 8004a90:	bd10      	pop	{r4, pc}
 8004a92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a9a:	e7f7      	b.n	8004a8c <memmove+0x24>

08004a9c <_sbrk_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	4d05      	ldr	r5, [pc, #20]	@ (8004ab8 <_sbrk_r+0x1c>)
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	602b      	str	r3, [r5, #0]
 8004aa8:	f7fd f990 	bl	8001dcc <_sbrk>
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	d102      	bne.n	8004ab6 <_sbrk_r+0x1a>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	b103      	cbz	r3, 8004ab6 <_sbrk_r+0x1a>
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	200004d0 	.word	0x200004d0

08004abc <memchr>:
 8004abc:	4603      	mov	r3, r0
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	b2c9      	uxtb	r1, r1
 8004ac2:	4402      	add	r2, r0
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	d101      	bne.n	8004ace <memchr+0x12>
 8004aca:	2000      	movs	r0, #0
 8004acc:	e003      	b.n	8004ad6 <memchr+0x1a>
 8004ace:	7804      	ldrb	r4, [r0, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	428c      	cmp	r4, r1
 8004ad4:	d1f6      	bne.n	8004ac4 <memchr+0x8>
 8004ad6:	bd10      	pop	{r4, pc}

08004ad8 <memcpy>:
 8004ad8:	440a      	add	r2, r1
 8004ada:	4291      	cmp	r1, r2
 8004adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae0:	d100      	bne.n	8004ae4 <memcpy+0xc>
 8004ae2:	4770      	bx	lr
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aea:	4291      	cmp	r1, r2
 8004aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af0:	d1f9      	bne.n	8004ae6 <memcpy+0xe>
 8004af2:	bd10      	pop	{r4, pc}

08004af4 <_realloc_r>:
 8004af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af8:	4680      	mov	r8, r0
 8004afa:	4615      	mov	r5, r2
 8004afc:	460c      	mov	r4, r1
 8004afe:	b921      	cbnz	r1, 8004b0a <_realloc_r+0x16>
 8004b00:	4611      	mov	r1, r2
 8004b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b06:	f7ff bc39 	b.w	800437c <_malloc_r>
 8004b0a:	b92a      	cbnz	r2, 8004b18 <_realloc_r+0x24>
 8004b0c:	f7ff fbcc 	bl	80042a8 <_free_r>
 8004b10:	2400      	movs	r4, #0
 8004b12:	4620      	mov	r0, r4
 8004b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b18:	f000 f81a 	bl	8004b50 <_malloc_usable_size_r>
 8004b1c:	4285      	cmp	r5, r0
 8004b1e:	4606      	mov	r6, r0
 8004b20:	d802      	bhi.n	8004b28 <_realloc_r+0x34>
 8004b22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b26:	d8f4      	bhi.n	8004b12 <_realloc_r+0x1e>
 8004b28:	4629      	mov	r1, r5
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	f7ff fc26 	bl	800437c <_malloc_r>
 8004b30:	4607      	mov	r7, r0
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d0ec      	beq.n	8004b10 <_realloc_r+0x1c>
 8004b36:	42b5      	cmp	r5, r6
 8004b38:	462a      	mov	r2, r5
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	bf28      	it	cs
 8004b3e:	4632      	movcs	r2, r6
 8004b40:	f7ff ffca 	bl	8004ad8 <memcpy>
 8004b44:	4621      	mov	r1, r4
 8004b46:	4640      	mov	r0, r8
 8004b48:	f7ff fbae 	bl	80042a8 <_free_r>
 8004b4c:	463c      	mov	r4, r7
 8004b4e:	e7e0      	b.n	8004b12 <_realloc_r+0x1e>

08004b50 <_malloc_usable_size_r>:
 8004b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b54:	1f18      	subs	r0, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bfbc      	itt	lt
 8004b5a:	580b      	ldrlt	r3, [r1, r0]
 8004b5c:	18c0      	addlt	r0, r0, r3
 8004b5e:	4770      	bx	lr

08004b60 <_init>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr

08004b6c <_fini>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr
